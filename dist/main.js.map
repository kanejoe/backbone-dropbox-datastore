{"version":3,"file":"main.js","sources":["lib/jquery/jquery.min.js","lib/lodash/dist/lodash.underscore.min.js","lib/backbone/backbone-min.js","lib/backbone.stickit/backbone.stickit.js","lib/momentjs/moment.js","lib/dropbox-datastore/dropbox-datastores-1.0-latest.js","lib/jquery-serializeForm/src/serializeForm.js","config.js","gapi.js","models/task.js","collections/tasklists.js","lib/requirejs-text/text.js","templates/scaffold.html!text","templates/tasksTable.html!text","templates/tasksTr.html!text","views/tasksView.js","views/taskTableView.js","templates/tasksForm.html!text","views/formViewTasks.js","templates/navbar.html!text","views/navbarView.js","views/appView.js","app.js","ga.js","main.js"],"names":[],"mappings":"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","sourcesContent":["\n/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map\n*/\n(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p=\"2.0.3\",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,k=/^-ms-/,N=/-([\\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener(\"DOMContentLoaded\",S,!1),e.removeEventListener(\"load\",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if(\"string\"==typeof e){if(r=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for(\"boolean\"==typeof s&&(l=s,s=arguments[1]||{},a=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger(\"ready\").off(\"ready\")))},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,\"text/xml\")}catch(r){t=undefined}return(!t||t.getElementsByTagName(\"parsererror\").length)&&x.error(\"Invalid XML: \"+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf(\"use strict\")?(t=o.createElement(\"script\"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,\"ms-\").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?\"\":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if(\"number\"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return\"string\"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if(\"object\"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),\"complete\"===o.readyState?setTimeout(x.ready):(o.addEventListener(\"DOMContentLoaded\",S,!1),e.addEventListener(\"load\",S,!1))),n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v=\"sizzle\"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1<<31,A={}.hasOwnProperty,L=[],q=L.pop,H=L.push,O=L.push,F=L.slice,P=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},R=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",W=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",$=W.replace(\"w\",\"w#\"),B=\"\\\\[\"+M+\"*(\"+W+\")\"+M+\"*(?:([*^$|!~]?=)\"+M+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+$+\")|)|)\"+M+\"*\\\\]\",I=\":(\"+W+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+B.replace(3,8)+\")*)|.*)\\\\)|)\",z=RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),_=RegExp(\"^\"+M+\"*,\"+M+\"*\"),X=RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=RegExp(M+\"*[+~]\"),Y=RegExp(\"=\"+M+\"*([^\\\\]'\\\"]*)\"+M+\"*\\\\]\",\"g\"),V=RegExp(I),G=RegExp(\"^\"+$+\"$\"),J={ID:RegExp(\"^#(\"+W+\")\"),CLASS:RegExp(\"^\\\\.(\"+W+\")\"),TAG:RegExp(\"^(\"+W.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+B),PSEUDO:RegExp(\"^\"+I),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:RegExp(\"^(?:\"+R+\")$\",\"i\"),needsContext:RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Q=/^[^{]+\\{\\s*\\[native \\w/,K=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,Z=/^(?:input|select|textarea|button)$/i,et=/^h\\d$/i,tt=/'|\\\\/g,nt=RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+M+\"?|(\"+M+\")|.)\",\"ig\"),rt=function(e,t,n){var r=\"0x\"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{O.apply(L=F.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(it){O={apply:L.length?function(e,t){H.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function ot(e,t,r,i){var o,s,a,u,l,f,g,m,x,w;if((t?t.ownerDocument||t:b)!==p&&c(t),t=t||p,r=r||[],!e||\"string\"!=typeof e)return r;if(1!==(u=t.nodeType)&&9!==u)return[];if(h&&!i){if(o=K.exec(e))if(a=o[1]){if(9===u){if(s=t.getElementById(a),!s||!s.parentNode)return r;if(s.id===a)return r.push(s),r}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&y(t,s)&&s.id===a)return r.push(s),r}else{if(o[2])return O.apply(r,t.getElementsByTagName(e)),r;if((a=o[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&(!d||!d.test(e))){if(m=g=v,x=t,w=9===u&&e,1===u&&\"object\"!==t.nodeName.toLowerCase()){f=gt(e),(g=t.getAttribute(\"id\"))?m=g.replace(tt,\"\\\\$&\"):t.setAttribute(\"id\",m),m=\"[id='\"+m+\"'] \",l=f.length;while(l--)f[l]=m+mt(f[l]);x=U.test(e)&&t.parentNode||t,w=f.join(\",\")}if(w)try{return O.apply(r,x.querySelectorAll(w)),r}catch(T){}finally{g||t.removeAttribute(\"id\")}}}return kt(e.replace(z,\"$1\"),t,r,i)}function st(){var e=[];function t(n,r){return e.push(n+=\" \")>i.cacheLength&&delete t[e.shift()],t[n]=r}return t}function at(e){return e[v]=!0,e}function ut(e){var t=p.createElement(\"div\");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function lt(e,t){var n=e.split(\"|\"),r=e.length;while(r--)i.attrHandle[n[r]]=t}function ct(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function ht(e){return at(function(t){return t=+t,at(function(n,r){var i,o=e([],n.length,t),s=o.length;while(s--)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}s=ot.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},n=ot.support={},c=ot.setDocument=function(e){var t=e?e.ownerDocument||e:b,r=t.defaultView;return t!==p&&9===t.nodeType&&t.documentElement?(p=t,f=t.documentElement,h=!s(t),r&&r.attachEvent&&r!==r.top&&r.attachEvent(\"onbeforeunload\",function(){c()}),n.attributes=ut(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),n.getElementsByTagName=ut(function(e){return e.appendChild(t.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),n.getElementsByClassName=ut(function(e){return e.innerHTML=\"<div class='a'></div><div class='a i'></div>\",e.firstChild.className=\"i\",2===e.getElementsByClassName(\"i\").length}),n.getById=ut(function(e){return f.appendChild(e).id=v,!t.getElementsByName||!t.getElementsByName(v).length}),n.getById?(i.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){return e.getAttribute(\"id\")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return typeof t.getElementsByTagName!==j?t.getElementsByTagName(e):undefined}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){return typeof t.getElementsByClassName!==j&&h?t.getElementsByClassName(e):undefined},g=[],d=[],(n.qsa=Q.test(t.querySelectorAll))&&(ut(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||d.push(\"\\\\[\"+M+\"*(?:value|\"+R+\")\"),e.querySelectorAll(\":checked\").length||d.push(\":checked\")}),ut(function(e){var n=t.createElement(\"input\");n.setAttribute(\"type\",\"hidden\"),e.appendChild(n).setAttribute(\"t\",\"\"),e.querySelectorAll(\"[t^='']\").length&&d.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":enabled\").length||d.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),d.push(\",.*:\")})),(n.matchesSelector=Q.test(m=f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut(function(e){n.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",I)}),d=d.length&&RegExp(d.join(\"|\")),g=g.length&&RegExp(g.join(\"|\")),y=Q.test(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},S=f.compareDocumentPosition?function(e,r){if(e===r)return E=!0,0;var i=r.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(r);return i?1&i||!n.sortDetached&&r.compareDocumentPosition(e)===i?e===t||y(b,e)?-1:r===t||y(b,r)?1:l?P.call(l,e)-P.call(l,r):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,n){var r,i=0,o=e.parentNode,s=n.parentNode,a=[e],u=[n];if(e===n)return E=!0,0;if(!o||!s)return e===t?-1:n===t?1:o?-1:s?1:l?P.call(l,e)-P.call(l,n):0;if(o===s)return ct(e,n);r=e;while(r=r.parentNode)a.unshift(r);r=n;while(r=r.parentNode)u.unshift(r);while(a[i]===u[i])i++;return i?ct(a[i],u[i]):a[i]===b?-1:u[i]===b?1:0},t):p},ot.matches=function(e,t){return ot(e,null,null,t)},ot.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Y,\"='$1']\"),!(!n.matchesSelector||!h||g&&g.test(t)||d&&d.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return ot(t,p,null,[e]).length>0},ot.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},ot.attr=function(e,t){(e.ownerDocument||e)!==p&&c(e);var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!h):undefined;return o===undefined?n.attributes||!h?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},ot.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},ot.uniqueSort=function(e){var t,r=[],i=0,o=0;if(E=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),E){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return e},o=ot.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=ot.selectors={cacheLength:50,createPseudo:at,match:J,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(nt,rt),e[3]=(e[4]||e[5]||\"\").replace(nt,rt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||ot.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&ot.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return J.CHILD.test(e[0])?null:(e[3]&&e[4]!==undefined?e[2]=e[4]:n&&V.test(n)&&(t=gt(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(nt,rt).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+\" \"];return t||(t=RegExp(\"(^|\"+M+\")\"+e+\"(\"+M+\"|$)\"))&&C(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=ot.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),s=\"last\"!==e.slice(-4),a=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,h,d,g=o!==s?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),x=!u&&!a;if(m){if(o){while(g){p=t;while(p=p[g])if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g=\"only\"===e&&!d&&\"nextSibling\"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&x){c=m[v]||(m[v]={}),l=c[e]||[],h=l[0]===w&&l[1],f=l[0]===w&&l[2],p=h&&m.childNodes[h];while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[w,h,f];break}}else if(x&&(l=(t[v]||(t[v]={}))[e])&&l[0]===w)f=l[1];else while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if((a?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(x&&((p[v]||(p[v]={}))[e]=[w,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ot.error(\"unsupported pseudo: \"+e);return r[v]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?at(function(e,n){var i,o=r(e,t),s=o.length;while(s--)i=P.call(e,o[s]),e[i]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:at(function(e){var t=[],n=[],r=a(e.replace(z,\"$1\"));return r[v]?at(function(e,t,n,i){var o,s=r(e,null,i,[]),a=e.length;while(a--)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:at(function(e){return function(t){return ot(e,t).length>0}}),contains:at(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:at(function(e){return G.test(e||\"\")||ot.error(\"unsupported lang: \"+e),e=e.replace(nt,rt).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return et.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},i.pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=ft(t);function dt(){}dt.prototype=i.filters=i.pseudos,i.setFilters=new dt;function gt(e,t){var n,r,o,s,a,u,l,c=k[e+\" \"];if(c)return t?0:c.slice(0);a=e,u=[],l=i.preFilter;while(a){(!n||(r=_.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z,\" \")}),a=a.slice(n.length));for(s in i.filter)!(r=J[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ot.error(e):k(e,u).slice(0)}function mt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function yt(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,s=T++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,a){var u,l,c,p=w+\" \"+s;if(a){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,a))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[v]||(t[v]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,a)||r,l[1]===!0)return!0}}function vt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,s=[],a=0,u=e.length,l=null!=t;for(;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function bt(e,t,n,r,i,o){return r&&!r[v]&&(r=bt(r)),i&&!i[v]&&(i=bt(i,o)),at(function(o,s,a,u){var l,c,p,f=[],h=[],d=s.length,g=o||Ct(t||\"*\",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xt(g,f,e,a,u),y=n?i||(o?e:d||r)?[]:s:m;if(n&&n(m,y,a,u),r){l=xt(y,h),r(l,[],a,u),c=l.length;while(c--)(p=l[c])&&(y[h[c]]=!(m[h[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?P.call(o,p):f[c])>-1&&(o[l]=!(s[l]=p))}}else y=xt(y===s?y.splice(d,y.length):y),i?i(null,s,y,u):O.apply(s,y)})}function wt(e){var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[\" \"],l=s?1:0,c=yt(function(e){return e===t},a,!0),p=yt(function(e){return P.call(t,e)>-1},a,!0),f=[function(e,n,r){return!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])f=[yt(vt(f),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[v]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return bt(l>1&&vt(f),l>1&&mt(e.slice(0,l-1).concat({value:\" \"===e[l-2].type?\"*\":\"\"})).replace(z,\"$1\"),n,r>l&&wt(e.slice(l,r)),o>r&&wt(e=e.slice(r)),o>r&&mt(e))}f.push(n)}return vt(f)}function Tt(e,t){var n=0,o=t.length>0,s=e.length>0,a=function(a,l,c,f,h){var d,g,m,y=[],v=0,x=\"0\",b=a&&[],T=null!=h,C=u,k=a||s&&i.find.TAG(\"*\",h&&l.parentNode||l),N=w+=null==C?1:Math.random()||.1;for(T&&(u=l!==p&&l,r=n);null!=(d=k[x]);x++){if(s&&d){g=0;while(m=e[g++])if(m(d,l,c)){f.push(d);break}T&&(w=N,r=++n)}o&&((d=!m&&d)&&v--,a&&b.push(d))}if(v+=x,o&&x!==v){g=0;while(m=t[g++])m(b,y,l,c);if(a){if(v>0)while(x--)b[x]||y[x]||(y[x]=q.call(f));y=xt(y)}O.apply(f,y),T&&!a&&y.length>0&&v+t.length>1&&ot.uniqueSort(f)}return T&&(w=N,u=C),b};return o?at(a):a}a=ot.compile=function(e,t){var n,r=[],i=[],o=N[e+\" \"];if(!o){t||(t=gt(e)),n=t.length;while(n--)o=wt(t[n]),o[v]?r.push(o):i.push(o);o=N(e,Tt(i,r))}return o};function Ct(e,t,n){var r=0,i=t.length;for(;i>r;r++)ot(e,t[r],n);return n}function kt(e,t,r,o){var s,u,l,c,p,f=gt(e);if(!o&&1===f.length){if(u=f[0]=f[0].slice(0),u.length>2&&\"ID\"===(l=u[0]).type&&n.getById&&9===t.nodeType&&h&&i.relative[u[1].type]){if(t=(i.find.ID(l.matches[0].replace(nt,rt),t)||[])[0],!t)return r;e=e.slice(u.shift().value.length)}s=J.needsContext.test(e)?0:u.length;while(s--){if(l=u[s],i.relative[c=l.type])break;if((p=i.find[c])&&(o=p(l.matches[0].replace(nt,rt),U.test(u[0].type)&&t.parentNode||t))){if(u.splice(s,1),e=o.length&&mt(u),!e)return O.apply(r,o),r;break}}}return a(e,f)(o,t,!h,r,U.test(e)),r}n.sortStable=v.split(\"\").sort(S).join(\"\")===v,n.detectDuplicates=E,c(),n.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(p.createElement(\"div\"))}),ut(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||lt(\"type|href|height|width\",function(e,t,n){return n?undefined:e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),n.attributes&&ut(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||lt(\"value\",function(e,t,n){return n||\"input\"!==e.nodeName.toLowerCase()?undefined:e.defaultValue}),ut(function(e){return null==e.getAttribute(\"disabled\")})||lt(R,function(e,t,n){var r;return n?undefined:(r=e.getAttributeNode(t))&&r.specified?r.value:e[t]===!0?t.toLowerCase():null}),x.find=ot,x.expr=ot.selectors,x.expr[\":\"]=x.expr.pseudos,x.unique=ot.uniqueSort,x.text=ot.getText,x.isXMLDoc=ot.isXML,x.contains=ot.contains}(e);var D={};function A(e){var t=D[e]={};return x.each(e.match(w)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e=\"string\"==typeof e?D[e]||A(e):x.extend({},e);var t,n,r,i,o,s,a=[],u=!e.once&&[],l=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(u?u.length&&l(u.shift()):t?a=[]:c.disable())},c={add:function(){if(a){var n=a.length;(function s(t){x.each(t,function(t,n){var r=x.type(n);\"function\"===r?e.unique&&c.has(n)||a.push(n):n&&n.length&&\"string\"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,l(t))}return this},remove:function(){return a&&x.each(arguments,function(e,t){var n;while((n=x.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?x.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=u=t=undefined,this},disabled:function(){return!a},lock:function(){return u=undefined,t||c.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!a||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",x.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",x.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",x.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var s=o[0],a=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+\"With\"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,u,l;if(r>1)for(a=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(s(t,l,n)).fail(o.reject).progress(s(t,u,a)):--i;return i||o.resolveWith(l,n),o.promise()}}),x.support=function(t){var n=o.createElement(\"input\"),r=o.createDocumentFragment(),i=o.createElement(\"div\"),s=o.createElement(\"select\"),a=s.appendChild(o.createElement(\"option\"));return n.type?(n.type=\"checkbox\",t.checkOn=\"\"!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement(\"input\"),n.value=\"t\",n.type=\"radio\",t.radioValue=\"t\"===n.value,n.setAttribute(\"checked\",\"t\"),n.setAttribute(\"name\",\"t\"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles=\"onfocusin\"in e,i.style.backgroundClip=\"content-box\",i.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===i.style.backgroundClip,x(function(){var n,r,s=\"padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box\",a=o.getElementsByTagName(\"body\")[0];a&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",a.appendChild(n).appendChild(i),i.innerHTML=\"\",i.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%\",x.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(i,null)||{width:\"4px\"}).width,r=i.appendChild(o.createElement(\"div\")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width=\"0\",i.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,q,H=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,O=/([A-Z])/g;function F(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=x.expando+Math.random()}F.uid=1,F.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},F.prototype={key:function(e){if(!F.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=F.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,x.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if(\"string\"==typeof t)o[t]=n;else if(x.isEmptyObject(o))x.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&\"string\"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,x.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{x.isArray(t)?r=t.concat(t.map(x.camelCase)):(i=x.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!x.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new F,q=new F,x.extend({acceptData:F.accepts,hasData:function(e){return L.hasData(e)||q.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!q.get(i,\"hasDataAttrs\"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf(\"data-\")&&(r=x.camelCase(r.slice(5)),P(i,r,s[r]));q.set(i,\"hasDataAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){L.set(this,e)}):x.access(this,function(t){var n,r=x.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=P(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf(\"-\")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function P(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r=\"data-\"+t.replace(O,\"-$1\").toLowerCase(),n=e.getAttribute(r),\"string\"==typeof n){try{n=\"true\"===n?!0:\"false\"===n?!1:\"null\"===n?null:+n+\"\"===n?+n:H.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}x.extend({queue:function(e,t,n){var r;return e?(t=(t||\"fx\")+\"queue\",r=q.get(e,t),n&&(!r||x.isArray(n)?r=q.access(e,t,x.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||\"fx\";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),s=function(){x.dequeue(e,t)\n};\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return q.get(e,n)||q.access(e,n,{empty:x.Callbacks(\"once memory\").add(function(){q.remove(e,[t+\"queue\",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),n>arguments.length?x.queue(this[0],e):t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=undefined),e=e||\"fx\";while(s--)n=q.get(o[s],e+\"queueHooks\"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var R,M,W=/[\\t\\r\\n\\f]/g,$=/\\r/g,B=/^(?:input|select|textarea|button)$/i;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=\"string\"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(W,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=0===arguments.length||\"string\"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(W,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?x.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e;return\"boolean\"==typeof t&&\"string\"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var t,i=0,o=x(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||\"boolean\"===n)&&(this.className&&q.set(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":q.get(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(W,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=x.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,x(this).val()):e,null==i?i=\"\":\"number\"==typeof i?i+=\"\":x.isArray(i)&&(i=x.map(i,function(e){return null==e?\"\":e+\"\"})),t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],t&&\"set\"in t&&t.set(this,i,\"value\")!==undefined||(this.value=i))});if(i)return t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()],t&&\"get\"in t&&(n=t.get(i,\"value\"))!==undefined?n:(n=i.value,\"string\"==typeof n?n.replace($,\"\"):null==n?\"\":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;for(;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&x.nodeName(n.parentNode,\"optgroup\"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(t=t.toLowerCase(),i=x.attrHooks[t]||(x.expr.match.bool.test(t)?M:R)),n===undefined?i&&\"get\"in i&&null!==(o=i.get(e,t))?o:(o=x.find.attr(e,t),null==o?undefined:o):null!==n?i&&\"set\"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+\"\"),n):(x.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&\"radio\"===t&&x.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!x.isXMLDoc(e),o&&(t=x.propFix[t]||t,i=x.propHooks[t]),n!==undefined?i&&\"set\"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute(\"tabindex\")||B.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),M={set:function(e,t,n){return t===!1?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\\w+/g),function(e,t){var n=x.expr.attrHandle[t]||x.find.attr;x.expr.attrHandle[t]=function(e,t,r){var i=x.expr.attrHandle[t],o=r?undefined:(x.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return x.expr.attrHandle[t]=i,o}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),x.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){x.propFix[this.toLowerCase()]=this}),x.each([\"radio\",\"checkbox\"],function(){x.valHooks[this]={set:function(e,t){return x.isArray(t)?e.checked=x.inArray(x(e).val(),t)>=0:undefined}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})});var I=/^key/,z=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,X=/^([^.]*)(?:\\.(.+)|)$/;function U(){return!0}function Y(){return!1}function V(){try{return o.activeElement}catch(e){}}x.event={global:{},add:function(e,t,n,i,o){var s,a,u,l,c,p,f,h,d,g,m,y=q.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=x.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof x===r||e&&x.event.triggered===e.type?undefined:x.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||\"\").match(w)||[\"\"],c=t.length;while(c--)u=X.exec(t[c])||[],d=m=u[1],g=(u[2]||\"\").split(\".\").sort(),d&&(f=x.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},p=x.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:g.join(\".\")},s),(h=l[d])||(h=l[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),x.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,f,h,d,g,m=q.hasData(e)&&q.get(e);if(m&&(u=m.events)){t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)if(a=X.exec(t[l])||[],h=g=a[1],d=(a[2]||\"\").split(\".\").sort(),h){p=x.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=u[h]||[],a=a[2]&&RegExp(\"(^|\\\\.)\"+d.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),s=o=f.length;while(o--)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||x.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)x.event.remove(e,h+t[l],n,r,!0);x.isEmptyObject(u)&&(delete m.handle,q.remove(e,\"events\"))}},trigger:function(t,n,r,i){var s,a,u,l,c,p,f,h=[r||o],d=y.call(t,\"type\")?t.type:t,g=y.call(t,\"namespace\")?t.namespace.split(\".\"):[];if(a=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!_.test(d+x.event.triggered)&&(d.indexOf(\".\")>=0&&(g=d.split(\".\"),d=g.shift(),g.sort()),c=0>d.indexOf(\":\")&&\"on\"+d,t=t[x.expando]?t:new x.Event(d,\"object\"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join(\".\"),t.namespace_re=t.namespace?RegExp(\"(^|\\\\.)\"+g.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:x.makeArray(n,[t]),f=x.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!x.isWindow(r)){for(l=f.delegateType||d,_.test(l+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||o)&&h.push(u.defaultView||u.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?l:f.bindType||d,p=(q.get(a,\"events\")||{})[t.type]&&q.get(a,\"handle\"),p&&p.apply(a,n),p=c&&a[c],p&&x.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!x.acceptData(r)||c&&x.isFunction(r[d])&&!x.isWindow(r)&&(u=r[c],u&&(r[c]=null),x.event.triggered=d,r[d](),x.event.triggered=undefined,u&&(r[c]=u)),t.result}},dispatch:function(e){e=x.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),u=(q.get(this,\"events\")||{})[e.type]||[],l=x.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||\"click\"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||\"click\"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+\" \",r[i]===undefined&&(r[i]=o.needsContext?x(i,this).index(u)>=0:x.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=z.test(i)?this.mouseHooks:I.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new x.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==V()&&this.focus?(this.focus(),!1):undefined},delegateType:\"focusin\"},blur:{trigger:function(){return this===V()&&this.blur?(this.blur(),!1):undefined},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&x.nodeName(this,\"input\")?(this.click(),!1):undefined},_default:function(e){return x.nodeName(e.target,\"a\")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?U:Y):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,undefined):new x.Event(e,t)},x.Event.prototype={isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=U,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=U,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=U,this.stopPropagation()}},x.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.focusinBubbles||x.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,t,n,r,i){var o,s;if(\"object\"==typeof e){\"string\"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&(\"string\"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=Y;else if(!r)return this;return 1===i&&(o=r,r=function(e){return x().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=x.guid++)),this.each(function(){x.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||\"function\"==typeof t)&&(n=t,t=undefined),n===!1&&(n=Y),this.each(function(){x.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?x.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\\[\\.,]*$/,J=/^(?:parents|prev(?:Until|All))/,Q=x.expr.match.needsContext,K={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if(\"string\"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+\" \"+e:e,n},has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(x.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(et(this,e||[],!0))},filter:function(e){return this.pushStack(et(this,e||[],!1))},is:function(e){return!!et(this,\"string\"==typeof e&&Q.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=Q.test(e)||\"string\"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?\"string\"==typeof e?g.call(x(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function Z(e,t){while((e=e[t])&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return x.dir(e,\"parentNode\",n)},next:function(e){return Z(e,\"nextSibling\")},prev:function(e){return Z(e,\"previousSibling\")},nextAll:function(e){return x.dir(e,\"nextSibling\")},prevAll:function(e){return x.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return x.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return x.dir(e,\"previousSibling\",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return e.contentDocument||x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return\"Until\"!==e.slice(-5)&&(r=n),r&&\"string\"==typeof r&&(i=x.filter(r,i)),this.length>1&&(K[e]||x.unique(i),J.test(e)&&i.reverse()),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function et(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if(\"string\"==typeof t){if(G.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return g.call(t,e)>=0!==n})}var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,nt=/<([\\w:]+)/,rt=/<|&#?\\w+;/,it=/<(?:script|style|link)/i,ot=/^(?:checkbox|radio)$/i,st=/checked\\s*(?:[^=]|=\\s*.checked.)/i,at=/^$|\\/(?:java|ecma)script/i,ut=/^true\\/(.*)/,lt=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,ct={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};ct.optgroup=ct.option,ct.tbody=ct.tfoot=ct.colgroup=ct.caption=ct.thead,ct.th=ct.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===undefined?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&dt(mt(n,\"script\")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(mt(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!it.test(e)&&!ct[(nt.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=e.replace(tt,\"<$1></$2>\");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(x.cleanData(mt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,u,l=0,c=this.length,p=this,h=c-1,d=e[0],g=x.isFunction(d);if(g||!(1>=c||\"string\"!=typeof d||x.support.checkClone)&&st.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(r=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=x.map(mt(r,\"script\"),ft),s=o.length;c>l;l++)a=r,l!==h&&(a=x.clone(a,!0,!0),s&&x.merge(o,mt(a,\"script\"))),t.call(this[l],a,l);if(s)for(u=o[o.length-1].ownerDocument,x.map(o,ht),l=0;s>l;l++)a=o[l],at.test(a.type||\"\")&&!q.access(a,\"globalEval\")&&x.contains(u,a)&&(a.src?x._evalUrl(a.src):x.globalEval(a.textContent.replace(lt,\"\")))}return this}}),x.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){x.fn[e]=function(e){var n,r=[],i=x(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),x(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),x.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=mt(a),o=mt(e),r=0,i=o.length;i>r;r++)yt(o[r],s[r]);if(t)if(n)for(o=o||mt(e),s=s||mt(a),r=0,i=o.length;i>r;r++)gt(o[r],s[r]);else gt(e,a);return s=mt(a,\"script\"),s.length>0&&dt(s,!u&&mt(e,\"script\")),a},buildFragment:function(e,t,n,r){var i,o,s,a,u,l,c=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>c;c++)if(i=e[c],i||0===i)if(\"object\"===x.type(i))x.merge(h,i.nodeType?[i]:i);else if(rt.test(i)){o=o||f.appendChild(t.createElement(\"div\")),s=(nt.exec(i)||[\"\",\"\"])[1].toLowerCase(),a=ct[s]||ct._default,o.innerHTML=a[1]+i.replace(tt,\"<$1></$2>\")+a[2],l=a[0];while(l--)o=o.lastChild;x.merge(h,o.childNodes),o=f.firstChild,o.textContent=\"\"}else h.push(t.createTextNode(i));f.textContent=\"\",c=0;while(i=h[c++])if((!r||-1===x.inArray(i,r))&&(u=x.contains(i.ownerDocument,i),o=mt(f.appendChild(i),\"script\"),u&&dt(o),n)){l=0;while(i=o[l++])at.test(i.type||\"\")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=x.event.special,u=0;for(;(n=e[u])!==undefined;u++){if(F.accepts(n)&&(o=n[q.expando],o&&(t=q.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);q.cache[o]&&delete q.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return x.ajax({url:e,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})}});function pt(e,t){return x.nodeName(e,\"table\")&&x.nodeName(1===t.nodeType?t:t.firstChild,\"tr\")?e.getElementsByTagName(\"tbody\")[0]||e.appendChild(e.ownerDocument.createElement(\"tbody\")):e}function ft(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function ht(e){var t=ut.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function dt(e,t){var n=e.length,r=0;for(;n>r;r++)q.set(e[r],\"globalEval\",!t||q.get(t[r],\"globalEval\"))}function gt(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(q.hasData(e)&&(o=q.access(e),s=q.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)x.event.add(t,i,l[i][n])}L.hasData(e)&&(a=L.access(e),u=x.extend({},a),L.set(t,u))}}function mt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):e.querySelectorAll?e.querySelectorAll(t||\"*\"):[];return t===undefined||t&&x.nodeName(e,t)?x.merge([e],n):n}function yt(e,t){var n=t.nodeName.toLowerCase();\"input\"===n&&ot.test(e.type)?t.checked=e.checked:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}x.fn.extend({wrapAll:function(e){var t;return x.isFunction(e)?this.each(function(t){x(this).wrapAll(e.call(this,t))}):(this[0]&&(t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,\"body\")||x(this).replaceWith(this.childNodes)}).end()}});var vt,xt,bt=/^(none|table(?!-c[ea]).+)/,wt=/^margin/,Tt=RegExp(\"^(\"+b+\")(.*)$\",\"i\"),Ct=RegExp(\"^(\"+b+\")(?!px)[a-z%]+$\",\"i\"),kt=RegExp(\"^([+-])=(\"+b+\")\",\"i\"),Nt={BODY:\"block\"},Et={position:\"absolute\",visibility:\"hidden\",display:\"block\"},St={letterSpacing:0,fontWeight:400},jt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],Dt=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function At(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Dt.length;while(i--)if(t=Dt[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,\"none\"===x.css(e,\"display\")||!x.contains(e.ownerDocument,e)}function qt(t){return e.getComputedStyle(t,null)}function Ht(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=q.get(r,\"olddisplay\"),n=r.style.display,t?(o[s]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&Lt(r)&&(o[s]=q.access(r,\"olddisplay\",Rt(r.nodeName)))):o[s]||(i=Lt(r),(n&&\"none\"!==n||!i)&&q.set(r,\"olddisplay\",i?n:x.css(r,\"display\"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[s]||\"\":\"none\"));return e}x.fn.extend({css:function(e,t){return x.access(this,function(e,t,n){var r,i,o={},s=0;if(x.isArray(t)){for(r=qt(e),i=t.length;i>s;s++)o[t[s]]=x.css(e,t[s],!1,r);return o}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)},show:function(){return Ht(this,!0)},hide:function(){return Ht(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x.camelCase(t),u=e.style;return t=x.cssProps[a]||(x.cssProps[a]=At(u,a)),s=x.cssHooks[t]||x.cssHooks[a],n===undefined?s&&\"get\"in s&&(i=s.get(e,!1,r))!==undefined?i:u[t]:(o=typeof n,\"string\"===o&&(i=kt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(x.css(e,t)),o=\"number\"),null==n||\"number\"===o&&isNaN(n)||(\"number\"!==o||x.cssNumber[a]||(n+=\"px\"),x.support.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(u[t]=\"inherit\"),s&&\"set\"in s&&(n=s.set(e,n,r))===undefined||(u[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=x.camelCase(t);return t=x.cssProps[a]||(x.cssProps[a]=At(e.style,a)),s=x.cssHooks[t]||x.cssHooks[a],s&&\"get\"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=vt(e,t,r)),\"normal\"===i&&t in St&&(i=St[t]),\"\"===n||n?(o=parseFloat(i),n===!0||x.isNumeric(o)?o||0:i):i}}),vt=function(e,t,n){var r,i,o,s=n||qt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,u=e.style;return s&&(\"\"!==a||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),Ct.test(a)&&wt.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=s.width,u.width=r,u.minWidth=i,u.maxWidth=o)),a};function Ot(e,t,n){var r=Tt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function Ft(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,s=0;for(;4>o;o+=2)\"margin\"===n&&(s+=x.css(e,n+jt[o],!0,i)),r?(\"content\"===n&&(s-=x.css(e,\"padding\"+jt[o],!0,i)),\"margin\"!==n&&(s-=x.css(e,\"border\"+jt[o]+\"Width\",!0,i))):(s+=x.css(e,\"padding\"+jt[o],!0,i),\"padding\"!==n&&(s+=x.css(e,\"border\"+jt[o]+\"Width\",!0,i)));return s}function Pt(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=qt(e),s=x.support.boxSizing&&\"border-box\"===x.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=vt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ct.test(i))return i;r=s&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Ft(e,t,n||(s?\"border\":\"content\"),r,o)+\"px\"}function Rt(e){var t=o,n=Nt[e];return n||(n=Mt(e,t),\"none\"!==n&&n||(xt=(xt||x(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(xt[0].contentWindow||xt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=Mt(e,t),xt.detach()),Nt[e]=n),n}function Mt(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],\"display\");return n.remove(),r}x.each([\"height\",\"width\"],function(e,t){x.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&bt.test(x.css(e,\"display\"))?x.swap(e,Et,function(){return Pt(e,t,r)}):Pt(e,t,r):undefined},set:function(e,n,r){var i=r&&qt(e);return Ot(e,n,r?Ft(e,t,r,x.support.boxSizing&&\"border-box\"===x.css(e,\"boxSizing\",!1,i),i):0)}}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,t){return t?x.swap(e,{display:\"inline-block\"},vt,[e,\"marginRight\"]):undefined}}),!x.support.pixelPosition&&x.fn.position&&x.each([\"top\",\"left\"],function(e,t){x.cssHooks[t]={get:function(e,n){return n?(n=vt(e,t),Ct.test(n)?x(e).position()[t]+\"px\":n):undefined}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+jt[r]+t]=o[r]||o[r-2]||o[0];return i}},wt.test(e)||(x.cssHooks[e+t].set=Ot)});var Wt=/%20/g,$t=/\\[\\]$/,Bt=/\\r?\\n/g,It=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,\"elements\");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(\":disabled\")&&zt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ot.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(Bt,\"\\r\\n\")}}):{name:t.name,value:n.replace(Bt,\"\\r\\n\")}}).get()}}),x.param=function(e,t){var n,r=[],i=function(e,t){t=x.isFunction(t)?t():null==t?\"\":t,r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(t===undefined&&(t=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)_t(n,e[n],t,i);return r.join(\"&\").replace(Wt,\"+\")};function _t(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||$t.test(e)?r(e,i):_t(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==x.type(t))r(e,t);else for(i in t)_t(e+\"[\"+i+\"]\",t[i],n,r)}x.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)\n},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)}});var Xt,Ut,Yt=x.now(),Vt=/\\?/,Gt=/#.*$/,Jt=/([?&])_=[^&]*/,Qt=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Zt=/^(?:GET|HEAD)$/,en=/^\\/\\//,tn=/^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,nn=x.fn.load,rn={},on={},sn=\"*/\".concat(\"*\");try{Ut=i.href}catch(an){Ut=o.createElement(\"a\"),Ut.href=\"\",Ut=Ut.href}Xt=tn.exec(Ut.toLowerCase())||[];function un(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,i=0,o=t.toLowerCase().match(w)||[];if(x.isFunction(n))while(r=o[i++])\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ln(e,t,n,r){var i={},o=e===on;function s(a){var u;return i[a]=!0,x.each(e[a]||[],function(e,a){var l=a(t,n,r);return\"string\"!=typeof l||o||i[l]?o?!(u=l):undefined:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i[\"*\"]&&s(\"*\")}function cn(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,t,n){if(\"string\"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(\" \");return a>=0&&(r=e.slice(a),e=e.slice(0,a)),x.isFunction(t)?(n=t,t=undefined):t&&\"object\"==typeof t&&(i=\"POST\"),s.length>0&&x.ajax({url:e,type:i,dataType:\"html\",data:t}).done(function(e){o=arguments,s.html(r?x(\"<div>\").append(x.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},x.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ut,type:\"GET\",isLocal:Kt.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":sn,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":x.parseJSON,\"text xml\":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?cn(cn(e,x.ajaxSettings),t):cn(x.ajaxSettings,e)},ajaxPrefilter:un(rn),ajaxTransport:un(on),ajax:function(e,t){\"object\"==typeof e&&(t=e,e=undefined),t=t||{};var n,r,i,o,s,a,u,l,c=x.ajaxSetup({},t),p=c.context||c,f=c.context&&(p.nodeType||p.jquery)?x(p):x.event,h=x.Deferred(),d=x.Callbacks(\"once memory\"),g=c.statusCode||{},m={},y={},v=0,b=\"canceled\",T={readyState:0,getResponseHeader:function(e){var t;if(2===v){if(!o){o={};while(t=Qt.exec(i))o[t[1].toLowerCase()]=t[2]}t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===v?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return v||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return v||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>v)for(t in e)g[t]=[g[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return n&&n.abort(t),k(0,t),this}};if(h.promise(T).complete=d.add,T.success=T.done,T.error=T.fail,c.url=((e||c.url||Ut)+\"\").replace(Gt,\"\").replace(en,Xt[1]+\"//\"),c.type=t.method||t.type||c.method||c.type,c.dataTypes=x.trim(c.dataType||\"*\").toLowerCase().match(w)||[\"\"],null==c.crossDomain&&(a=tn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===Xt[1]&&a[2]===Xt[2]&&(a[3]||(\"http:\"===a[1]?\"80\":\"443\"))===(Xt[3]||(\"http:\"===Xt[1]?\"80\":\"443\")))),c.data&&c.processData&&\"string\"!=typeof c.data&&(c.data=x.param(c.data,c.traditional)),ln(rn,c,t,T),2===v)return T;u=c.global,u&&0===x.active++&&x.event.trigger(\"ajaxStart\"),c.type=c.type.toUpperCase(),c.hasContent=!Zt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(Vt.test(r)?\"&\":\"?\")+c.data,delete c.data),c.cache===!1&&(c.url=Jt.test(r)?r.replace(Jt,\"$1_=\"+Yt++):r+(Vt.test(r)?\"&\":\"?\")+\"_=\"+Yt++)),c.ifModified&&(x.lastModified[r]&&T.setRequestHeader(\"If-Modified-Since\",x.lastModified[r]),x.etag[r]&&T.setRequestHeader(\"If-None-Match\",x.etag[r])),(c.data&&c.hasContent&&c.contentType!==!1||t.contentType)&&T.setRequestHeader(\"Content-Type\",c.contentType),T.setRequestHeader(\"Accept\",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(\"*\"!==c.dataTypes[0]?\", \"+sn+\"; q=0.01\":\"\"):c.accepts[\"*\"]);for(l in c.headers)T.setRequestHeader(l,c.headers[l]);if(c.beforeSend&&(c.beforeSend.call(p,T,c)===!1||2===v))return T.abort();b=\"abort\";for(l in{success:1,error:1,complete:1})T[l](c[l]);if(n=ln(on,c,t,T)){T.readyState=1,u&&f.trigger(\"ajaxSend\",[T,c]),c.async&&c.timeout>0&&(s=setTimeout(function(){T.abort(\"timeout\")},c.timeout));try{v=1,n.send(m,k)}catch(C){if(!(2>v))throw C;k(-1,C)}}else k(-1,\"No Transport\");function k(e,t,o,a){var l,m,y,b,w,C=t;2!==v&&(v=2,s&&clearTimeout(s),n=undefined,i=a||\"\",T.readyState=e>0?4:0,l=e>=200&&300>e||304===e,o&&(b=pn(c,T,o)),b=fn(c,b,T,l),l?(c.ifModified&&(w=T.getResponseHeader(\"Last-Modified\"),w&&(x.lastModified[r]=w),w=T.getResponseHeader(\"etag\"),w&&(x.etag[r]=w)),204===e||\"HEAD\"===c.type?C=\"nocontent\":304===e?C=\"notmodified\":(C=b.state,m=b.data,y=b.error,l=!y)):(y=C,(e||!C)&&(C=\"error\",0>e&&(e=0))),T.status=e,T.statusText=(t||C)+\"\",l?h.resolveWith(p,[m,C,T]):h.rejectWith(p,[T,C,y]),T.statusCode(g),g=undefined,u&&f.trigger(l?\"ajaxSuccess\":\"ajaxError\",[T,c,l?m:y]),d.fireWith(p,[T,C]),u&&(f.trigger(\"ajaxComplete\",[T,c]),--x.active||x.event.trigger(\"ajaxStop\")))}return T},getJSON:function(e,t,n){return x.get(e,t,n,\"json\")},getScript:function(e,t){return x.get(e,undefined,t,\"script\")}}),x.each([\"get\",\"post\"],function(e,t){x[t]=function(e,n,r,i){return x.isFunction(n)&&(i=i||r,r=n,n=undefined),x.ajax({url:e,type:t,dataType:i,data:n,success:r})}});function pn(e,t,n){var r,i,o,s,a=e.contents,u=e.dataTypes;while(\"*\"===u[0])u.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+\" \"+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):undefined}function fn(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if(\"*\"===o)o=u;else if(\"*\"!==u&&u!==o){if(s=l[u+\" \"+o]||l[\"* \"+o],!s)for(i in l)if(a=i.split(\" \"),a[1]===o&&(s=l[u+\" \"+a[0]]||l[\"* \"+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e[\"throws\"])t=s(t);else try{t=s(t)}catch(p){return{state:\"parsererror\",error:s?p:\"No conversion from \"+u+\" to \"+o}}}return{state:\"success\",data:t}}x.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter(\"script\",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")}),x.ajaxTransport(\"script\",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=x(\"<script>\").prop({async:!0,charset:e.scriptCharset,src:e.url}).on(\"load error\",n=function(e){t.remove(),n=null,e&&i(\"error\"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}});var hn=[],dn=/(=)\\?(?=&|$)|\\?\\?/;x.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=hn.pop()||x.expando+\"_\"+Yt++;return this[e]=!0,e}}),x.ajaxPrefilter(\"json jsonp\",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(dn.test(t.url)?\"url\":\"string\"==typeof t.data&&!(t.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&dn.test(t.data)&&\"data\");return a||\"jsonp\"===t.dataTypes[0]?(i=t.jsonpCallback=x.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,\"$1\"+i):t.jsonp!==!1&&(t.url+=(Vt.test(t.url)?\"&\":\"?\")+t.jsonp+\"=\"+i),t.converters[\"script json\"]=function(){return s||x.error(i+\" was not called\"),s[0]},t.dataTypes[0]=\"json\",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,hn.push(i)),s&&x.isFunction(o)&&o(s[0]),s=o=undefined}),\"script\"):undefined}),x.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var gn=x.ajaxSettings.xhr(),mn={0:200,1223:204},yn=0,vn={};e.ActiveXObject&&x(e).on(\"unload\",function(){for(var e in vn)vn[e]();vn=undefined}),x.support.cors=!!gn&&\"withCredentials\"in gn,x.support.ajax=gn=!!gn,x.ajaxTransport(function(e){var t;return x.support.cors||gn&&!e.crossDomain?{send:function(n,r){var i,o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n[\"X-Requested-With\"]||(n[\"X-Requested-With\"]=\"XMLHttpRequest\");for(i in n)s.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete vn[o],t=s.onload=s.onerror=null,\"abort\"===e?s.abort():\"error\"===e?r(s.status||404,s.statusText):r(mn[s.status]||s.status,s.statusText,\"string\"==typeof s.responseText?{text:s.responseText}:undefined,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t(\"error\"),t=vn[o=yn++]=t(\"abort\"),s.send(e.hasContent&&e.data||null)},abort:function(){t&&t()}}:undefined});var xn,bn,wn=/^(?:toggle|show|hide)$/,Tn=RegExp(\"^(?:([+-])=|)(\"+b+\")([a-z%]*)$\",\"i\"),Cn=/queueHooks$/,kn=[An],Nn={\"*\":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tn.exec(t),o=i&&i[3]||(x.cssNumber[e]?\"\":\"px\"),s=(x.cssNumber[e]||\"px\"!==o&&+r)&&Tn.exec(x.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||\".5\",s/=a,x.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};function En(){return setTimeout(function(){xn=undefined}),xn=x.now()}function Sn(e,t,n){var r,i=(Nn[t]||[]).concat(Nn[\"*\"]),o=0,s=i.length;for(;s>o;o++)if(r=i[o].call(n,t,e))return r}function jn(e,t,n){var r,i,o=0,s=kn.length,a=x.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=xn||En(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;for(;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:xn||En(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(Dn(c,l.opts.specialEasing);s>o;o++)if(r=kn[o].call(l,e,c,l.opts))return r;return x.map(c,Sn,l),x.isFunction(l.opts.start)&&l.opts.start.call(e,l),x.fx.timer(x.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function Dn(e,t){var n,r,i,o,s;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=x.cssHooks[r],s&&\"expand\"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(jn,{tweener:function(e,t){x.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Nn[n]=Nn[n]||[],Nn[n].unshift(t)},prefilter:function(e,t){t?kn.unshift(e):kn.push(e)}});function An(e,t,n){var r,i,o,s,a,u,l=this,c={},p=e.style,f=e.nodeType&&Lt(e),h=q.get(e,\"fxshow\");n.queue||(a=x._queueHooks(e,\"fx\"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,l.always(function(){l.always(function(){a.unqueued--,x.queue(e,\"fx\").length||a.empty.fire()})})),1===e.nodeType&&(\"height\"in t||\"width\"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],\"inline\"===x.css(e,\"display\")&&\"none\"===x.css(e,\"float\")&&(p.display=\"inline-block\")),n.overflow&&(p.overflow=\"hidden\",l.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wn.exec(i)){if(delete t[r],o=o||\"toggle\"===i,i===(f?\"hide\":\"show\")){if(\"show\"!==i||!h||h[r]===undefined)continue;f=!0}c[r]=h&&h[r]||x.style(e,r)}if(!x.isEmptyObject(c)){h?\"hidden\"in h&&(f=h.hidden):h=q.access(e,\"fxshow\",{}),o&&(h.hidden=!f),f?x(e).show():l.done(function(){x(e).hide()}),l.done(function(){var t;q.remove(e,\"fxshow\");for(t in c)x.style(e,t,c[t])});for(r in c)s=Sn(f?h[r]:0,r,l),r in h||(h[r]=s.start,f&&(s.end=s.start,s.start=\"width\"===r||\"height\"===r?1:0))}}function Ln(e,t,n,r,i){return new Ln.prototype.init(e,t,n,r,i)}x.Tween=Ln,Ln.prototype={constructor:Ln,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?\"\":\"px\")},cur:function(){var e=Ln.propHooks[this.prop];return e&&e.get?e.get(this):Ln.propHooks._default.get(this)},run:function(e){var t,n=Ln.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ln.propHooks._default.set(this),this}},Ln.prototype.init.prototype=Ln.prototype,Ln.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,\"\"),t&&\"auto\"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Ln.propHooks.scrollTop=Ln.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(qn(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Lt).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),s=function(){var t=jn(this,x.extend({},e),o);(i||q.get(this,\"finish\"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return\"string\"!=typeof e&&(n=t,t=e,e=undefined),t&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,i=null!=e&&e+\"queueHooks\",o=x.timers,s=q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Cn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||\"fx\"),this.each(function(){var t,n=q.get(this),r=n[e+\"queue\"],i=n[e+\"queueHooks\"],o=x.timers,s=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function qn(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:qn(\"show\"),slideUp:qn(\"hide\"),slideToggle:qn(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&\"object\"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:\"number\"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=Ln.prototype.init,x.fx.tick=function(){var e,t=x.timers,n=0;for(xn=x.now();t.length>n;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||x.fx.stop(),xn=undefined},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){bn||(bn=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(bn),bn=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,x.contains(t,i)?(typeof i.getBoundingClientRect!==r&&(o=i.getBoundingClientRect()),n=Hn(s),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},x.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=x.css(e,\"position\"),p=x(e),f={};\"static\"===c&&(e.style.position=\"relative\"),a=p.offset(),o=x.css(e,\"top\"),u=x.css(e,\"left\"),l=(\"absolute\"===c||\"fixed\"===c)&&(o+u).indexOf(\"auto\")>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),x.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),\"using\"in t?t.using.call(e,f):p.css(f)}},x.fn.extend({position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return\"fixed\"===x.css(n,\"position\")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],\"html\")||(r=e.offset()),r.top+=x.css(e[0],\"borderTopWidth\",!0),r.left+=x.css(e[0],\"borderLeftWidth\",!0)),{top:t.top-r.top-x.css(n,\"marginTop\",!0),left:t.left-r.left-x.css(n,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,\"html\")&&\"static\"===x.css(e,\"position\"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,n){var r=\"pageYOffset\"===n;x.fn[t]=function(i){return x.access(this,function(t,i,o){var s=Hn(t);return o===undefined?s?s[n]:t[i]:(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o,undefined)},t,i,arguments.length,null)}});function Hn(e){return x.isWindow(e)?e:9===e.nodeType&&e.defaultView}x.each({Height:\"height\",Width:\"width\"},function(e,t){x.each({padding:\"inner\"+e,content:t,\"\":\"outer\"+e},function(n,r){x.fn[r]=function(r,i){var o=arguments.length&&(n||\"boolean\"!=typeof r),s=n||(r===!0||i===!0?\"margin\":\"border\");return x.access(this,function(t,n,r){var i;return x.isWindow(t)?t.document.documentElement[\"client\"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body[\"scroll\"+e],i[\"scroll\"+e],t.body[\"offset\"+e],i[\"offset\"+e],i[\"client\"+e])):r===undefined?x.css(t,n,s):x.style(t,n,r,s)},t,o?r:undefined,o,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,\"object\"==typeof module&&module&&\"object\"==typeof module.exports?module.exports=x:\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return x}),\"object\"==typeof e&&\"object\"==typeof e.document&&(e.jQuery=e.$=x)})(window);\n","\n/**\n * @license\n * Lo-Dash 1.3.1 (Custom Build) lodash.com/license\n * Build: `lodash underscore exports=\"amd,commonjs,global,node\" -o ./dist/lodash.underscore.js`\n * Underscore.js 1.4.4 underscorejs.org/LICENSE\n */\n;!function(n){function t(n,t){var r;if(n&&gt[typeof n])for(r in n)if(Et.call(n,r)&&t(n[r],r,n)===nt)break}function r(n,t){var r;if(n&&gt[typeof n])for(r in n)if(t(n[r],r,n)===nt)break}function e(n){var t,r=[];if(!n||!gt[typeof n])return r;for(t in n)Et.call(n,t)&&r.push(t);return r}function u(n,t,r){r=(r||0)-1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function o(n,t){var r=n.m,e=t.m;if(n=n.l,t=t.l,n!==t){if(n>t||typeof n==\"undefined\")return 1;if(n<t||typeof t==\"undefined\")return-1}return r<e?-1:1\n}function i(n){return\"\\\\\"+ht[n]}function a(){}function f(n){return n instanceof f?n:new c(n)}function c(n){this.__wrapped__=n}function l(n,t,r){function e(){var f=arguments,c=o?this:t;return u||(n=t[i]),r.length&&(f=f.length?(f=zt.call(f),a?f.concat(r):r.concat(f)):r),this instanceof e?(c=p(n.prototype),f=n.apply(c,f),A(f)?f:c):n.apply(c,f)}var u=w(n),o=!r,i=t;if(o){var a=void 0;r=t}else if(!u)throw new TypeError;return e}function p(n){return A(n)?Ft(n):{}}function s(n){return Wt[n]}function v(){var n=(n=f.indexOf)===U?u:n;\nreturn n}function g(n){return Gt[n]}function h(n){return kt.call(n)==it}function y(n){if(!n)return n;for(var t=1,r=arguments.length;t<r;t++){var e=arguments[t];if(e)for(var u in e)n[u]=e[u]}return n}function m(n){if(!n)return n;for(var t=1,r=arguments.length;t<r;t++){var e=arguments[t];if(e)for(var u in e)n[u]==X&&(n[u]=e[u])}return n}function _(n){var t=[];return r(n,function(n,r){w(n)&&t.push(r)}),t.sort()}function d(n){for(var t=-1,r=Vt(n),e=r.length,u={};++t<e;){var o=r[t];u[n[o]]=o}return u}function b(n){if(!n)return Q;\nif(Ut(n)||O(n))return!n.length;for(var t in n)if(Et.call(n,t))return Y;return Q}function j(n,t,e,u){if(n===t)return 0!==n||1/n==1/t;var o=typeof n,i=typeof t;if(n===n&&(!n||\"function\"!=o&&\"object\"!=o)&&(!t||\"function\"!=i&&\"object\"!=i))return Y;if(n==X||t==X)return n===t;if(i=kt.call(n),o=kt.call(t),i!=o)return Y;switch(i){case ft:case ct:return+n==+t;case lt:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case st:case vt:return n==t+\"\"}if(o=i==at,!o){if(n instanceof f||t instanceof f)return j(n.__wrapped__||n,t.__wrapped__||t,e,u);\nif(i!=pt)return Y;var i=n.constructor,a=t.constructor;if(i!=a&&(!w(i)||!(i instanceof i&&w(a)&&a instanceof a)))return Y}for(e||(e=[]),u||(u=[]),i=e.length;i--;)if(e[i]==n)return u[i]==t;var c=Q,l=0;if(e.push(n),u.push(t),o){if(l=t.length,c=l==n.length)for(;l--&&(c=j(n[l],t[l],e,u)););return c}return r(t,function(t,r,o){return Et.call(o,r)?(l++,!(c=Et.call(n,r)&&j(n[r],t,e,u))&&nt):void 0}),c&&r(n,function(n,t,r){return Et.call(r,t)?!(c=-1<--l)&&nt:void 0}),c}function w(n){return typeof n==\"function\"\n}function A(n){return!(!n||!gt[typeof n])}function x(n){return typeof n==\"number\"||kt.call(n)==lt}function O(n){return typeof n==\"string\"||kt.call(n)==vt}function E(n){for(var t=-1,r=Vt(n),e=r.length,u=Array(e);++t<e;)u[t]=n[r[t]];return u}function S(n,r){var e=v(),u=n?n.length:0,o=Y;return u&&typeof u==\"number\"?o=-1<e(n,r):t(n,function(n){return(o=n===r)&&nt}),o}function N(n,r,e){var u=Q;r=J(r,e),e=-1;var o=n?n.length:0;if(typeof o==\"number\")for(;++e<o&&(u=!!r(n[e],e,n)););else t(n,function(n,t,e){return!(u=!!r(n,t,e))&&nt\n});return u}function k(n,r,e){var u=[];r=J(r,e),e=-1;var o=n?n.length:0;if(typeof o==\"number\")for(;++e<o;){var i=n[e];r(i,e,n)&&u.push(i)}else t(n,function(n,t,e){r(n,t,e)&&u.push(n)});return u}function B(n,r,e){r=J(r,e),e=-1;var u=n?n.length:0;if(typeof u!=\"number\"){var o;return t(n,function(n,t,e){return r(n,t,e)?(o=n,nt):void 0}),o}for(;++e<u;){var i=n[e];if(r(i,e,n))return i}}function F(n,r,e){var u=-1,o=n?n.length:0;if(r=r&&typeof e==\"undefined\"?r:J(r,e),typeof o==\"number\")for(;++u<o&&r(n[u],u,n)!==nt;);else t(n,r)\n}function q(n,r,e){var u=-1,o=n?n.length:0;if(r=J(r,e),typeof o==\"number\")for(var i=Array(o);++u<o;)i[u]=r(n[u],u,n);else i=[],t(n,function(n,t,e){i[++u]=r(n,t,e)});return i}function R(n,t,r){var e=-1/0,u=e,o=-1,i=n?n.length:0;if(t||typeof i!=\"number\")t=J(t,r),F(n,function(n,r,o){r=t(n,r,o),r>e&&(e=r,u=n)});else for(;++o<i;)r=n[o],r>u&&(u=r);return u}function D(n,t){var r=-1,e=n?n.length:0;if(typeof e==\"number\")for(var u=Array(e);++r<e;)u[r]=n[r][t];return u||q(n,t)}function M(n,r,e,u){if(!n)return e;\nvar o=3>arguments.length;r=J(r,u,4);var i=-1,a=n.length;if(typeof a==\"number\")for(o&&(e=n[++i]);++i<a;)e=r(e,n[i],i,n);else t(n,function(n,t,u){e=o?(o=Y,n):r(e,n,t,u)});return e}function T(n,t,r,e){var u=n?n.length:0,o=3>arguments.length;if(typeof u!=\"number\")var i=Vt(n),u=i.length;return t=J(t,e,4),F(n,function(e,a,f){a=i?i[--u]:--u,r=o?(o=Y,n[a]):t(r,n[a],a,f)}),r}function $(n,r,e){var u;r=J(r,e),e=-1;var o=n?n.length:0;if(typeof o==\"number\")for(;++e<o&&!(u=r(n[e],e,n)););else t(n,function(n,t,e){return(u=r(n,t,e))&&nt\n});return!!u}function I(n,t,r){return r&&b(t)?X:(r?B:k)(n,t)}function z(n){for(var t=-1,r=v(),e=n.length,u=xt.apply(dt,zt.call(arguments,1)),o=[];++t<e;){var i=n[t];0>r(u,i)&&o.push(i)}return o}function C(n,t,r){if(n){var e=0,u=n.length;if(typeof t!=\"number\"&&t!=X){var o=-1;for(t=J(t,r);++o<u&&t(n[o],o,n);)e++}else if(e=t,e==X||r)return n[0];return zt.call(n,0,$t(Tt(0,e),u))}}function P(n,t){for(var r=-1,e=n?n.length:0,u=[];++r<e;){var o=n[r];Ut(o)?St.apply(u,t?o:P(o)):u.push(o)}return u}function U(n,t,r){if(typeof r==\"number\"){var e=n?n.length:0;\nr=0>r?Tt(0,e+r):r||0}else if(r)return r=W(n,t),n[r]===t?r:-1;return n?u(n,t,r):-1}function V(n,t,r){if(typeof t!=\"number\"&&t!=X){var e=0,u=-1,o=n?n.length:0;for(t=J(t,r);++u<o&&t(n[u],u,n);)e++}else e=t==X||r?1:Tt(0,t);return zt.call(n,e)}function W(n,t,r,e){var u=0,o=n?n.length:u;for(r=r?J(r,e,1):K,t=r(t);u<o;)e=u+o>>>1,r(n[e])<t?u=e+1:o=e;return u}function G(n,t,r,e){var u=-1,o=v(),i=n?n.length:0,a=[],f=a;for(typeof t!=\"boolean\"&&t!=X&&(e=r,r=t,t=Y),r!=X&&(f=[],r=J(r,e));++u<i;){e=n[u];var c=r?r(e,u,n):e;\n(t?!u||f[f.length-1]!==c:0>o(f,c))&&(r&&f.push(c),a.push(e))}return a}function H(n,t){return Pt.fastBind||Bt&&2<arguments.length?Bt.call.apply(Bt,arguments):l(n,t,zt.call(arguments,2))}function J(n,t,r){if(n==X)return K;var e=typeof n;if(\"function\"!=e){if(\"object\"!=e)return function(t){return t[n]};var u=Vt(n);return function(t){for(var r=u.length,e=Y;r--&&(e=t[u[r]]===n[u[r]]););return e}}return typeof t==\"undefined\"?n:1===r?function(r){return n.call(t,r)}:2===r?function(r,e){return n.call(t,r,e)\n}:4===r?function(r,e,u,o){return n.call(t,r,e,u,o)}:function(r,e,u){return n.call(t,r,e,u)}}function K(n){return n}function L(n){F(_(n),function(t){var r=f[t]=n[t];f.prototype[t]=function(){var n=[this.__wrapped__];return St.apply(n,arguments),n=r.apply(f,n),this.__chain__&&(n=new c(n),n.__chain__=Q),n}})}var Q=!0,X=null,Y=!1,Z=0,nt={},tt=+new Date+\"\",rt=/&(?:amp|lt|gt|quot|#39);/g,et=/($^)/,ut=/[&<>\"']/g,ot=/['\\n\\r\\t\\u2028\\u2029\\\\]/g,it=\"[object Arguments]\",at=\"[object Array]\",ft=\"[object Boolean]\",ct=\"[object Date]\",lt=\"[object Number]\",pt=\"[object Object]\",st=\"[object RegExp]\",vt=\"[object String]\",gt={\"boolean\":Y,\"function\":Q,object:Q,number:Y,string:Y,undefined:Y},ht={\"\\\\\":\"\\\\\",\"'\":\"'\",\"\\n\":\"n\",\"\\r\":\"r\",\"\\t\":\"t\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},yt=gt[typeof exports]&&exports,mt=gt[typeof module]&&module&&module.exports==yt&&module,_t=gt[typeof global]&&global;\n!_t||_t.global!==_t&&_t.window!==_t||(n=_t);var dt=[],_t=Object.prototype,bt=n._,jt=RegExp(\"^\"+(_t.valueOf+\"\").replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\").replace(/valueOf|for [^\\]]+/g,\".+?\")+\"$\"),wt=Math.ceil,At=n.clearTimeout,xt=dt.concat,Ot=Math.floor,Et=_t.hasOwnProperty,St=dt.push,Nt=n.setTimeout,kt=_t.toString,Bt=jt.test(Bt=kt.bind)&&Bt,Ft=jt.test(Ft=Object.create)&&Ft,qt=jt.test(qt=Array.isArray)&&qt,Rt=n.isFinite,Dt=n.isNaN,Mt=jt.test(Mt=Object.keys)&&Mt,Tt=Math.max,$t=Math.min,It=Math.random,zt=dt.slice,_t=jt.test(n.attachEvent),Ct=Bt&&!/\\n|true/.test(Bt+_t);\nc.prototype=f.prototype;var Pt={};!function(){var n={0:1,length:1};Pt.fastBind=Bt&&!Ct,Pt.spliceObjects=(dt.splice.call(n,0,1),!n[0])}(1),f.templateSettings={escape:/<%-([\\s\\S]+?)%>/g,evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,variable:\"\"},Ft||(p=function(n){if(A(n)){a.prototype=n;var t=new a;a.prototype=X}return t||{}}),h(arguments)||(h=function(n){return n?Et.call(n,\"callee\"):Y});var Ut=qt||function(n){return n?typeof n==\"object\"&&kt.call(n)==at:Y},Vt=Mt?function(n){return A(n)?Mt(n):[]\n}:e,Wt={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},Gt=d(Wt);w(/x/)&&(w=function(n){return typeof n==\"function\"&&\"[object Function]\"==kt.call(n)}),f.after=function(n,t){return 1>n?t():function(){return 1>--n?t.apply(this,arguments):void 0}},f.bind=H,f.bindAll=function(n){for(var t=1<arguments.length?xt.apply(dt,zt.call(arguments,1)):_(n),r=-1,e=t.length;++r<e;){var u=t[r];n[u]=H(n[u],n)}return n},f.compact=function(n){for(var t=-1,r=n?n.length:0,e=[];++t<r;){var u=n[t];u&&e.push(u)\n}return e},f.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length;r--;)t=[n[r].apply(this,t)];return t[0]}},f.countBy=function(n,t,r){var e={};return t=J(t,r),F(n,function(n,r,u){r=t(n,r,u)+\"\",Et.call(e,r)?e[r]++:e[r]=1}),e},f.debounce=function(n,t,r){function e(){a=X,r||(o=n.apply(i,u))}var u,o,i,a=X;return function(){var f=r&&!a;return u=arguments,i=this,At(a),a=Nt(e,t),f&&(o=n.apply(i,u)),o}},f.defaults=m,f.defer=function(n){var t=zt.call(arguments,1);return Nt(function(){n.apply(void 0,t)\n},1)},f.delay=function(n,t){var r=zt.call(arguments,2);return Nt(function(){n.apply(void 0,r)},t)},f.difference=z,f.filter=k,f.flatten=P,f.forEach=F,f.functions=_,f.groupBy=function(n,t,r){var e={};return t=J(t,r),F(n,function(n,r,u){r=t(n,r,u)+\"\",(Et.call(e,r)?e[r]:e[r]=[]).push(n)}),e},f.initial=function(n,t,r){if(!n)return[];var e=0,u=n.length;if(typeof t!=\"number\"&&t!=X){var o=u;for(t=J(t,r);o--&&t(n[o],o,n);)e++}else e=t==X||r?1:t||e;return zt.call(n,0,$t(Tt(0,u-e),u))},f.intersection=function(n){var t=arguments,r=t.length,e=-1,u=v(),o=n?n.length:0,i=[];\nn:for(;++e<o;){var a=n[e];if(0>u(i,a)){for(var f=r;--f;)if(0>u(t[f],a))continue n;i.push(a)}}return i},f.invert=d,f.invoke=function(n,t){var r=zt.call(arguments,2),e=-1,u=typeof t==\"function\",o=n?n.length:0,i=Array(typeof o==\"number\"?o:0);return F(n,function(n){i[++e]=(u?t:n[t]).apply(n,r)}),i},f.keys=Vt,f.map=q,f.max=R,f.memoize=function(n,t){var r={};return function(){var e=tt+(t?t.apply(this,arguments):arguments[0]);return Et.call(r,e)?r[e]:r[e]=n.apply(this,arguments)}},f.min=function(n,t,r){var e=1/0,u=e,o=-1,i=n?n.length:0;\nif(t||typeof i!=\"number\")t=J(t,r),F(n,function(n,r,o){r=t(n,r,o),r<e&&(e=r,u=n)});else for(;++o<i;)r=n[o],r<u&&(u=r);return u},f.omit=function(n){var t=v(),e=xt.apply(dt,zt.call(arguments,1)),u={};return r(n,function(n,r){0>t(e,r)&&(u[r]=n)}),u},f.once=function(n){var t,r;return function(){return t?r:(t=Q,r=n.apply(this,arguments),n=X,r)}},f.pairs=function(n){for(var t=-1,r=Vt(n),e=r.length,u=Array(e);++t<e;){var o=r[t];u[t]=[o,n[o]]}return u},f.partial=function(n){return l(n,zt.call(arguments,1))\n},f.pick=function(n){for(var t=-1,r=xt.apply(dt,zt.call(arguments,1)),e=r.length,u={};++t<e;){var o=r[t];o in n&&(u[o]=n[o])}return u},f.pluck=D,f.range=function(n,t,r){n=+n||0,r=+r||1,t==X&&(t=n,n=0);var e=-1;t=Tt(0,wt((t-n)/r));for(var u=Array(t);++e<t;)u[e]=n,n+=r;return u},f.reject=function(n,t,r){return t=J(t,r),k(n,function(n,r,e){return!t(n,r,e)})},f.rest=V,f.shuffle=function(n){var t=-1,r=n?n.length:0,e=Array(typeof r==\"number\"?r:0);return F(n,function(n){var r=Ot(It()*(++t+1));e[t]=e[r],e[r]=n\n}),e},f.sortBy=function(n,t,r){var e=-1,u=n?n.length:0,i=Array(typeof u==\"number\"?u:0);for(t=J(t,r),F(n,function(n,r,u){i[++e]={l:t(n,r,u),m:e,n:n}}),u=i.length,i.sort(o);u--;)i[u]=i[u].n;return i},f.tap=function(n,t){return t(n),n},f.throttle=function(n,t){function r(){i=new Date,a=X,u=n.apply(o,e)}var e,u,o,i=0,a=X;return function(){var f=new Date,c=t-(f-i);return e=arguments,o=this,0<c?a||(a=Nt(r,c)):(At(a),a=X,i=f,u=n.apply(o,e)),u}},f.times=function(n,t,r){for(var e=-1,u=Array(-1<n?n:0);++e<n;)u[e]=t.call(r,e);\nreturn u},f.toArray=function(n){return Ut(n)?zt.call(n):n&&typeof n.length==\"number\"?q(n):E(n)},f.union=function(n){return Ut(n)||(arguments[0]=n?zt.call(n):dt),G(xt.apply(dt,arguments))},f.uniq=G,f.values=E,f.where=I,f.without=function(n){return z(n,zt.call(arguments,1))},f.wrap=function(n,t){return function(){var r=[n];return St.apply(r,arguments),t.apply(this,r)}},f.zip=function(n){for(var t=-1,r=n?R(D(arguments,\"length\")):0,e=Array(0>r?0:r);++t<r;)e[t]=D(arguments,t);return e},f.collect=q,f.drop=V,f.each=F,f.extend=y,f.methods=_,f.object=function(n,t){for(var r=-1,e=n?n.length:0,u={};++r<e;){var o=n[r];\nt?u[o]=t[r]:u[o[0]]=o[1]}return u},f.select=k,f.tail=V,f.unique=G,f.chain=function(n){return n=new c(n),n.__chain__=Q,n},f.clone=function(n){return A(n)?Ut(n)?zt.call(n):y({},n):n},f.contains=S,f.escape=function(n){return n==X?\"\":(n+\"\").replace(ut,s)},f.every=N,f.find=B,f.has=function(n,t){return n?Et.call(n,t):Y},f.identity=K,f.indexOf=U,f.isArguments=h,f.isArray=Ut,f.isBoolean=function(n){return n===Q||n===Y||kt.call(n)==ft},f.isDate=function(n){return n?typeof n==\"object\"&&kt.call(n)==ct:Y},f.isElement=function(n){return n?1===n.nodeType:Y\n},f.isEmpty=b,f.isEqual=j,f.isFinite=function(n){return Rt(n)&&!Dt(parseFloat(n))},f.isFunction=w,f.isNaN=function(n){return x(n)&&n!=+n},f.isNull=function(n){return n===X},f.isNumber=x,f.isObject=A,f.isRegExp=function(n){return!(!n||!gt[typeof n])&&kt.call(n)==st},f.isString=O,f.isUndefined=function(n){return typeof n==\"undefined\"},f.lastIndexOf=function(n,t,r){var e=n?n.length:0;for(typeof r==\"number\"&&(e=(0>r?Tt(0,e+r):$t(r,e-1))+1);e--;)if(n[e]===t)return e;return-1},f.mixin=L,f.noConflict=function(){return n._=bt,this\n},f.random=function(n,t){n==X&&t==X&&(t=1),n=+n||0,t==X?(t=n,n=0):t=+t||0;var r=It();return n%1||t%1?n+$t(r*(t-n+parseFloat(\"1e-\"+((r+\"\").length-1))),t):n+Ot(r*(t-n+1))},f.reduce=M,f.reduceRight=T,f.result=function(n,t){var r=n?n[t]:X;return w(r)?n[t]():r},f.size=function(n){var t=n?n.length:0;return typeof t==\"number\"?t:Vt(n).length},f.some=$,f.sortedIndex=W,f.template=function(n,t,r){var e=f.templateSettings;n||(n=\"\"),r=m({},r,e);var u=0,o=\"__p+='\",e=r.variable;n.replace(RegExp((r.escape||et).source+\"|\"+(r.interpolate||et).source+\"|\"+(r.evaluate||et).source+\"|$\",\"g\"),function(t,r,e,a,f){return o+=n.slice(u,f).replace(ot,i),r&&(o+=\"'+_['escape'](\"+r+\")+'\"),a&&(o+=\"';\"+a+\";__p+='\"),e&&(o+=\"'+((__t=(\"+e+\"))==null?'':__t)+'\"),u=f+t.length,t\n}),o+=\"';\\n\",e||(e=\"obj\",o=\"with(\"+e+\"||{}){\"+o+\"}\"),o=\"function(\"+e+\"){var __t,__p='',__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}\"+o+\"return __p}\";try{var a=Function(\"_\",\"return \"+o)(f)}catch(c){throw c.source=o,c}return t?a(t):(a.source=o,a)},f.unescape=function(n){return n==X?\"\":(n+\"\").replace(rt,g)},f.uniqueId=function(n){var t=++Z+\"\";return n?n+t:t},f.all=N,f.any=$,f.detect=B,f.findWhere=function(n,t){return I(n,t,Q)},f.foldl=M,f.foldr=T,f.include=S,f.inject=M,f.first=C,f.last=function(n,t,r){if(n){var e=0,u=n.length;\nif(typeof t!=\"number\"&&t!=X){var o=u;for(t=J(t,r);o--&&t(n[o],o,n);)e++}else if(e=t,e==X||r)return n[u-1];return zt.call(n,Tt(0,u-e))}},f.take=C,f.head=C,f.VERSION=\"1.3.1\",L(f),f.prototype.chain=function(){return this.__chain__=Q,this},f.prototype.value=function(){return this.__wrapped__},F(\"pop push reverse shift sort splice unshift\".split(\" \"),function(n){var t=dt[n];f.prototype[n]=function(){var n=this.__wrapped__;return t.apply(n,arguments),!Pt.spliceObjects&&0===n.length&&delete n[0],this}}),F([\"concat\",\"join\",\"slice\"],function(n){var t=dt[n];\nf.prototype[n]=function(){var n=t.apply(this.__wrapped__,arguments);return this.__chain__&&(n=new c(n),n.__chain__=Q),n}}),typeof define==\"function\"&&typeof define.amd==\"object\"&&define.amd?(n._=f, define('underscore',[],function(){return f})):yt&&!yt.nodeType?mt?(mt.exports=f)._=f:yt._=f:n._=f}(this);","\n(function(){var t=this;var e=t.Backbone;var i=[];var r=i.push;var s=i.slice;var n=i.splice;var a;if(typeof exports!==\"undefined\"){a=exports}else{a=t.Backbone={}}a.VERSION=\"1.1.0\";var h=t._;if(!h&&typeof require!==\"undefined\")h=require(\"underscore\");a.$=t.jQuery||t.Zepto||t.ender||t.$;a.noConflict=function(){t.Backbone=e;return this};a.emulateHTTP=false;a.emulateJSON=false;var o=a.Events={on:function(t,e,i){if(!l(this,\"on\",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,i){if(!l(this,\"once\",t,[e,i])||!e)return this;var r=this;var s=h.once(function(){r.off(t,s);e.apply(this,arguments)});s._callback=e;return this.on(t,s,i)},off:function(t,e,i){var r,s,n,a,o,u,c,f;if(!this._events||!l(this,\"off\",t,[e,i]))return this;if(!t&&!e&&!i){this._events={};return this}a=t?[t]:h.keys(this._events);for(o=0,u=a.length;o<u;o++){t=a[o];if(n=this._events[t]){this._events[t]=r=[];if(e||i){for(c=0,f=n.length;c<f;c++){s=n[c];if(e&&e!==s.callback&&e!==s.callback._callback||i&&i!==s.context){r.push(s)}}}if(!r.length)delete this._events[t]}}return this},trigger:function(t){if(!this._events)return this;var e=s.call(arguments,1);if(!l(this,\"trigger\",t,e))return this;var i=this._events[t];var r=this._events.all;if(i)c(i,e);if(r)c(r,arguments);return this},stopListening:function(t,e,i){var r=this._listeningTo;if(!r)return this;var s=!e&&!i;if(!i&&typeof e===\"object\")i=this;if(t)(r={})[t._listenId]=t;for(var n in r){t=r[n];t.off(e,i,this);if(s||h.isEmpty(t._events))delete this._listeningTo[n]}return this}};var u=/\\s+/;var l=function(t,e,i,r){if(!i)return true;if(typeof i===\"object\"){for(var s in i){t[e].apply(t,[s,i[s]].concat(r))}return false}if(u.test(i)){var n=i.split(u);for(var a=0,h=n.length;a<h;a++){t[e].apply(t,[n[a]].concat(r))}return false}return true};var c=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],h=e[2];switch(e.length){case 0:while(++r<s)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<s)(i=t[r]).callback.call(i.ctx,n);return;case 2:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a,h);return;default:while(++r<s)(i=t[r]).callback.apply(i.ctx,e)}};var f={listenTo:\"on\",listenToOnce:\"once\"};h.each(f,function(t,e){o[e]=function(e,i,r){var s=this._listeningTo||(this._listeningTo={});var n=e._listenId||(e._listenId=h.uniqueId(\"l\"));s[n]=e;if(!r&&typeof i===\"object\")r=this;e[t](i,r,this);return this}});o.bind=o.on;o.unbind=o.off;h.extend(a,o);var d=a.Model=function(t,e){var i=t||{};e||(e={});this.cid=h.uniqueId(\"c\");this.attributes={};if(e.collection)this.collection=e.collection;if(e.parse)i=this.parse(i,e)||{};i=h.defaults({},i,h.result(this,\"defaults\"));this.set(i,e);this.changed={};this.initialize.apply(this,arguments)};h.extend(d.prototype,o,{changed:null,validationError:null,idAttribute:\"id\",initialize:function(){},toJSON:function(t){return h.clone(this.attributes)},sync:function(){return a.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return h.escape(this.get(t))},has:function(t){return this.get(t)!=null},set:function(t,e,i){var r,s,n,a,o,u,l,c;if(t==null)return this;if(typeof t===\"object\"){s=t;i=e}else{(s={})[t]=e}i||(i={});if(!this._validate(s,i))return false;n=i.unset;o=i.silent;a=[];u=this._changing;this._changing=true;if(!u){this._previousAttributes=h.clone(this.attributes);this.changed={}}c=this.attributes,l=this._previousAttributes;if(this.idAttribute in s)this.id=s[this.idAttribute];for(r in s){e=s[r];if(!h.isEqual(c[r],e))a.push(r);if(!h.isEqual(l[r],e)){this.changed[r]=e}else{delete this.changed[r]}n?delete c[r]:c[r]=e}if(!o){if(a.length)this._pending=true;for(var f=0,d=a.length;f<d;f++){this.trigger(\"change:\"+a[f],this,c[a[f]],i)}}if(u)return this;if(!o){while(this._pending){this._pending=false;this.trigger(\"change\",this,i)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,h.extend({},e,{unset:true}))},clear:function(t){var e={};for(var i in this.attributes)e[i]=void 0;return this.set(e,h.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!h.isEmpty(this.changed);return h.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?h.clone(this.changed):false;var e,i=false;var r=this._changing?this._previousAttributes:this.attributes;for(var s in t){if(h.isEqual(r[s],e=t[s]))continue;(i||(i={}))[s]=e}return i},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return h.clone(this._previousAttributes)},fetch:function(t){t=t?h.clone(t):{};if(t.parse===void 0)t.parse=true;var e=this;var i=t.success;t.success=function(r){if(!e.set(e.parse(r,t),t))return false;if(i)i(e,r,t);e.trigger(\"sync\",e,r,t)};M(this,t);return this.sync(\"read\",this,t)},save:function(t,e,i){var r,s,n,a=this.attributes;if(t==null||typeof t===\"object\"){r=t;i=e}else{(r={})[t]=e}i=h.extend({validate:true},i);if(r&&!i.wait){if(!this.set(r,i))return false}else{if(!this._validate(r,i))return false}if(r&&i.wait){this.attributes=h.extend({},a,r)}if(i.parse===void 0)i.parse=true;var o=this;var u=i.success;i.success=function(t){o.attributes=a;var e=o.parse(t,i);if(i.wait)e=h.extend(r||{},e);if(h.isObject(e)&&!o.set(e,i)){return false}if(u)u(o,t,i);o.trigger(\"sync\",o,t,i)};M(this,i);s=this.isNew()?\"create\":i.patch?\"patch\":\"update\";if(s===\"patch\")i.attrs=r;n=this.sync(s,this,i);if(r&&i.wait)this.attributes=a;return n},destroy:function(t){t=t?h.clone(t):{};var e=this;var i=t.success;var r=function(){e.trigger(\"destroy\",e,e.collection,t)};t.success=function(s){if(t.wait||e.isNew())r();if(i)i(e,s,t);if(!e.isNew())e.trigger(\"sync\",e,s,t)};if(this.isNew()){t.success();return false}M(this,t);var s=this.sync(\"delete\",this,t);if(!t.wait)r();return s},url:function(){var t=h.result(this,\"urlRoot\")||h.result(this.collection,\"url\")||U();if(this.isNew())return t;return t+(t.charAt(t.length-1)===\"/\"?\"\":\"/\")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return this.id==null},isValid:function(t){return this._validate({},h.extend(t||{},{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=h.extend({},this.attributes,t);var i=this.validationError=this.validate(t,e)||null;if(!i)return true;this.trigger(\"invalid\",this,i,h.extend(e,{validationError:i}));return false}});var p=[\"keys\",\"values\",\"pairs\",\"invert\",\"pick\",\"omit\"];h.each(p,function(t){d.prototype[t]=function(){var e=s.call(arguments);e.unshift(this.attributes);return h[t].apply(h,e)}});var v=a.Collection=function(t,e){e||(e={});if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,h.extend({silent:true},e))};var g={add:true,remove:true,merge:true};var m={add:true,remove:false};h.extend(v.prototype,o,{model:d,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return a.sync.apply(this,arguments)},add:function(t,e){return this.set(t,h.extend({merge:false},e,m))},remove:function(t,e){var i=!h.isArray(t);t=i?[t]:h.clone(t);e||(e={});var r,s,n,a;for(r=0,s=t.length;r<s;r++){a=t[r]=this.get(t[r]);if(!a)continue;delete this._byId[a.id];delete this._byId[a.cid];n=this.indexOf(a);this.models.splice(n,1);this.length--;if(!e.silent){e.index=n;a.trigger(\"remove\",a,this,e)}this._removeReference(a)}return i?t[0]:t},set:function(t,e){e=h.defaults({},e,g);if(e.parse)t=this.parse(t,e);var i=!h.isArray(t);t=i?t?[t]:[]:h.clone(t);var r,s,n,a,o,u,l;var c=e.at;var f=this.model;var p=this.comparator&&c==null&&e.sort!==false;var v=h.isString(this.comparator)?this.comparator:null;var m=[],y=[],_={};var w=e.add,b=e.merge,x=e.remove;var E=!p&&w&&x?[]:false;for(r=0,s=t.length;r<s;r++){o=t[r];if(o instanceof d){n=a=o}else{n=o[f.prototype.idAttribute]}if(u=this.get(n)){if(x)_[u.cid]=true;if(b){o=o===a?a.attributes:o;if(e.parse)o=u.parse(o,e);u.set(o,e);if(p&&!l&&u.hasChanged(v))l=true}t[r]=u}else if(w){a=t[r]=this._prepareModel(o,e);if(!a)continue;m.push(a);a.on(\"all\",this._onModelEvent,this);this._byId[a.cid]=a;if(a.id!=null)this._byId[a.id]=a}if(E)E.push(u||a)}if(x){for(r=0,s=this.length;r<s;++r){if(!_[(a=this.models[r]).cid])y.push(a)}if(y.length)this.remove(y,e)}if(m.length||E&&E.length){if(p)l=true;this.length+=m.length;if(c!=null){for(r=0,s=m.length;r<s;r++){this.models.splice(c+r,0,m[r])}}else{if(E)this.models.length=0;var T=E||m;for(r=0,s=T.length;r<s;r++){this.models.push(T[r])}}}if(l)this.sort({silent:true});if(!e.silent){for(r=0,s=m.length;r<s;r++){(a=m[r]).trigger(\"add\",a,this,e)}if(l||E&&E.length)this.trigger(\"sort\",this,e)}return i?t[0]:t},reset:function(t,e){e||(e={});for(var i=0,r=this.models.length;i<r;i++){this._removeReference(this.models[i])}e.previousModels=this.models;this._reset();t=this.add(t,h.extend({silent:true},e));if(!e.silent)this.trigger(\"reset\",this,e);return t},push:function(t,e){return this.add(t,h.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);this.remove(e,t);return e},unshift:function(t,e){return this.add(t,h.extend({at:0},e))},shift:function(t){var e=this.at(0);this.remove(e,t);return e},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(t==null)return void 0;return this._byId[t.id]||this._byId[t.cid]||this._byId[t]},at:function(t){return this.models[t]},where:function(t,e){if(h.isEmpty(t))return e?void 0:[];return this[e?\"find\":\"filter\"](function(e){for(var i in t){if(t[i]!==e.get(i))return false}return true})},findWhere:function(t){return this.where(t,true)},sort:function(t){if(!this.comparator)throw new Error(\"Cannot sort a set without a comparator\");t||(t={});if(h.isString(this.comparator)||this.comparator.length===1){this.models=this.sortBy(this.comparator,this)}else{this.models.sort(h.bind(this.comparator,this))}if(!t.silent)this.trigger(\"sort\",this,t);return this},pluck:function(t){return h.invoke(this.models,\"get\",t)},fetch:function(t){t=t?h.clone(t):{};if(t.parse===void 0)t.parse=true;var e=t.success;var i=this;t.success=function(r){var s=t.reset?\"reset\":\"set\";i[s](r,t);if(e)e(i,r,t);i.trigger(\"sync\",i,r,t)};M(this,t);return this.sync(\"read\",this,t)},create:function(t,e){e=e?h.clone(e):{};if(!(t=this._prepareModel(t,e)))return false;if(!e.wait)this.add(t,e);var i=this;var r=e.success;e.success=function(t,e,s){if(s.wait)i.add(t,s);if(r)r(t,e,s)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(t instanceof d){if(!t.collection)t.collection=this;return t}e=e?h.clone(e):{};e.collection=this;var i=new this.model(t,e);if(!i.validationError)return i;this.trigger(\"invalid\",this,i.validationError,e);return false},_removeReference:function(t){if(this===t.collection)delete t.collection;t.off(\"all\",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if((t===\"add\"||t===\"remove\")&&i!==this)return;if(t===\"destroy\")this.remove(e,r);if(e&&t===\"change:\"+e.idAttribute){delete this._byId[e.previous(e.idAttribute)];if(e.id!=null)this._byId[e.id]=e}this.trigger.apply(this,arguments)}});var y=[\"forEach\",\"each\",\"map\",\"collect\",\"reduce\",\"foldl\",\"inject\",\"reduceRight\",\"foldr\",\"find\",\"detect\",\"filter\",\"select\",\"reject\",\"every\",\"all\",\"some\",\"any\",\"include\",\"contains\",\"invoke\",\"max\",\"min\",\"toArray\",\"size\",\"first\",\"head\",\"take\",\"initial\",\"rest\",\"tail\",\"drop\",\"last\",\"without\",\"difference\",\"indexOf\",\"shuffle\",\"lastIndexOf\",\"isEmpty\",\"chain\"];h.each(y,function(t){v.prototype[t]=function(){var e=s.call(arguments);e.unshift(this.models);return h[t].apply(h,e)}});var _=[\"groupBy\",\"countBy\",\"sortBy\"];h.each(_,function(t){v.prototype[t]=function(e,i){var r=h.isFunction(e)?e:function(t){return t.get(e)};return h[t](this.models,r,i)}});var w=a.View=function(t){this.cid=h.uniqueId(\"view\");t||(t={});h.extend(this,h.pick(t,x));this._ensureElement();this.initialize.apply(this,arguments);this.delegateEvents()};var b=/^(\\S+)\\s*(.*)$/;var x=[\"model\",\"collection\",\"el\",\"id\",\"attributes\",\"className\",\"tagName\",\"events\"];h.extend(w.prototype,o,{tagName:\"div\",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this.$el.remove();this.stopListening();return this},setElement:function(t,e){if(this.$el)this.undelegateEvents();this.$el=t instanceof a.$?t:a.$(t);this.el=this.$el[0];if(e!==false)this.delegateEvents();return this},delegateEvents:function(t){if(!(t||(t=h.result(this,\"events\"))))return this;this.undelegateEvents();for(var e in t){var i=t[e];if(!h.isFunction(i))i=this[t[e]];if(!i)continue;var r=e.match(b);var s=r[1],n=r[2];i=h.bind(i,this);s+=\".delegateEvents\"+this.cid;if(n===\"\"){this.$el.on(s,i)}else{this.$el.on(s,n,i)}}return this},undelegateEvents:function(){this.$el.off(\".delegateEvents\"+this.cid);return this},_ensureElement:function(){if(!this.el){var t=h.extend({},h.result(this,\"attributes\"));if(this.id)t.id=h.result(this,\"id\");if(this.className)t[\"class\"]=h.result(this,\"className\");var e=a.$(\"<\"+h.result(this,\"tagName\")+\">\").attr(t);this.setElement(e,false)}else{this.setElement(h.result(this,\"el\"),false)}}});a.sync=function(t,e,i){var r=T[t];h.defaults(i||(i={}),{emulateHTTP:a.emulateHTTP,emulateJSON:a.emulateJSON});var s={type:r,dataType:\"json\"};if(!i.url){s.url=h.result(e,\"url\")||U()}if(i.data==null&&e&&(t===\"create\"||t===\"update\"||t===\"patch\")){s.contentType=\"application/json\";s.data=JSON.stringify(i.attrs||e.toJSON(i))}if(i.emulateJSON){s.contentType=\"application/x-www-form-urlencoded\";s.data=s.data?{model:s.data}:{}}if(i.emulateHTTP&&(r===\"PUT\"||r===\"DELETE\"||r===\"PATCH\")){s.type=\"POST\";if(i.emulateJSON)s.data._method=r;var n=i.beforeSend;i.beforeSend=function(t){t.setRequestHeader(\"X-HTTP-Method-Override\",r);if(n)return n.apply(this,arguments)}}if(s.type!==\"GET\"&&!i.emulateJSON){s.processData=false}if(s.type===\"PATCH\"&&E){s.xhr=function(){return new ActiveXObject(\"Microsoft.XMLHTTP\")}}var o=i.xhr=a.ajax(h.extend(s,i));e.trigger(\"request\",e,o,i);return o};var E=typeof window!==\"undefined\"&&!!window.ActiveXObject&&!(window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent);var T={create:\"POST\",update:\"PUT\",patch:\"PATCH\",\"delete\":\"DELETE\",read:\"GET\"};a.ajax=function(){return a.$.ajax.apply(a.$,arguments)};var k=a.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var S=/\\((.*?)\\)/g;var $=/(\\(\\?)?:\\w+/g;var H=/\\*\\w+/g;var A=/[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;h.extend(k.prototype,o,{initialize:function(){},route:function(t,e,i){if(!h.isRegExp(t))t=this._routeToRegExp(t);if(h.isFunction(e)){i=e;e=\"\"}if(!i)i=this[e];var r=this;a.history.route(t,function(s){var n=r._extractParameters(t,s);i&&i.apply(r,n);r.trigger.apply(r,[\"route:\"+e].concat(n));r.trigger(\"route\",e,n);a.history.trigger(\"route\",r,e,n)});return this},navigate:function(t,e){a.history.navigate(t,e);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=h.result(this,\"routes\");var t,e=h.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(A,\"\\\\$&\").replace(S,\"(?:$1)?\").replace($,function(t,e){return e?t:\"([^/]+)\"}).replace(H,\"(.*?)\");return new RegExp(\"^\"+t+\"$\")},_extractParameters:function(t,e){var i=t.exec(e).slice(1);return h.map(i,function(t){return t?decodeURIComponent(t):null})}});var I=a.History=function(){this.handlers=[];h.bindAll(this,\"checkUrl\");if(typeof window!==\"undefined\"){this.location=window.location;this.history=window.history}};var N=/^[#\\/]|\\s+$/g;var O=/^\\/+|\\/+$/g;var P=/msie [\\w.]+/;var C=/\\/$/;var j=/[?#].*$/;I.started=false;h.extend(I.prototype,o,{interval:50,getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:\"\"},getFragment:function(t,e){if(t==null){if(this._hasPushState||!this._wantsHashChange||e){t=this.location.pathname;var i=this.root.replace(C,\"\");if(!t.indexOf(i))t=t.slice(i.length)}else{t=this.getHash()}}return t.replace(N,\"\")},start:function(t){if(I.started)throw new Error(\"Backbone.history has already been started\");I.started=true;this.options=h.extend({root:\"/\"},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var e=this.getFragment();var i=document.documentMode;var r=P.exec(navigator.userAgent.toLowerCase())&&(!i||i<=7);this.root=(\"/\"+this.root+\"/\").replace(O,\"/\");if(r&&this._wantsHashChange){this.iframe=a.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo(\"body\")[0].contentWindow;this.navigate(e)}if(this._hasPushState){a.$(window).on(\"popstate\",this.checkUrl)}else if(this._wantsHashChange&&\"onhashchange\"in window&&!r){a.$(window).on(\"hashchange\",this.checkUrl)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}this.fragment=e;var s=this.location;var n=s.pathname.replace(/[^\\/]$/,\"$&/\")===this.root;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!n){this.fragment=this.getFragment(null,true);this.location.replace(this.root+this.location.search+\"#\"+this.fragment);return true}else if(this._hasPushState&&n&&s.hash){this.fragment=this.getHash().replace(N,\"\");this.history.replaceState({},document.title,this.root+this.fragment+s.search)}}if(!this.options.silent)return this.loadUrl()},stop:function(){a.$(window).off(\"popstate\",this.checkUrl).off(\"hashchange\",this.checkUrl);clearInterval(this._checkUrlInterval);I.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getFragment(this.getHash(this.iframe))}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()},loadUrl:function(t){t=this.fragment=this.getFragment(t);return h.any(this.handlers,function(e){if(e.route.test(t)){e.callback(t);return true}})},navigate:function(t,e){if(!I.started)return false;if(!e||e===true)e={trigger:!!e};var i=this.root+(t=this.getFragment(t||\"\"));t=t.replace(j,\"\");if(this.fragment===t)return;this.fragment=t;if(t===\"\"&&i!==\"/\")i=i.slice(0,-1);if(this._hasPushState){this.history[e.replace?\"replaceState\":\"pushState\"]({},document.title,i)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getFragment(this.getHash(this.iframe))){if(!e.replace)this.iframe.document.open().close();this._updateHash(this.iframe.location,t,e.replace)}}else{return this.location.assign(i)}if(e.trigger)return this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,\"\");t.replace(r+\"#\"+e)}else{t.hash=\"#\"+e}}});a.history=new I;var R=function(t,e){var i=this;var r;if(t&&h.has(t,\"constructor\")){r=t.constructor}else{r=function(){return i.apply(this,arguments)}}h.extend(r,i,e);var s=function(){this.constructor=r};s.prototype=i.prototype;r.prototype=new s;if(t)h.extend(r.prototype,t);r.__super__=i.prototype;return r};d.extend=v.extend=k.extend=w.extend=I.extend=R;var U=function(){throw new Error('A \"url\" property or function must be specified')};var M=function(t,e){var i=e.error;e.error=function(r){if(i)i(t,r,e);t.trigger(\"error\",t,r,e)}}}).call(this);\n//# sourceMappingURL=backbone-min.map;\ndefine(\"backbone\", [\"jquery\",\"underscore\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.Backbone;\n    };\n}(this)));\n","\n(function($) {\n\n  // Backbone.Stickit Namespace\n  // --------------------------\n\n  Backbone.Stickit = {\n\n    _handlers: [],\n\n    addHandler: function(handlers) {\n      // Fill-in default values.\n      handlers = _.map(_.flatten([handlers]), function(handler) {\n        return _.extend({\n          updateModel: true,\n          updateView: true,\n          updateMethod: 'text'\n        }, handler);\n      });\n      this._handlers = this._handlers.concat(handlers);\n    }\n  };\n\n  // Backbone.View Mixins\n  // --------------------\n\n  _.extend(Backbone.View.prototype, {\n\n    // Collection of model event bindings.\n    //   [{model,event,fn}, ...]\n    _modelBindings: null,\n\n    // Unbind the model and event bindings from `this._modelBindings` and\n    // `this.$el`. If the optional `model` parameter is defined, then only\n    // delete bindings for the given `model` and its corresponding view events.\n    unstickit: function(model) {\n      _.each(this._modelBindings, _.bind(function(binding, i) {\n        if (model && binding.model !== model) return false;\n        binding.model.off(binding.event, binding.fn);\n        delete this._modelBindings[i];\n      }, this));\n      this._modelBindings = _.compact(this._modelBindings);\n\n      this.$el.off('.stickit' + (model ? '.' + model.cid : ''));\n    },\n\n    // Using `this.bindings` configuration or the `optionalBindingsConfig`, binds `this.model`\n    // or the `optionalModel` to elements in the view.\n    stickit: function(optionalModel, optionalBindingsConfig) {\n      var self = this,\n        model = optionalModel || this.model,\n        namespace = '.stickit.' + model.cid,\n        bindings = optionalBindingsConfig || this.bindings || {};\n\n      this._modelBindings || (this._modelBindings = []);\n      this.unstickit(model);\n\n      // Iterate through the selectors in the bindings configuration and configure\n      // the various options for each field.\n      _.each(_.keys(bindings), function(selector) {\n        var $el, options, modelAttr, config,\n          binding = bindings[selector] || {},\n          bindKey = _.uniqueId();\n\n        // Support ':el' selector - special case selector for the view managed delegate.\n        if (selector != ':el') $el = self.$(selector);\n        else {\n          $el = self.$el;\n          selector = '';\n        }\n\n        // Fail fast if the selector didn't match an element.\n        if (!$el.length) return;\n\n        // Allow shorthand setting of model attributes - `'selector':'observe'`.\n        if (_.isString(binding)) binding = {observe:binding};\n\n        config = getConfiguration($el, binding);\n\n        modelAttr = config.observe;\n\n        // Create the model set options with a unique `bindKey` so that we\n        // can avoid double-binding in the `change:attribute` event handler.\n        options = _.extend({bindKey:bindKey}, config.setOptions || {});\n\n        initializeAttributes(self, $el, config, model, modelAttr);\n\n        initializeVisible(self, $el, config, model, modelAttr);\n\n        if (modelAttr) {\n          // Setup one-way, form element to model, bindings.\n          _.each(config.events || [], function(type) {\n            var event = type + namespace;\n            var method = function(event) {\n              var val = config.getVal.call(self, $el, event, config);\n              // Don't update the model if false is returned from the `updateModel` configuration.\n              if (evaluateBoolean(self, config.updateModel, val, config))\n                setAttr(model, modelAttr, val, options, self, config);\n            };\n            if (selector === '') self.$el.on(event, method);\n            else self.$el.on(event, selector, method);\n          });\n\n          // Setup a `change:modelAttr` observer to keep the view element in sync.\n          // `modelAttr` may be an array of attributes or a single string value.\n          _.each(_.flatten([modelAttr]), function(attr) {\n            observeModelEvent(model, self, 'change:'+attr, function(model, val, options) {\n              if (options == null || options.bindKey != bindKey)\n                updateViewBindEl(self, $el, config, getAttr(model, modelAttr, config, self), model);\n            });\n          });\n\n          updateViewBindEl(self, $el, config, getAttr(model, modelAttr, config, self), model, true);\n        }\n\n        // After each binding is setup, call the `initialize` callback.\n        applyViewFn(self, config.initialize, $el, model, config);\n      });\n\n      // Wrap `view.remove` to unbind stickit model and dom events.\n      this.remove = _.wrap(this.remove, function(oldRemove) {\n        self.unstickit();\n        if (oldRemove) oldRemove.call(self);\n      });\n    }\n  });\n\n  // Helpers\n  // -------\n\n  // Evaluates the given `path` (in object/dot-notation) relative to the given\n  // `obj`. If the path is null/undefined, then the given `obj` is returned.\n  var evaluatePath = function(obj, path) {\n    var parts = (path || '').split('.');\n    var result = _.reduce(parts, function(memo, i) { return memo[i]; }, obj);\n    return result == null ? obj : result;\n  };\n\n  // If the given `fn` is a string, then view[fn] is called, otherwise it is\n  // a function that should be executed.\n  var applyViewFn = function(view, fn) {\n    if (fn) return (_.isString(fn) ? view[fn] : fn).apply(view, _.toArray(arguments).slice(2));\n  };\n\n  var getSelectedOption = function($select) { return $select.find('option').not(function(){ return !this.selected; }); };\n\n  // Given a function, string (view function reference), or a boolean\n  // value, returns the truthy result. Any other types evaluate as false.\n  var evaluateBoolean = function(view, reference) {\n    if (_.isBoolean(reference)) return reference;\n    else if (_.isFunction(reference) || _.isString(reference))\n      return applyViewFn.apply(this, _.toArray(arguments));\n    return false;\n  };\n\n  // Setup a model event binding with the given function, and track the event\n  // in the view's _modelBindings.\n  var observeModelEvent = function(model, view, event, fn) {\n    model.on(event, fn, view);\n    view._modelBindings.push({model:model, event:event, fn:fn});\n  };\n\n  // Prepares the given `val`ue and sets it into the `model`.\n  var setAttr = function(model, attr, val, options, context, config) {\n    if (config.onSet) val = applyViewFn(context, config.onSet, val, config);\n    model.set(attr, val, options);\n  };\n\n  // Returns the given `attr`'s value from the `model`, escaping and\n  // formatting if necessary. If `attr` is an array, then an array of\n  // respective values will be returned.\n  var getAttr = function(model, attr, config, context) {\n    var val, retrieveVal = function(field) {\n      var retrieved = config.escape ? model.escape(field) : model.get(field);\n      return _.isUndefined(retrieved) ? '' : retrieved;\n    };\n    val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);\n    return config.onGet ? applyViewFn(context, config.onGet, val, config) : val;\n  };\n\n  // Find handlers in `Backbone.Stickit._handlers` with selectors that match\n  // `$el` and generate a configuration by mixing them in the order that they\n  // were found with the with the givne `binding`.\n  var getConfiguration = function($el, binding) {\n    var handlers = [{\n      updateModel: false,\n      updateView: true,\n      updateMethod: 'text',\n      update: function($el, val, m, opts) { $el[opts.updateMethod](val); },\n      getVal: function($el, e, opts) { return $el[opts.updateMethod](); }\n    }];\n    _.each(Backbone.Stickit._handlers, function(handler) {\n      if ($el.is(handler.selector)) handlers.push(handler);\n    });\n    handlers.push(binding);\n    var config = _.extend.apply(_, handlers);\n    delete config.selector;\n    return config;\n  };\n\n  // Setup the attributes configuration - a list that maps an attribute or\n  // property `name`, to an `observe`d model attribute, using an optional\n  // `onGet` formatter.\n  //\n  //     attributes: [{\n  //       name: 'attributeOrPropertyName',\n  //       observe: 'modelAttrName'\n  //       onGet: function(modelAttrVal, modelAttrName) { ... }\n  //     }, ...]\n  //\n  var initializeAttributes = function(view, $el, config, model, modelAttr) {\n    var props = ['autofocus', 'autoplay', 'async', 'checked', 'controls', 'defer', 'disabled', 'hidden', 'loop', 'multiple', 'open', 'readonly', 'required', 'scoped', 'selected'];\n\n    _.each(config.attributes || [], function(attrConfig) {\n      var lastClass = '',\n        observed = attrConfig.observe || (attrConfig.observe = modelAttr),\n        updateAttr = function() {\n          var updateType = _.indexOf(props, attrConfig.name, true) > -1 ? 'prop' : 'attr',\n            val = getAttr(model, observed, attrConfig, view);\n          // If it is a class then we need to remove the last value and add the new.\n          if (attrConfig.name == 'class') {\n            $el.removeClass(lastClass).addClass(val);\n            lastClass = val;\n          }\n          else $el[updateType](attrConfig.name, val);\n        };\n      _.each(_.flatten([observed]), function(attr) {\n        observeModelEvent(model, view, 'change:' + attr, updateAttr);\n      });\n      updateAttr();\n    });\n  };\n\n  // If `visible` is configured, then the view element will be shown/hidden\n  // based on the truthiness of the modelattr's value or the result of the\n  // given callback. If a `visibleFn` is also supplied, then that callback\n  // will be executed to manually handle showing/hiding the view element.\n  //\n  //     observe: 'isRight',\n  //     visible: true, // or function(val, options) {}\n  //     visibleFn: function($el, isVisible, options) {} // optional handler\n  //\n  var initializeVisible = function(view, $el, config, model, modelAttr) {\n    if (config.visible == null) return;\n    var visibleCb = function() {\n      var visible = config.visible,\n          visibleFn = config.visibleFn,\n          val = getAttr(model, modelAttr, config, view),\n          isVisible = !!val;\n      // If `visible` is a function then it should return a boolean result to show/hide.\n      if (_.isFunction(visible) || _.isString(visible)) isVisible = applyViewFn(view, visible, val, config);\n      // Either use the custom `visibleFn`, if provided, or execute the standard show/hide.\n      if (visibleFn) applyViewFn(view, visibleFn, $el, isVisible, config);\n      else {\n        if (isVisible) $el.show();\n        else $el.hide();\n      }\n    };\n    _.each(_.flatten([modelAttr]), function(attr) {\n      observeModelEvent(model, view, 'change:' + attr, visibleCb);\n    });\n    visibleCb();\n  };\n\n  // Update the value of `$el` using the given configuration and trigger the\n  // `afterUpdate` callback. This action may be blocked by `config.updateView`.\n  //\n  //     update: function($el, val, model, options) {},  // handler for updating\n  //     updateView: true, // defaults to true\n  //     afterUpdate: function($el, val, options) {} // optional callback\n  //\n  var updateViewBindEl = function(view, $el, config, val, model, isInitializing) {\n    if (!evaluateBoolean(view, config.updateView, val, config)) return;\n    config.update.call(view, $el, val, model, config);\n    if (!isInitializing) applyViewFn(view, config.afterUpdate, $el, val, config);\n  };\n\n  // Default Handlers\n  // ----------------\n\n  Backbone.Stickit.addHandler([{\n    selector: '[contenteditable=\"true\"]',\n    updateMethod: 'html',\n    events: ['keyup', 'change', 'paste', 'cut']\n  }, {\n    selector: 'input',\n    events: ['keyup', 'change', 'paste', 'cut'],\n    update: function($el, val) { $el.val(val); },\n    getVal: function($el) {\n      var val = $el.val();\n      if ($el.is('[type=\"number\"]')) return val == null ? val : Number(val);\n      else return val;\n    }\n  }, {\n    selector: 'textarea',\n    events: ['keyup', 'change', 'paste', 'cut'],\n    update: function($el, val) { $el.val(val); },\n    getVal: function($el) { return $el.val(); }\n  }, {\n    selector: 'input[type=\"radio\"]',\n    events: ['change'],\n    update: function($el, val) {\n      $el.filter('[value=\"'+val+'\"]').prop('checked', true);\n    },\n    getVal: function($el) {\n      return $el.filter(':checked').val();\n    }\n  }, {\n    selector: 'input[type=\"checkbox\"]',\n    events: ['change'],\n    update: function($el, val, model, options) {\n      if ($el.length > 1) {\n        // There are multiple checkboxes so we need to go through them and check\n        // any that have value attributes that match what's in the array of `val`s.\n        val || (val = []);\n        _.each($el, function(el) {\n          if (_.indexOf(val, $(el).val()) > -1) $(el).prop('checked', true);\n          else $(el).prop('checked', false);\n        });\n      } else {\n        if (_.isBoolean(val)) $el.prop('checked', val);\n        else $el.prop('checked', val == $el.val());\n      }\n    },\n    getVal: function($el) {\n      var val;\n      if ($el.length > 1) {\n        val = _.reduce($el, function(memo, el) {\n          if ($(el).prop('checked')) memo.push($(el).val());\n          return memo;\n        }, []);\n      } else {\n        val = $el.prop('checked');\n        // If the checkbox has a value attribute defined, then\n        // use that value. Most browsers use \"on\" as a default.\n        var boxval = $el.val();\n        if (boxval != 'on' && boxval != null) {\n          if (val) val = $el.val();\n          else val = null;\n        }\n      }\n      return val;\n    }\n  }, {\n    selector: 'select',\n    events: ['change'],\n    update: function($el, val, model, options) {\n      var optList,\n        selectConfig = options.selectOptions,\n        list = selectConfig && selectConfig.collection || undefined,\n        isMultiple = $el.prop('multiple');\n\n      // If there are no `selectOptions` then we assume that the `<select>`\n      // is pre-rendered and that we need to generate the collection.\n      if (!selectConfig) {\n        selectConfig = {};\n        var getList = function($el) {\n          return $el.find('option').map(function() {\n            return {value:this.value, label:this.text};\n          }).get();\n        };\n        if ($el.find('optgroup').length) {\n          list = {opt_labels:[]};\n          _.each($el.find('optgroup'), function(el) {\n            var label = $(el).attr('label');\n            list.opt_labels.push(label);\n            list[label] = getList($(el));\n          });\n        } else {\n          list = getList($el);\n        }\n      }\n\n      // Fill in default label and path values.\n      selectConfig.valuePath = selectConfig.valuePath || 'value';\n      selectConfig.labelPath = selectConfig.labelPath || 'label';\n\n      var addSelectOptions = function(optList, $el, fieldVal) {\n        // Add a flag for default option at the beginning of the list.\n        if (selectConfig.defaultOption) {\n          optList = _.clone(optList);\n          optList.unshift('__default__');\n        }\n        _.each(optList, function(obj) {\n          var option = $('<option/>'), optionVal = obj;\n\n          var fillOption = function(text, val) {\n            option.text(text);\n            optionVal = val;\n            // Save the option value as data so that we can reference it later.\n            option.data('stickit_bind_val', optionVal);\n            if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal);\n          };\n\n          if (obj === '__default__')\n            fillOption(selectConfig.defaultOption.label, selectConfig.defaultOption.value);\n          else\n            fillOption(evaluatePath(obj, selectConfig.labelPath), evaluatePath(obj, selectConfig.valuePath));\n\n          // Determine if this option is selected.\n          if (!isMultiple && optionVal != null && fieldVal != null && optionVal == fieldVal || (_.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)))\n            option.prop('selected', true);\n          else if (isMultiple && _.isArray(fieldVal)) {\n            _.each(fieldVal, function(val) {\n              if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);\n              if (val == optionVal || (_.isObject(val) && _.isEqual(optionVal, val)))\n                option.prop('selected', true);\n            });\n          }\n\n          $el.append(option);\n        });\n      };\n\n      $el.html('');\n\n      // The `list` configuration is a function that returns the options list or a string\n      // which represents the path to the list relative to `window` or the view/`this`.\n      var evaluate = function(view, list) {\n        var context = window;\n        if (list.indexOf('this.') === 0) context = view;\n        list = list.replace(/^[a-z]*\\.(.+)$/, '$1');\n        return evaluatePath(context, list);\n      };\n      if (_.isString(list)) optList = evaluate(this, list);\n      else if (_.isFunction(list)) optList = applyViewFn(this, list, $el, options);\n      else optList = list;\n\n      // Support Backbone.Collection and deserialize.\n      if (optList instanceof Backbone.Collection) optList = optList.toJSON();\n\n      if (_.isArray(optList)) {\n        addSelectOptions(optList, $el, val);\n      } else {\n        // If the optList is an object, then it should be used to define an optgroup. An\n        // optgroup object configuration looks like the following:\n        //\n        //     {\n        //       'opt_labels': ['Looney Tunes', 'Three Stooges'],\n        //       'Looney Tunes': [{id: 1, name: 'Bugs Bunny'}, {id: 2, name: 'Donald Duck'}],\n        //       'Three Stooges': [{id: 3, name : 'moe'}, {id: 4, name : 'larry'}, {id: 5, name : 'curly'}]\n        //     }\n        //\n        _.each(optList.opt_labels, function(label) {\n          var $group = $('<optgroup/>').attr('label', label);\n          addSelectOptions(optList[label], $group, val);\n          $el.append($group);\n        });\n      }\n    },\n    getVal: function($el) {\n      var val;\n      if ($el.prop('multiple')) {\n        val = $(getSelectedOption($el).map(function() {\n          return $(this).data('stickit_bind_val');\n        })).get();\n      } else {\n        val = getSelectedOption($el).data('stickit_bind_val');\n      }\n      return val;\n    }\n  }]);\n\n})(window.jQuery || window.Zepto);\n\ndefine(\"stickit\", [\"backbone\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.Backbone.Stickit;\n    };\n}(this)));\n","\n//! moment.js\n//! version : 2.4.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"2.4.0\",\n        round = Math.round,\n        i,\n\n        YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n\n        // internal storage for language config files\n        languages = {},\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,\n\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999\n        parseTokenDigits = /\\d+/, // nonzero number of digits\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n\n        // preliminary iso regex\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000)\n        isoRegex = /^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d|Z)?)?$/,\n\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        isoDates = [\n            'YYYY-MM-DD',\n            'GGGG-[W]WW',\n            'GGGG-[W]WW-E',\n            'YYYY-DDD'\n        ],\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n            ['HH', /(T| )\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        unitAliases = {\n            ms : 'millisecond',\n            s : 'second',\n            m : 'minute',\n            h : 'hour',\n            d : 'day',\n            D : 'date',\n            w : 'week',\n            W : 'isoWeek',\n            M : 'month',\n            y : 'year',\n            DDD : 'dayOfYear',\n            e : 'weekday',\n            E : 'isoWeekday',\n            gg: 'weekYear',\n            GG: 'isoWeekYear'\n        },\n\n        camelFunctions = {\n            dayofyear : 'dayOfYear',\n            isoweekday : 'isoWeekday',\n            isoweek : 'isoWeek',\n            weekyear : 'weekYear',\n            isoweekyear : 'isoWeekYear'\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),\n        paddedTokens = 'M D H h m s w W'.split(' '),\n\n        formatTokenFunctions = {\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return this.lang().monthsShort(this, format);\n            },\n            MMMM : function (format) {\n                return this.lang().months(this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                return this.dayOfYear();\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return this.lang().weekdaysMin(this, format);\n            },\n            ddd  : function (format) {\n                return this.lang().weekdaysShort(this, format);\n            },\n            dddd : function (format) {\n                return this.lang().weekdays(this, format);\n            },\n            w    : function () {\n                return this.week();\n            },\n            W    : function () {\n                return this.isoWeek();\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            YYYYY : function () {\n                return leftZeroFill(this.year(), 5);\n            },\n            gg   : function () {\n                return leftZeroFill(this.weekYear() % 100, 2);\n            },\n            gggg : function () {\n                return this.weekYear();\n            },\n            ggggg : function () {\n                return leftZeroFill(this.weekYear(), 5);\n            },\n            GG   : function () {\n                return leftZeroFill(this.isoWeekYear() % 100, 2);\n            },\n            GGGG : function () {\n                return this.isoWeekYear();\n            },\n            GGGGG : function () {\n                return leftZeroFill(this.isoWeekYear(), 5);\n            },\n            e : function () {\n                return this.weekday();\n            },\n            E : function () {\n                return this.isoWeekday();\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return toInt(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            SSSS : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(toInt(a / 60), 2) + \":\" + leftZeroFill(toInt(a) % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(toInt(10 * a / 6), 4);\n            },\n            z : function () {\n                return this.zoneAbbr();\n            },\n            zz : function () {\n                return this.zoneName();\n            },\n            X    : function () {\n                return this.unix();\n            }\n        },\n\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func, period) {\n        return function (a) {\n            return this.lang().ordinal(func.call(this, a), period);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    function Language() {\n\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        checkOverflow(config);\n        extend(this, config);\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // store reference to input for deterministic cloning\n        this._input = duration;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            years * 12;\n\n        this._data = {};\n\n        this._bubble();\n    }\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (b.hasOwnProperty(i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (b.hasOwnProperty(\"toString\")) {\n            a.toString = b.toString;\n        }\n\n        if (b.hasOwnProperty(\"valueOf\")) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = duration._days,\n            months = duration._months,\n            minutes,\n            hours;\n\n        if (milliseconds) {\n            mom._d.setTime(+mom._d + milliseconds * isAdding);\n        }\n        // store the minutes and hours so we can restore them\n        if (days || months) {\n            minutes = mom.minute();\n            hours = mom.hour();\n        }\n        if (days) {\n            mom.date(mom.date() + days * isAdding);\n        }\n        if (months) {\n            mom.month(mom.month() + months * isAdding);\n        }\n        if (milliseconds && !ignoreUpdateOffset) {\n            moment.updateOffset(mom);\n        }\n        // restore the minutes and hours after possibly changing dst\n        if (days || months) {\n            mom.minute(minutes);\n            mom.hour(hours);\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isDate(input) {\n        return  Object.prototype.toString.call(input) === '[object Date]' ||\n                input instanceof Date;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function normalizeUnits(units) {\n        if (units) {\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;\n        }\n        return units;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop,\n            index;\n\n        for (prop in inputObject) {\n            if (inputObject.hasOwnProperty(prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    function makeList(field) {\n        var count, setter;\n\n        if (field.indexOf('week') === 0) {\n            count = 7;\n            setter = 'day';\n        }\n        else if (field.indexOf('month') === 0) {\n            count = 12;\n            setter = 'month';\n        }\n        else {\n            return;\n        }\n\n        moment[field] = function (format, index) {\n            var i, getter,\n                method = moment.fn._lang[field],\n                results = [];\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            getter = function (i) {\n                var m = moment().utc().set(setter, i);\n                return method.call(moment.fn._lang, m, format || '');\n            };\n\n            if (index != null) {\n                return getter(index);\n            }\n            else {\n                for (i = 0; i < count; i++) {\n                    results.push(getter(i));\n                }\n                return results;\n            }\n        };\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            if (coercedNumber >= 0) {\n                value = Math.floor(coercedNumber);\n            } else {\n                value = Math.ceil(coercedNumber);\n            }\n        }\n\n        return value;\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function checkOverflow(m) {\n        var overflow;\n        if (m._a && m._pf.overflow === -2) {\n            overflow =\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :\n                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n\n            m._pf.overflow = overflow;\n        }\n    }\n\n    function initializeParsingFlags(config) {\n        config._pf = {\n            empty : false,\n            unusedTokens : [],\n            unusedInput : [],\n            overflow : -2,\n            charsLeftOver : 0,\n            nullInput : false,\n            invalidMonth : null,\n            invalidFormat : false,\n            userInvalidated : false,\n            iso: false\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            m._isValid = !isNaN(m._d.getTime()) &&\n                m._pf.overflow < 0 &&\n                !m._pf.empty &&\n                !m._pf.invalidMonth &&\n                !m._pf.nullInput &&\n                !m._pf.invalidFormat &&\n                !m._pf.userInvalidated;\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    m._pf.charsLeftOver === 0 &&\n                    m._pf.unusedTokens.length === 0;\n            }\n        }\n        return m._isValid;\n    }\n\n    function normalizeLanguage(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    /************************************\n        Languages\n    ************************************/\n\n\n    extend(Language.prototype, {\n\n        set : function (config) {\n            var prop, i;\n            for (i in config) {\n                prop = config[i];\n                if (typeof prop === 'function') {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        },\n\n        _months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        months : function (m) {\n            return this._months[m.month()];\n        },\n\n        _monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        monthsShort : function (m) {\n            return this._monthsShort[m.month()];\n        },\n\n        monthsParse : function (monthName) {\n            var i, mom, regex;\n\n            if (!this._monthsParse) {\n                this._monthsParse = [];\n            }\n\n            for (i = 0; i < 12; i++) {\n                // make the regex if we don't have it already\n                if (!this._monthsParse[i]) {\n                    mom = moment.utc([2000, i]);\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._monthsParse[i].test(monthName)) {\n                    return i;\n                }\n            }\n        },\n\n        _weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdays : function (m) {\n            return this._weekdays[m.day()];\n        },\n\n        _weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysShort : function (m) {\n            return this._weekdaysShort[m.day()];\n        },\n\n        _weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        weekdaysMin : function (m) {\n            return this._weekdaysMin[m.day()];\n        },\n\n        weekdaysParse : function (weekdayName) {\n            var i, mom, regex;\n\n            if (!this._weekdaysParse) {\n                this._weekdaysParse = [];\n            }\n\n            for (i = 0; i < 7; i++) {\n                // make the regex if we don't have it already\n                if (!this._weekdaysParse[i]) {\n                    mom = moment([2000, 1]).day(i);\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._weekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n            }\n        },\n\n        _longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        longDateFormat : function (key) {\n            var output = this._longDateFormat[key];\n            if (!output && this._longDateFormat[key.toUpperCase()]) {\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                    return val.slice(1);\n                });\n                this._longDateFormat[key] = output;\n            }\n            return output;\n        },\n\n        isPM : function (input) {\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n            // Using charAt should be more compatible.\n            return ((input + '').toLowerCase().charAt(0) === 'p');\n        },\n\n        _meridiemParse : /[ap]\\.?m?\\.?/i,\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n\n        _calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[Last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        calendar : function (key, mom) {\n            var output = this._calendar[key];\n            return typeof output === 'function' ? output.apply(mom) : output;\n        },\n\n        _relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        relativeTime : function (number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return (typeof output === 'function') ?\n                output(number, withoutSuffix, string, isFuture) :\n                output.replace(/%d/i, number);\n        },\n        pastFuture : function (diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n        },\n\n        ordinal : function (number) {\n            return this._ordinal.replace(\"%d\", number);\n        },\n        _ordinal : \"%d\",\n\n        preparse : function (string) {\n            return string;\n        },\n\n        postformat : function (string) {\n            return string;\n        },\n\n        week : function (mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;\n        },\n\n        _week : {\n            dow : 0, // Sunday is the first day of the week.\n            doy : 6  // The week that contains Jan 1st is the first week of the year.\n        },\n\n        _invalidDate: 'Invalid date',\n        invalidDate: function () {\n            return this._invalidDate;\n        }\n    });\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        values.abbr = key;\n        if (!languages[key]) {\n            languages[key] = new Language();\n        }\n        languages[key].set(values);\n        return languages[key];\n    }\n\n    // Remove a language from the `languages` cache. Mostly useful in tests.\n    function unloadLang(key) {\n        delete languages[key];\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.\n    function getLangDefinition(key) {\n        var i = 0, j, lang, next, split,\n            get = function (k) {\n                if (!languages[k] && hasModule) {\n                    try {\n                        require('./lang/' + k);\n                    } catch (e) { }\n                }\n                return languages[k];\n            };\n\n        if (!key) {\n            return moment.fn._lang;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            lang = get(key);\n            if (lang) {\n                return lang;\n            }\n            key = [key];\n        }\n\n        //pick the language from the array\n        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n        while (i < key.length) {\n            split = normalizeLanguage(key[i]).split('-');\n            j = split.length;\n            next = normalizeLanguage(key[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                lang = get(split.slice(0, j).join('-'));\n                if (lang) {\n                    return lang;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return moment.fn._lang;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n\n        if (!m.isValid()) {\n            return m.lang().invalidDate();\n        }\n\n        format = expandFormat(format, m.lang());\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, lang) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return lang.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token, config) {\n        var a;\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n        case 'GGGG':\n        case 'gggg':\n            return parseTokenFourDigits;\n        case 'YYYYY':\n        case 'GGGGG':\n        case 'ggggg':\n            return parseTokenSixDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n            return parseTokenWord;\n        case 'a':\n        case 'A':\n            return getLangDefinition(config._l)._meridiemParse;\n        case 'X':\n            return parseTokenTimestampMs;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'SSSS':\n            return parseTokenDigits;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'GG':\n        case 'gg':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'w':\n        case 'ww':\n        case 'W':\n        case 'WW':\n        case 'e':\n        case 'E':\n            return parseTokenOneOrTwoDigits;\n        default :\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), \"i\"));\n            return a;\n        }\n    }\n\n    function timezoneMinutesFromString(string) {\n        var tzchunk = (parseTokenTimezone.exec(string) || [])[0],\n            parts = (tzchunk + '').match(parseTimezoneChunker) || ['-', 0, 0],\n            minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? -minutes : minutes;\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, config) {\n        var a, datePartArray = config._a;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            if (input != null) {\n                datePartArray[MONTH] = toInt(input) - 1;\n            }\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            a = getLangDefinition(config._l).monthsParse(input);\n            // if we didn't find a month name, mark the date as invalid.\n            if (a != null) {\n                datePartArray[MONTH] = a;\n            } else {\n                config._pf.invalidMonth = input;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DD\n        case 'DD' :\n            if (input != null) {\n                datePartArray[DATE] = toInt(input);\n            }\n            break;\n        // DAY OF YEAR\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                config._dayOfYear = toInt(input);\n            }\n\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n        case 'YYYYY' :\n            datePartArray[YEAR] = toInt(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config._isPm = getLangDefinition(config._l).isPM(input);\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[HOUR] = toInt(input);\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[MINUTE] = toInt(input);\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[SECOND] = toInt(input);\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n        case 'SSSS' :\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);\n            break;\n        // UNIX TIMESTAMP WITH MS\n        case 'X':\n            config._d = new Date(parseFloat(input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config._useUTC = true;\n            config._tzm = timezoneMinutesFromString(input);\n            break;\n        case 'w':\n        case 'ww':\n        case 'W':\n        case 'WW':\n        case 'd':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'e':\n        case 'E':\n            token = token.substr(0, 1);\n            /* falls through */\n        case 'gg':\n        case 'gggg':\n        case 'GG':\n        case 'GGGG':\n        case 'GGGGG':\n            token = token.substr(0, 2);\n            if (input) {\n                config._w = config._w || {};\n                config._w[token] = input;\n            }\n            break;\n        }\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromConfig(config) {\n        var i, date, input = [], currentDate,\n            yearToUse, fixYear, w, temp, lang, weekday, week;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            fixYear = function (val) {\n                return val ?\n                  (val.length < 3 ? (parseInt(val, 10) > 68 ? '19' + val : '20' + val) : val) :\n                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);\n            };\n\n            w = config._w;\n            if (w.GG != null || w.W != null || w.E != null) {\n                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);\n            }\n            else {\n                lang = getLangDefinition(config._l);\n                weekday = w.d != null ?  parseWeekday(w.d, lang) :\n                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);\n\n                week = parseInt(w.w, 10) || 1;\n\n                //if we're parsing 'd', then the low day numbers may be next week\n                if (w.d != null && weekday < lang._week.dow) {\n                    week++;\n                }\n\n                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);\n            }\n\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                config._pf._overflowDayOfYear = true;\n            }\n\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid\n        input[HOUR] += toInt((config._tzm || 0) / 60);\n        input[MINUTE] += toInt((config._tzm || 0) % 60);\n\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);\n    }\n\n    function dateFromObject(config) {\n        var normalizedInput;\n\n        if (config._d) {\n            return;\n        }\n\n        normalizedInput = normalizeObjectUnits(config._i);\n        config._a = [\n            normalizedInput.year,\n            normalizedInput.month,\n            normalizedInput.day,\n            normalizedInput.hour,\n            normalizedInput.minute,\n            normalizedInput.second,\n            normalizedInput.millisecond\n        ];\n\n        dateFromConfig(config);\n    }\n\n    function currentDateArray(config) {\n        var now = new Date();\n        if (config._useUTC) {\n            return [\n                now.getUTCFullYear(),\n                now.getUTCMonth(),\n                now.getUTCDate()\n            ];\n        } else {\n            return [now.getFullYear(), now.getMonth(), now.getDate()];\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(config) {\n\n        config._a = [];\n        config._pf.empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var lang = getLangDefinition(config._l),\n            string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    config._pf.unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    config._pf.empty = false;\n                }\n                else {\n                    config._pf.unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                config._pf.unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            config._pf.unusedInput.push(string);\n        }\n\n        // handle am pm\n        if (config._isPm && config._a[HOUR] < 12) {\n            config._a[HOUR] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config._isPm === false && config._a[HOUR] === 12) {\n            config._a[HOUR] = 0;\n        }\n\n        dateFromConfig(config);\n        checkOverflow(config);\n    }\n\n    function unescapeFormat(s) {\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        });\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function regexpEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            config._pf.invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = extend({}, config);\n            initializeParsingFlags(tempConfig);\n            tempConfig._f = config._f[i];\n            makeDateFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += tempConfig._pf.charsLeftOver;\n\n            //or tokens\n            currentScore += tempConfig._pf.unusedTokens.length * 10;\n\n            tempConfig._pf.score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    // date from iso format\n    function makeDateFromString(config) {\n        var i,\n            string = config._i,\n            match = isoRegex.exec(string);\n\n        if (match) {\n            config._pf.iso = true;\n            for (i = 4; i > 0; i--) {\n                if (match[i]) {\n                    // match[5] should be \"T\" or undefined\n                    config._f = isoDates[i - 1] + (match[6] || \" \");\n                    break;\n                }\n            }\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (parseTokenTimezone.exec(string)) {\n                config._f += \"Z\";\n            }\n            makeDateFromStringAndFormat(config);\n        }\n        else {\n            config._d = new Date(string);\n        }\n    }\n\n    function makeDateFromInput(config) {\n        var input = config._i,\n            matched = aspNetJsonRegex.exec(input);\n\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (matched) {\n            config._d = new Date(+matched[1]);\n        } else if (typeof input === 'string') {\n            makeDateFromString(config);\n        } else if (isArray(input)) {\n            config._a = input.slice(0);\n            dateFromConfig(config);\n        } else if (isDate(input)) {\n            config._d = new Date(+input);\n        } else if (typeof(input) === 'object') {\n            dateFromObject(config);\n        } else {\n            config._d = new Date(input);\n        }\n    }\n\n    function makeDate(y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor doesn't accept years < 1970\n        if (y < 1970) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function makeUTCDate(y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n        if (y < 1970) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    function parseWeekday(input, language) {\n        if (typeof input === 'string') {\n            if (!isNaN(input)) {\n                input = parseInt(input, 10);\n            }\n            else {\n                input = language.weekdaysParse(input);\n                if (typeof input !== 'number') {\n                    return null;\n                }\n            }\n        }\n        return input;\n    }\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Week of Year\n    ************************************/\n\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment;\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);\n        return {\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),\n            year: adjustedMoment.year()\n        };\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {\n        var d = new Date(Date.UTC(year, 0)).getUTCDay(),\n            daysToAdd, dayOfYear;\n\n        weekday = weekday != null ? weekday : firstDayOfWeek;\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0);\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;\n\n        return {\n            year: dayOfYear > 0 ? year : year - 1,\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear\n        };\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    function makeMoment(config) {\n        var input = config._i,\n            format = config._f;\n\n        if (typeof config._pf === 'undefined') {\n            initializeParsingFlags(config);\n        }\n\n        if (input === null) {\n            return moment.invalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = getLangDefinition().preparse(input);\n        }\n\n        if (moment.isMoment(input)) {\n            config = extend({}, input);\n\n            config._d = new Date(+input._d);\n        } else if (format) {\n            if (isArray(format)) {\n                makeDateFromStringAndArray(config);\n            } else {\n                makeDateFromStringAndFormat(config);\n            }\n        } else {\n            makeDateFromInput(config);\n        }\n\n        return new Moment(config);\n    }\n\n    moment = function (input, format, lang, strict) {\n        if (typeof(lang) === \"boolean\") {\n            strict = lang;\n            lang = undefined;\n        }\n        return makeMoment({\n            _i : input,\n            _f : format,\n            _l : lang,\n            _strict : strict,\n            _isUTC : false\n        });\n    };\n\n    // creating with utc\n    moment.utc = function (input, format, lang, strict) {\n        var m;\n\n        if (typeof(lang) === \"boolean\") {\n            strict = lang;\n            lang = undefined;\n        }\n        m = makeMoment({\n            _useUTC : true,\n            _isUTC : true,\n            _l : lang,\n            _i : input,\n            _f : format,\n            _strict : strict\n        }).utc();\n\n        return m;\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._input : (isNumber ? {} : input)),\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            parseIso,\n            timeEmpty,\n            dateTimeEmpty;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {\n            sign = (match[1] === \"-\") ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoDurationRegex.exec(input))) {\n            sign = (match[1] === \"-\") ? -1 : 1;\n            parseIso = function (inp) {\n                // We'd normally use ~~inp for this, but unfortunately it also\n                // converts floats to ints.\n                // inp may be undefined, so careful calling replace on it.\n                var res = inp && parseFloat(inp.replace(',', '.'));\n                // apply sign while we're at it\n                return (isNaN(res) ? 0 : res) * sign;\n            };\n            duration = {\n                y: parseIso(match[2]),\n                M: parseIso(match[3]),\n                d: parseIso(match[4]),\n                h: parseIso(match[5]),\n                m: parseIso(match[6]),\n                s: parseIso(match[7]),\n                w: parseIso(match[8])\n            };\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration && input.hasOwnProperty('_lang')) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    moment.updateOffset = function () {};\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var r;\n        if (!key) {\n            return moment.fn._lang._abbr;\n        }\n        if (values) {\n            loadLang(normalizeLanguage(key), values);\n        } else if (values === null) {\n            unloadLang(key);\n            key = 'en';\n        } else if (!languages[key]) {\n            getLangDefinition(key);\n        }\n        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);\n        return r._abbr;\n    };\n\n    // returns language data\n    moment.langData = function (key) {\n        if (key && key._lang && key._lang._abbr) {\n            key = key._lang._abbr;\n        }\n        return getLangDefinition(key);\n    };\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    for (i = lists.length - 1; i >= 0; --i) {\n        makeList(lists[i]);\n    }\n\n    moment.normalizeUnits = function (units) {\n        return normalizeUnits(units);\n    };\n\n    moment.invalid = function (flags) {\n        var m = moment.utc(NaN);\n        if (flags != null) {\n            extend(m._pf, flags);\n        }\n        else {\n            m._pf.userInvalidated = true;\n        }\n\n        return m;\n    };\n\n    moment.parseZone = function (input) {\n        return moment(input).parseZone();\n    };\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    extend(moment.fn = Moment.prototype, {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d + ((this._offset || 0) * 60000);\n        },\n\n        unix : function () {\n            return Math.floor(+this / 1000);\n        },\n\n        toString : function () {\n            return this.clone().lang('en').format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n        },\n\n        toDate : function () {\n            return this._offset ? new Date(+this) : this._d;\n        },\n\n        toISOString : function () {\n            return formatMoment(moment(this).utc(), 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds()\n            ];\n        },\n\n        isValid : function () {\n            return isValid(this);\n        },\n\n        isDSTShifted : function () {\n\n            if (this._a) {\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }\n\n            return false;\n        },\n\n        parsingFlags : function () {\n            return extend({}, this._pf);\n        },\n\n        invalidAt: function () {\n            return this._pf.overflow;\n        },\n\n        utc : function () {\n            return this.zone(0);\n        },\n\n        local : function () {\n            this.zone(0);\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            var output = formatMoment(this, inputString || moment.defaultFormat);\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            var dur;\n            // switch args to support add('s', 1) and add(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur;\n            // switch args to support subtract('s', 1) and subtract(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, units, asFloat) {\n            var that = this._isUTC ? moment(input).zone(this._offset || 0) : moment(input).local(),\n                zoneDiff = (this.zone() - that.zone()) * 6e4,\n                diff, output;\n\n            units = normalizeUnits(units);\n\n            if (units === 'year' || units === 'month') {\n                // average number of days in the months in the given dates\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2\n                // difference in months\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());\n                // adjust by taking difference in days, average number of days\n                // and dst in the given months.\n                output += ((this - moment(this).startOf('month')) -\n                        (that - moment(that).startOf('month'))) / diff;\n                // same as above but with zones, to negate all dst\n                output -= ((this.zone() - moment(this).startOf('month').zone()) -\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;\n                if (units === 'year') {\n                    output = output / 12;\n                }\n            } else {\n                diff = (this - that);\n                output = units === 'second' ? diff / 1e3 : // 1000\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                    diff;\n            }\n            return asFloat ? output : absRound(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().zone(this.zone()).startOf('day'), 'days', true),\n                format = diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n            return this.format(this.lang().calendar(format, this));\n        },\n\n        isLeapYear : function () {\n            return isLeapYear(this.year());\n        },\n\n        isDST : function () {\n            return (this.zone() < this.clone().month(0).zone() ||\n                this.zone() < this.clone().month(5).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            if (input != null) {\n                input = parseWeekday(input, this.lang());\n                return this.add({ d : input - day });\n            } else {\n                return day;\n            }\n        },\n\n        month : function (input) {\n            var utc = this._isUTC ? 'UTC' : '',\n                dayOfMonth;\n\n            if (input != null) {\n                if (typeof input === 'string') {\n                    input = this.lang().monthsParse(input);\n                    if (typeof input !== 'number') {\n                        return this;\n                    }\n                }\n\n                dayOfMonth = this.date();\n                this.date(1);\n                this._d['set' + utc + 'Month'](input);\n                this.date(Math.min(dayOfMonth, this.daysInMonth()));\n\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + 'Month']();\n            }\n        },\n\n        startOf: function (units) {\n            units = normalizeUnits(units);\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n\n            // weeks are a special case\n            if (units === 'week') {\n                this.weekday(0);\n            } else if (units === 'isoWeek') {\n                this.isoWeekday(1);\n            }\n\n            return this;\n        },\n\n        endOf: function (units) {\n            units = normalizeUnits(units);\n            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);\n        },\n\n        isAfter: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) > +moment(input).startOf(units);\n        },\n\n        isBefore: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) < +moment(input).startOf(units);\n        },\n\n        isSame: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) === +moment(input).startOf(units);\n        },\n\n        min: function (other) {\n            other = moment.apply(null, arguments);\n            return other < this ? this : other;\n        },\n\n        max: function (other) {\n            other = moment.apply(null, arguments);\n            return other > this ? this : other;\n        },\n\n        zone : function (input) {\n            var offset = this._offset || 0;\n            if (input != null) {\n                if (typeof input === \"string\") {\n                    input = timezoneMinutesFromString(input);\n                }\n                if (Math.abs(input) < 16) {\n                    input = input * 60;\n                }\n                this._offset = input;\n                this._isUTC = true;\n                if (offset !== input) {\n                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);\n                }\n            } else {\n                return this._isUTC ? offset : this._d.getTimezoneOffset();\n            }\n            return this;\n        },\n\n        zoneAbbr : function () {\n            return this._isUTC ? \"UTC\" : \"\";\n        },\n\n        zoneName : function () {\n            return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n        },\n\n        parseZone : function () {\n            if (typeof this._i === 'string') {\n                this.zone(this._i);\n            }\n            return this;\n        },\n\n        hasAlignedHourOffset : function (input) {\n            if (!input) {\n                input = 0;\n            }\n            else {\n                input = moment(input).zone();\n            }\n\n            return (this.zone() - input) % 60 === 0;\n        },\n\n        daysInMonth : function () {\n            return daysInMonth(this.year(), this.month());\n        },\n\n        dayOfYear : function (input) {\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add(\"d\", (input - dayOfYear));\n        },\n\n        weekYear : function (input) {\n            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        isoWeekYear : function (input) {\n            var year = weekOfYear(this, 1, 4).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        week : function (input) {\n            var week = this.lang().week(this);\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        isoWeek : function (input) {\n            var week = weekOfYear(this, 1, 4).week;\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        weekday : function (input) {\n            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;\n            return input == null ? weekday : this.add(\"d\", input - weekday);\n        },\n\n        isoWeekday : function (input) {\n            // behaves the same as moment#day except\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n            // as a setter, sunday should belong to the previous week.\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units]();\n        },\n\n        set : function (units, value) {\n            units = normalizeUnits(units);\n            if (typeof this[units] === 'function') {\n                this[units](value);\n            }\n            return this;\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (key) {\n            if (key === undefined) {\n                return this._lang;\n            } else {\n                this._lang = getLangDefinition(key);\n                return this;\n            }\n        }\n    });\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = moment.fn[name + 's'] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n    // add plural methods\n    moment.fn.days = moment.fn.day;\n    moment.fn.months = moment.fn.month;\n    moment.fn.weeks = moment.fn.week;\n    moment.fn.isoWeeks = moment.fn.isoWeek;\n\n    // add aliased format methods\n    moment.fn.toJSON = moment.fn.toISOString;\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    extend(moment.duration.fn = Duration.prototype, {\n\n        _bubble : function () {\n            var milliseconds = this._milliseconds,\n                days = this._days,\n                months = this._months,\n                data = this._data,\n                seconds, minutes, hours, years;\n\n            // The following code bubbles up values, see the tests for\n            // examples of what that means.\n            data.milliseconds = milliseconds % 1000;\n\n            seconds = absRound(milliseconds / 1000);\n            data.seconds = seconds % 60;\n\n            minutes = absRound(seconds / 60);\n            data.minutes = minutes % 60;\n\n            hours = absRound(minutes / 60);\n            data.hours = hours % 24;\n\n            days += absRound(hours / 24);\n            data.days = days % 30;\n\n            months += absRound(days / 30);\n            data.months = months % 12;\n\n            years = absRound(months / 12);\n            data.years = years;\n        },\n\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              (this._months % 12) * 2592e6 +\n              toInt(this._months / 12) * 31536e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                output = relativeTime(difference, !withSuffix, this.lang());\n\n            if (withSuffix) {\n                output = this.lang().pastFuture(difference, output);\n            }\n\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            // supports only 2.0-style add(1, 's') or add(moment)\n            var dur = moment.duration(input, val);\n\n            this._milliseconds += dur._milliseconds;\n            this._days += dur._days;\n            this._months += dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = moment.duration(input, val);\n\n            this._milliseconds -= dur._milliseconds;\n            this._days -= dur._days;\n            this._months -= dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units.toLowerCase() + 's']();\n        },\n\n        as : function (units) {\n            units = normalizeUnits(units);\n            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();\n        },\n\n        lang : moment.fn.lang,\n\n        toIsoString : function () {\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n            var years = Math.abs(this.years()),\n                months = Math.abs(this.months()),\n                days = Math.abs(this.days()),\n                hours = Math.abs(this.hours()),\n                minutes = Math.abs(this.minutes()),\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);\n\n            if (!this.asSeconds()) {\n                // this is the same as C#'s (Noda) and python (isodate)...\n                // but not other JS (goog.date)\n                return 'P0D';\n            }\n\n            return (this.asSeconds() < 0 ? '-' : '') +\n                'P' +\n                (years ? years + 'Y' : '') +\n                (months ? months + 'M' : '') +\n                (days ? days + 'D' : '') +\n                ((hours || minutes || seconds) ? 'T' : '') +\n                (hours ? hours + 'H' : '') +\n                (minutes ? minutes + 'M' : '') +\n                (seconds ? seconds + 'S' : '');\n        }\n    });\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n    moment.duration.fn.asMonths = function () {\n        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;\n    };\n\n\n    /************************************\n        Default Lang\n    ************************************/\n\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    /* EMBED_LANGUAGES */\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n    function makeGlobal(deprecate) {\n        var warned = false, local_moment = moment;\n        /*global ender:false */\n        if (typeof ender !== 'undefined') {\n            return;\n        }\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        if (deprecate) {\n            this.moment = function () {\n                if (!warned && console && console.warn) {\n                    warned = true;\n                    console.warn(\n                            \"Accessing Moment through the global scope is \" +\n                            \"deprecated, and will be removed in an upcoming \" +\n                            \"release.\");\n                }\n                return local_moment.apply(null, arguments);\n            };\n        } else {\n            this['moment'] = moment;\n        }\n    }\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n        makeGlobal(true);\n    } else if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", ['require','exports','module'],function (require, exports, module) {\n            if (module.config().noGlobal !== true) {\n                // If user provided noGlobal, he is aware of global\n                makeGlobal(module.config().noGlobal === undefined);\n            }\n\n            return moment;\n        });\n    } else {\n        makeGlobal();\n    }\n}).call(this);\n","\n// dropbox-datastores-1.0.0.js\n!function(){var t,e,r,n,i,o,s,a,u,l,h,c,p,d,f,_,y,g,m,v,w,b,S,D,E,A,x,O,U,T,C,k,I,R,P,L,N,F,z,j,B,M,X,H,V,q,J,G,W,K,$,Z,Q,Y,te,ee,re,ne,ie,oe,se={}.hasOwnProperty,ae=[].indexOf||function(t){for(var e=0,r=this.length;r>e;e++)if(e in this&&this[e]===t)return e;return-1},ue=function(t,e){function r(){this.constructor=t}for(var n in e)se.call(e,n)&&(t[n]=e[n]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},le=[].slice;if(x=function(){function t(){}return t}(),x.Util=function(){function t(){}return t}(),x.Http=function(){function t(){}return t}(),x.File=function(){function t(){}return t}(),u=\"1.0.0\",\"undefined\"!=typeof global&&\"undefined\"!=typeof module&&\"exports\"in module)f=global,_=module.require.bind(module),module.exports=x;else if(\"undefined\"!=typeof window&&\"undefined\"!=typeof navigator)f=window,_=null,window.Dropbox&&function(){var t,e,r,n;r=window.Dropbox,n=[];for(t in r)se.call(r,t)&&(e=r[t],n.push(x[t]=e));return n}(),window.Dropbox=x;else{if(\"undefined\"==typeof self||\"undefined\"==typeof navigator)throw new Error(\"dropbox.js loaded in an unsupported JavaScript environment.\");f=self,_=self.importScripts.bind(self),self.Dropbox=x}if(x.Env=function(){function t(){}return t.global=f,t.require=_,t}(),x.Util.EventSource=function(){function t(t){this._cancelable=t&&t.cancelable,this._listeners=[]}return t.prototype.addListener=function(t){if(\"function\"!=typeof t)throw new TypeError(\"Invalid listener type; expected function\");return ae.call(this._listeners,t)<0&&this._listeners.push(t),this},t.prototype.removeListener=function(t){var e,r,n,i,o,s;if(this._listeners.indexOf)r=this._listeners.indexOf(t),-1!==r&&this._listeners.splice(r,1);else for(s=this._listeners,e=i=0,o=s.length;o>i;e=++i)if(n=s[e],n===t){this._listeners.splice(e,1);break}return this},t.prototype.dispatch=function(t){var e,r,n,i,o;for(o=this._listeners,n=0,i=o.length;i>n;n++)if(e=o[n],r=e(t),this._cancelable&&r===!1)return!1;return!0},t}(),x.AccountInfo=function(){function t(t){var e;this._json=t,this.name=t.display_name,this.email=t.email,this.countryCode=t.country||null,this.uid=t.uid.toString(),t.public_app_url?(this.publicAppUrl=t.public_app_url,e=this.publicAppUrl.length-1,e>=0&&\"/\"===this.publicAppUrl.substring(e)&&(this.publicAppUrl=this.publicAppUrl.substring(0,e))):this.publicAppUrl=null,this.referralUrl=t.referral_link,this.quota=t.quota_info.quota,this.privateBytes=t.quota_info.normal||0,this.sharedBytes=t.quota_info.shared||0,this.usedQuota=this.privateBytes+this.sharedBytes}return t.parse=function(t){return t&&\"object\"==typeof t?new x.AccountInfo(t):t},t.prototype.name=null,t.prototype.email=null,t.prototype.countryCode=null,t.prototype.uid=null,t.prototype.referralUrl=null,t.prototype.publicAppUrl=null,t.prototype.quota=null,t.prototype.usedQuota=null,t.prototype.privateBytes=null,t.prototype.sharedBytes=null,t.prototype.json=function(){return this._json},t}(),x.ApiError=function(){function t(t,e,r){var n,i;if(this.method=e,this.url=r,this.status=t.status,t.responseType)try{n=t.response||t.responseText}catch(o){i=o;try{n=t.responseText}catch(o){i=o,n=null}}else try{n=t.responseText}catch(o){i=o,n=null}if(n)try{this.responseText=n.toString(),this.response=JSON.parse(n)}catch(o){i=o,this.response=null}else this.responseText=\"(no response)\",this.response=null}return t.prototype.status=null,t.prototype.method=null,t.prototype.url=null,t.prototype.responseText=null,t.prototype.response=null,t.NETWORK_ERROR=0,t.NO_CONTENT=304,t.INVALID_PARAM=400,t.INVALID_TOKEN=401,t.OAUTH_ERROR=403,t.NOT_FOUND=404,t.INVALID_METHOD=405,t.NOT_ACCEPTABLE=406,t.CONFLICT=409,t.RATE_LIMITED=429,t.SERVER_ERROR=503,t.OVER_QUOTA=507,t.prototype.toString=function(){return\"Dropbox API error \"+this.status+\" from \"+this.method+\" \"+this.url+\" :: \"+this.responseText},t.prototype.inspect=function(){return this.toString()},t}(),x.AuthDriver=function(){function t(){}return t.prototype.authType=function(){return\"code\"},t.prototype.url=function(){return\"https://some.url\"},t.prototype.doAuthorize=function(t,e,r,n){return n({code:\"access-code\"})},t.prototype.getStateParam=function(t,e){return e(x.Util.Oauth.randomAuthStateParam())},t.prototype.resumeAuthorize=function(t,e,r){return r({code:\"access-code\"})},t.prototype.onAuthStateChange=function(t,e){return e()},t.oauthQueryParams=[\"access_token\",\"expires_in\",\"scope\",\"token_type\",\"code\",\"error\",\"error_description\",\"error_uri\",\"mac_key\",\"mac_algorithm\"].sort(),t}(),x.AuthDriver.autoConfigure=function(t){if(\"undefined\"!=typeof chrome&&(chrome.extension||chrome.app&&chrome.app.runtime))return t.authDriver(new x.AuthDriver.Chrome),void 0;if(\"undefined\"!=typeof window){if(window.cordova)return t.authDriver(new x.AuthDriver.Cordova),void 0;window&&window.navigator&&t.authDriver(new x.AuthDriver.Redirect)}},x.AuthDriver.BrowserBase=function(){function t(t){t?(this.rememberUser=\"rememberUser\"in t?t.rememberUser:!0,this.scope=t.scope||\"default\"):(this.rememberUser=!0,this.scope=\"default\"),this.storageKey=null,this.stateRe=/^[^#]+\\#(.*&)?state=([^&]+)(&|$)/}return t.prototype.authType=function(){return\"token\"},t.prototype.onAuthStepChange=function(t,e){var r=this;switch(this.setStorageKey(t),t.authStep){case x.Client.RESET:return this.loadCredentials(function(n){return n?(t.setCredentials(n),t.authStep!==x.Client.DONE?e():r.rememberUser?(t.setCredentials(n),t.getAccountInfo(function(n){return n&&n.status===x.ApiError.INVALID_TOKEN?(t.reset(),r.forgetCredentials(e)):e()})):r.forgetCredentials(e)):e()});case x.Client.DONE:return this.rememberUser?this.storeCredentials(t.credentials(),e):this.forgetCredentials(e);case x.Client.SIGNED_OUT:return this.forgetCredentials(e);case x.Client.ERROR:return this.forgetCredentials(e);default:return e(),this}},t.prototype.setStorageKey=function(t){return this.storageKey=\"dropbox-auth:\"+this.scope+\":\"+t.appHash(),this},t.prototype.storeCredentials=function(t,e){return localStorage.setItem(this.storageKey,JSON.stringify(t)),e(),this},t.prototype.loadCredentials=function(t){var e,r;if(r=localStorage.getItem(this.storageKey),!r)return t(null),this;try{t(JSON.parse(r))}catch(n){e=n,t(null)}return this},t.prototype.forgetCredentials=function(t){return localStorage.removeItem(this.storageKey),t(),this},t.prototype.locationStateParam=function(t){var e,r;return e=t||x.AuthDriver.BrowserBase.currentLocation(),r=this.stateRe.exec(e),r?decodeURIComponent(r[2]):null},t.prototype.replaceUrlBasename=function(t,e){var r,n,i;return n=t.indexOf(\"#\"),-1!==n&&(t=t.substring(0,n)),i=t.indexOf(\"?\"),-1!==i&&(t=t.substring(0,i)),r=t.split(\"/\"),r[r.length-1]=e,r.join(\"/\")},t.currentLocation=function(){return window.location.href},t.cleanupLocation=function(){var t,e;window.history&&window.history.replaceState?(e=this.currentLocation(),t=e.indexOf(\"#\"),window.history.replaceState({},document.title,e.substring(0,t))):window.location.hash=\"\"},t}(),x.AuthDriver.Redirect=function(t){function e(t){e.__super__.constructor.call(this,t),this.receiverUrl=this.baseUrl(t)}return ue(e,t),e.prototype.baseUrl=function(t){var e,r;if(r=x.AuthDriver.BrowserBase.currentLocation(),t){if(t.redirectUrl)return t.redirectUrl;if(t.redirectFile)return this.replaceUrlBasename(r,t.redirectFile)}return e=r.indexOf(\"#\"),-1!==e&&(r=r.substring(0,e)),r},e.prototype.url=function(){return this.receiverUrl},e.prototype.doAuthorize=function(t,e,r){return this.storeCredentials(r.credentials(),function(){return window.location.assign(t)})},e.prototype.resumeAuthorize=function(t,e,r){var n;return this.locationStateParam()===t?(n=x.AuthDriver.BrowserBase.currentLocation(),x.AuthDriver.BrowserBase.cleanupLocation(),r(x.Util.Oauth.queryParamsFromUrl(n))):this.forgetCredentials(function(){return r({error:\"Authorization error\"})})},e}(x.AuthDriver.BrowserBase),x.AuthDriver.Popup=function(t){function e(t){e.__super__.constructor.call(this,t),this.receiverUrl=this.baseUrl(t)}return ue(e,t),e.prototype.url=function(){return this.receiverUrl},e.prototype.doAuthorize=function(t,e,r,n){return this.listenForMessage(e,n),this.openWindow(t)},e.prototype.baseUrl=function(t){var e;if(e=x.AuthDriver.BrowserBase.currentLocation(),t){if(t.receiverUrl)return t.receiverUrl;if(t.receiverFile)return this.replaceUrlBasename(e,t.receiverFile)}return e},e.prototype.openWindow=function(t){return window.open(t,\"_dropboxOauthSigninWindow\",this.popupWindowSpec(980,700))},e.prototype.popupWindowSpec=function(t,e){var r,n,i,o,s,a,u,l,h,c;return s=null!=(u=window.screenX)?u:window.screenLeft,a=null!=(l=window.screenY)?l:window.screenTop,o=null!=(h=window.outerWidth)?h:document.documentElement.clientWidth,r=null!=(c=window.outerHeight)?c:document.documentElement.clientHeight,n=Math.round(s+(o-t)/2),i=Math.round(a+(r-e)/2.5),s>n&&(n=s),a>i&&(i=a),\"width=\"+t+\",height=\"+e+\",\"+(\"left=\"+n+\",top=\"+i)+\"dialog=yes,dependent=yes,scrollbars=yes,location=yes\"},e.prototype.listenForMessage=function(t,e){var r,n=this;return r=function(i){var o,s,a;o=i.data?i.data:i;try{a=JSON.parse(o)._dropboxjs_oauth_info}catch(u){return s=u,void 0}if(a)return n.locationStateParam(a)===t?(t=!1,window.removeEventListener(\"message\",r),x.AuthDriver.Popup.onMessage.removeListener(r),e(x.Util.Oauth.queryParamsFromUrl(o))):void 0},window.addEventListener(\"message\",r,!1),x.AuthDriver.Popup.onMessage.addListener(r)},e.locationOrigin=function(t){var e;return(e=/^(file:\\/\\/[^\\?\\#]*)(\\?|\\#|$)/.exec(t))?e[1]:(e=/^([^\\:]+\\:\\/\\/[^\\/\\?\\#]*)(\\/|\\?|\\#|$)/.exec(t),e?e[1]:t)},e.oauthReceiver=function(){window.addEventListener(\"load\",function(){var t,e,r,n,i,o;if(o=window.location.href,r=JSON.stringify({_dropboxjs_oauth_info:o}),x.AuthDriver.BrowserBase.cleanupLocation(),n=window.opener,window.parent!==window.top&&(n||(n=window.parent)),n){try{i=window.location.origin||locationOrigin(o),n.postMessage(r,i),window.close()}catch(s){e=s}try{return n.Dropbox.AuthDriver.Popup.onMessage.dispatch(r),window.close()}catch(s){t=s}}})},e.onMessage=new x.Util.EventSource,e}(x.AuthDriver.BrowserBase),c=null,p=null,\"undefined\"!=typeof chrome&&null!==chrome&&(chrome.runtime&&(chrome.runtime.onMessage&&(c=chrome.runtime.onMessage),chrome.runtime.sendMessage&&(p=chrome.runtime.sendMessage.bind(chrome.runtime))),chrome.extension&&(chrome.extension.onMessage&&(c||(c=chrome.extension.onMessage)),chrome.extension.sendMessage&&(p||(p=chrome.extension.sendMessage.bind(chrome.extension))))),x.AuthDriver.Chrome=function(t){function e(t){var r;e.__super__.constructor.call(this,t),r=t&&t.receiverPath||\"chrome_oauth_receiver.html\",this.useQuery=!0,this.receiverUrl=this.expandUrl(r),this.storageKey=\"dropbox_js_\"+this.scope+\"_credentials\"}return ue(e,t),e.prototype.onMessage=c,e.prototype.sendMessage=p,e.prototype.expandUrl=function(t){return chrome.runtime&&chrome.runtime.getURL?chrome.runtime.getURL(t):chrome.extension&&chrome.extension.getURL?chrome.extension.getURL(t):t},e.prototype.onAuthStepChange=function(t,e){var r=this;switch(t.authStep){case x.Client.RESET:return this.loadCredentials(function(n){if(n){if(n.authStep)return r.forgetCredentials(e);t.setCredentials(n)}return e()});case x.Client.DONE:return this.storeCredentials(t.credentials(),e);case x.Client.SIGNED_OUT:return this.forgetCredentials(e);case x.Client.ERROR:return this.forgetCredentials(e);default:return e()}},e.prototype.doAuthorize=function(t,e,r,n){var i,o,s,a,u=this;return(null!=(o=chrome.identity)?o.launchWebAuthFlow:void 0)?chrome.identity.launchWebAuthFlow({url:t,interactive:!0},function(t){return u.locationStateParam(t)===e?(e=!1,n(x.Util.Oauth.queryParamsFromUrl(t))):void 0}):(null!=(s=chrome.experimental)?null!=(a=s.identity)?a.launchWebAuthFlow:void 0:void 0)?chrome.experimental.identity.launchWebAuthFlow({url:t,interactive:!0},function(t){return u.locationStateParam(t)===e?(e=!1,n(x.Util.Oauth.queryParamsFromUrl(t))):void 0}):(i={handle:null},this.listenForMessage(e,i,n),this.openWindow(t,function(t){return i.handle=t}))},e.prototype.openWindow=function(t,e){return chrome.tabs&&chrome.tabs.create?(chrome.tabs.create({url:t,active:!0,pinned:!1},function(t){return e(t)}),this):this},e.prototype.closeWindow=function(t){return chrome.tabs&&chrome.tabs.remove&&t.id?(chrome.tabs.remove(t.id),this):chrome.app&&chrome.app.window&&t.close?(t.close(),this):this},e.prototype.url=function(){return this.receiverUrl},e.prototype.listenForMessage=function(t,e,r){var n,i=this;return n=function(o,s){var a;if((!s||!s.tab||s.tab.url.substring(0,i.receiverUrl.length)===i.receiverUrl)&&o.dropbox_oauth_receiver_href)return a=o.dropbox_oauth_receiver_href,i.locationStateParam(a)===t?(t=!1,e.handle&&i.closeWindow(e.handle),i.onMessage.removeListener(n),r(x.Util.Oauth.queryParamsFromUrl(a))):void 0},this.onMessage.addListener(n)},e.prototype.storeCredentials=function(t,e){var r;return r={},r[this.storageKey]=t,chrome.storage.local.set(r,e),this},e.prototype.loadCredentials=function(t){var e=this;return chrome.storage.local.get(this.storageKey,function(r){return t(r[e.storageKey]||null)}),this},e.prototype.forgetCredentials=function(t){return chrome.storage.local.remove(this.storageKey,t),this},e.oauthReceiver=function(){return window.addEventListener(\"load\",function(){var t,e;return t=new x.AuthDriver.Chrome,e=window.location.href,window.location.hash=\"\",t.sendMessage({dropbox_oauth_receiver_href:e}),window.close?window.close():void 0})},e}(x.AuthDriver.BrowserBase),x.AuthDriver.Cordova=function(t){function e(t){e.__super__.constructor.call(this,t)}return ue(e,t),e.prototype.url=function(){return\"https://www.dropbox.com/1/oauth2/redirect_receiver\"},e.prototype.doAuthorize=function(t,e,r,n){var i,o,s,a,u,l=this;return o=window.open(t,\"_blank\",\"location=yes,closebuttoncaption=Cancel\"),a=!1,i=/^[^/]*\\/\\/[^/]*\\//.exec(t)[0],u=!1,s=function(t){if(t.url&&l.locationStateParam(t.url)===e){if(u)return;return o.removeEventListener(\"loadstart\",s),o.removeEventListener(\"loaderror\",s),o.removeEventListener(\"loadstop\",s),o.removeEventListener(\"exit\",s),u=!0,window.setTimeout(function(){return o.close()},10),n(x.Util.Oauth.queryParamsFromUrl(t.url)),void 0}if(\"exit\"===t.type){if(u)return;o.removeEventListener(\"loadstart\",s),o.removeEventListener(\"loaderror\",s),o.removeEventListener(\"loadstop\",s),o.removeEventListener(\"exit\",s),u=!0,n(new AuthError(\"error=access_denied&error_description=User+closed+browser+window\"))}},o.addEventListener(\"loadstart\",s),o.addEventListener(\"loaderror\",s),o.addEventListener(\"loadstop\",s),o.addEventListener(\"exit\",s)},e}(x.AuthDriver.BrowserBase),x.AuthDriver.NodeServer=function(){function t(t){this._port=(null!=t?t.port:void 0)||8912,(null!=t?t.tls:void 0)?(this._tlsOptions=t.tls,(\"string\"==typeof this._tlsOptions||this._tlsOptions instanceof Buffer)&&(this._tlsOptions={key:this._tlsOptions,cert:this._tlsOptions})):this._tlsOptions=null,this._fs=x.Env.require(\"fs\"),this._http=x.Env.require(\"http\"),this._https=x.Env.require(\"https\"),this._open=x.Env.require(\"open\"),this._callbacks={},this._nodeUrl=x.Env.require(\"url\"),this.createApp()}return t.prototype.authType=function(){return\"code\"},t.prototype.url=function(){var t;return t=null===this._tlsOptions?\"http\":\"https\",\"\"+t+\"://localhost:\"+this._port+\"/oauth_callback\"},t.prototype.doAuthorize=function(t,e,r,n){return this._callbacks[e]=n,this.openBrowser(t)},t.prototype.openBrowser=function(t){if(!t.match(/^https?:\\/\\//))throw new Error(\"Not a http/https URL: \"+t);return\"BROWSER\"in process.env?this._open(t,process.env.BROWSER):this._open(t)},t.prototype.createApp=function(){var t=this;return this._app=this._tlsOptions?this._https.createServer(this._tlsOptions,function(e,r){return t.doRequest(e,r)}):this._http.createServer(function(e,r){return t.doRequest(e,r)}),this._app.listen(this._port)},t.prototype.closeServer=function(){return this._app.close()},t.prototype.doRequest=function(t,e){var r,n,i,o=this;return i=this._nodeUrl.parse(t.url,!0),\"/oauth_callback\"===i.pathname&&(n=i.query.state,this._callbacks[n]&&(this._callbacks[n](i.query),delete this._callbacks[n])),r=\"\",t.on(\"data\",function(t){return r+=t}),t.on(\"end\",function(){return o.closeBrowser(e)})},t.prototype.closeBrowser=function(t){var e;return e='<!doctype html>\\n<script type=\"text/javascript\">window.close();</script>\\n<p>Please close this window.</p>',t.writeHead(200,{\"Content-Length\":e.length,\"Content-Type\":\"text/html\"}),t.write(e),t.end()},t}(),x.AuthError=function(){function t(t){var e;if(!t.error)throw new Error(\"Not an OAuth 2.0 error: \"+JSON.stringify(t));e=\"object\"==typeof t.error&&t.error.error?t.error:t,this.code=e.error,this.description=e.error_description||null,this.uri=e.error_uri||null}return t.prototype.code=null,t.prototype.description=null,t.prototype.uri=null,t.ACCESS_DENIED=\"access_denied\",t.INVALID_REQUEST=\"invalid_request\",t.UNAUTHORIZED_CLIENT=\"unauthorized_client\",t.INVALID_GRANT=\"invalid_grant\",t.INVALID_SCOPE=\"invalid_scope\",t.UNSUPPORTED_GRANT_TYPE=\"unsupported_grant_type\",t.UNSUPPORTED_RESPONSE_TYPE=\"unsupported_response_type\",t.SERVER_ERROR=\"server_error\",t.TEMPORARILY_UNAVAILABLE=\"temporarily_unavailable\",t.prototype.toString=function(){return\"Dropbox OAuth error \"+this.code+\" :: \"+this.description},t.prototype.inspect=function(){return this.toString()},t}(),x.Client=function(){function t(t){var e=this;this.serverRoot=t.server||this.defaultServerRoot(),this.maxApiServer=\"maxApiServer\"in t?t.maxApiServer:this.defaultMaxApiServer(),this.authServer=t.authServer||this.defaultAuthServer(),this.fileServer=t.fileServer||this.defaultFileServer(),this.downloadServer=t.downloadServer||this.defaultDownloadServer(),this.onXhr=new x.Util.EventSource({cancelable:!0}),this.onError=new x.Util.EventSource,this.onAuthStepChange=new x.Util.EventSource,this.xhrOnErrorHandler=function(t,r){return e.handleXhrError(t,r)},this.oauth=new x.Util.Oauth(t),this.uid=t.uid||null,this.authStep=this.oauth.step(),this.driver=null,this.filter=null,this.authError=null,this._credentials=null,this._datastoreManager=null,this.setupUrls()}return t.prototype.onXhr=null,t.prototype.onError=null,t.prototype.onAuthStepChange=null,t.prototype.authDriver=function(t){return this.driver=t,this},t.prototype.dropboxUid=function(){return this.uid},t.prototype.credentials=function(){return this._credentials||this.computeCredentials(),this._credentials},t.prototype.authenticate=function(t,e){var r,n,i,o,s,a=this;if(e||\"function\"!=typeof t||(e=t,t=null),r=t&&\"interactive\"in t?t.interactive:!0,!this.driver&&this.authStep!==d.DONE&&(x.AuthDriver.autoConfigure(this),!this.driver))throw new Error(\"OAuth driver auto-configuration failed. Call authDriver.\");if(this.authStep===d.ERROR)throw new Error(\"Client got in an error state. Call reset() to reuse it!\");return o=function(){return a.authStep=a.oauth.step(),a.authStep===d.ERROR&&(a.authError=a.oauth.error()),a._credentials=null,a.onAuthStepChange.dispatch(a),s()},i=function(){return a.authStep=d.ERROR,a._credentials=null,a.onAuthStepChange.dispatch(a),s()},n=null,s=function(){var t;if(n!==a.authStep&&(n=a.authStep,a.driver&&a.driver.onAuthStepChange))return a.driver.onAuthStepChange(a,s),void 0;switch(a.authStep){case d.RESET:return r?(a.driver.getStateParam&&a.driver.getStateParam(function(t){return a.client.authStep===d.RESET&&a.oauth.setAuthStateParam(t),o()}),a.oauth.setAuthStateParam(x.Util.Oauth.randomAuthStateParam()),o()):(e&&e(null,a),void 0);case d.PARAM_SET:return r?(t=a.authorizeUrl(),a.driver.doAuthorize(t,a.oauth.authStateParam(),a,function(t){return a.oauth.processRedirectParams(t),t.uid&&(a.uid=t.uid),o()})):(e&&e(null,a),void 0);case d.PARAM_LOADED:return a.driver.resumeAuthorize?a.driver.resumeAuthorize(a.oauth.authStateParam(),a,function(t){return a.oauth.processRedirectParams(t),t.uid&&(a.uid=t.uid),o()}):(a.oauth.setAuthStateParam(a.oauth.authStateParam()),o(),void 0);case d.AUTHORIZED:return a.getAccessToken(function(t,e){return t?(a.authError=t,i()):(a.oauth.processRedirectParams(e),a.uid=e.uid,o())});case d.DONE:e&&e(null,a);break;case d.SIGNED_OUT:return a.authStep=d.RESET,a.reset(),s();case d.ERROR:e&&e(a.authError,a)}},s(),this},t.prototype.isAuthenticated=function(){return this.authStep===d.DONE},t.prototype.signOut=function(t,e){var r,n,i=this;if(e||\"function\"!=typeof t||(e=t,t=null),r=t&&t.mustInvalidate,this.authStep!==d.DONE)throw new Error(\"This client doesn't have a user's token\");return n=new x.Util.Xhr(\"POST\",this.urls.signOut),n.signWithOauth(this.oauth),this.dispatchXhr(n,function(t){if(t)if(t.status===x.ApiError.INVALID_TOKEN)t=null;else if(r)return e&&e(t),void 0;return i.authStep=d.RESET,i.reset(),i.authStep=d.SIGNED_OUT,i.onAuthStepChange.dispatch(i),i.driver&&i.driver.onAuthStepChange?i.driver.onAuthStepChange(i,function(){return e?e(null):void 0}):e?e(null):void 0})},t.prototype.signOff=function(t,e){return this.signOut(t,e)},t.prototype.getAccountInfo=function(t,e){var r,n;return e||\"function\"!=typeof t||(e=t,t=null),r=!1,t&&t.httpCache&&(r=!0),n=new x.Util.Xhr(\"GET\",this.urls.accountInfo),n.signWithOauth(this.oauth,r),this.dispatchXhr(n,function(t,r){return e(t,x.AccountInfo.parse(r),r)})},t.prototype.getUserInfo=function(t,e){return this.getAccountInfo(t,e)},t.prototype.readFile=function(t,e,r){var n,i,o,s,a,u,l;return r||\"function\"!=typeof e||(r=e,e=null),i={},u=\"text\",s=null,n=!1,e&&(e.versionTag?i.rev=e.versionTag:e.rev&&(i.rev=e.rev),e.arrayBuffer?u=\"arraybuffer\":e.blob?u=\"blob\":e.buffer?u=\"buffer\":e.binary&&(u=\"b\"),e.length?(null!=e.start?(a=e.start,o=e.start+e.length-1):(a=\"\",o=e.length),s=\"bytes=\"+a+\"-\"+o):null!=e.start&&(s=\"bytes=\"+e.start+\"-\"),e.httpCache&&(n=!0)),l=new x.Util.Xhr(\"GET\",\"\"+this.urls.getFile+\"/\"+this.urlEncodePath(t)),l.setParams(i).signWithOauth(this.oauth,n),l.setResponseType(u),s&&(s&&l.setHeader(\"Range\",s),l.reportResponseHeaders()),this.dispatchXhr(l,function(t,e,n,i){var o;return o=i?x.Http.RangeInfo.parse(i[\"content-range\"]):null,r(t,e,x.File.Stat.parse(n),o)})},t.prototype.writeFile=function(t,e,r,n){var i;return n||\"function\"!=typeof r||(n=r,r=null),i=x.Util.Xhr.canSendForms&&\"object\"==typeof e,i?this.writeFileUsingForm(t,e,r,n):this.writeFileUsingPut(t,e,r,n)},t.prototype.writeFileUsingForm=function(t,e,r,n){var i,o,s,a;return s=t.lastIndexOf(\"/\"),-1===s?(i=t,t=\"\"):(i=t.substring(s),t=t.substring(0,s)),o={file:i},r&&(r.noOverwrite&&(o.overwrite=\"false\"),r.lastVersionTag?o.parent_rev=r.lastVersionTag:(r.parentRev||r.parent_rev)&&(o.parent_rev=r.parentRev||r.parent_rev)),a=new x.Util.Xhr(\"POST\",\"\"+this.urls.postFile+\"/\"+this.urlEncodePath(t)),a.setParams(o).signWithOauth(this.oauth).setFileField(\"file\",i,e,\"application/octet-stream\"),delete o.file,this.dispatchXhr(a,function(t,e){return n?n(t,x.File.Stat.parse(e)):void 0})},t.prototype.writeFileUsingPut=function(t,e,r,n){var i,o;return i={},r&&(r.noOverwrite&&(i.overwrite=\"false\"),r.lastVersionTag?i.parent_rev=r.lastVersionTag:(r.parentRev||r.parent_rev)&&(i.parent_rev=r.parentRev||r.parent_rev)),o=new x.Util.Xhr(\"POST\",\"\"+this.urls.putFile+\"/\"+this.urlEncodePath(t)),o.setBody(e).setParams(i).signWithOauth(this.oauth),this.dispatchXhr(o,function(t,e){return n?n(t,x.File.Stat.parse(e)):void 0})},t.prototype.resumableUploadStep=function(t,e,r){var n,i;return e?(n={offset:e.offset},e.tag&&(n.upload_id=e.tag)):n={offset:0},i=new x.Util.Xhr(\"POST\",this.urls.chunkedUpload),i.setBody(t).setParams(n).signWithOauth(this.oauth),this.dispatchXhr(i,function(t,e){return t&&t.status===x.ApiError.INVALID_PARAM&&t.response&&t.response.upload_id&&t.response.offset?r(null,x.Http.UploadCursor.parse(t.response)):r(t,x.Http.UploadCursor.parse(e))})},t.prototype.resumableUploadFinish=function(t,e,r,n){var i,o;return n||\"function\"!=typeof r||(n=r,r=null),i={upload_id:e.tag},r&&(r.lastVersionTag?i.parent_rev=r.lastVersionTag:(r.parentRev||r.parent_rev)&&(i.parent_rev=r.parentRev||r.parent_rev),r.noOverwrite&&(i.overwrite=\"false\")),o=new x.Util.Xhr(\"POST\",\"\"+this.urls.commitChunkedUpload+\"/\"+this.urlEncodePath(t)),o.setParams(i).signWithOauth(this.oauth),this.dispatchXhr(o,function(t,e){return n?n(t,x.File.Stat.parse(e)):void 0})},t.prototype.stat=function(t,e,r){var n,i,o;return r||\"function\"!=typeof e||(r=e,e=null),i={},n=!1,e&&(e.versionTag?i.rev=e.versionTag:e.rev&&(i.rev=e.rev),e.contentHash?i.hash=e.contentHash:e.hash&&(i.hash=e.hash),(e.removed||e.deleted)&&(i.include_deleted=\"true\"),e.readDir&&(i.list=\"true\",e.readDir!==!0&&(i.file_limit=e.readDir.toString())),e.cacheHash&&(i.hash=e.cacheHash),e.httpCache&&(n=!0)),i.include_deleted||(i.include_deleted=\"false\"),i.list||(i.list=\"false\"),o=new x.Util.Xhr(\"GET\",\"\"+this.urls.metadata+\"/\"+this.urlEncodePath(t)),o.setParams(i).signWithOauth(this.oauth,n),this.dispatchXhr(o,function(t,e){var n,i,o;return o=x.File.Stat.parse(e),n=(null!=e?e.contents:void 0)?function(){var t,r,n,o;for(n=e.contents,o=[],t=0,r=n.length;r>t;t++)i=n[t],o.push(x.File.Stat.parse(i));return o}():void 0,r(t,o,n)})},t.prototype.readdir=function(t,e,r){var n;return r||\"function\"!=typeof e||(r=e,e=null),n={readDir:!0},e&&(null!=e.limit&&(n.readDir=e.limit),e.versionTag?n.versionTag=e.versionTag:e.rev&&(n.versionTag=e.rev),e.contentHash?n.contentHash=e.contentHash:e.hash&&(n.contentHash=e.hash),(e.removed||e.deleted)&&(n.removed=e.removed||e.deleted),e.httpCache&&(n.httpCache=e.httpCache)),this.stat(t,n,function(t,e,n){var i,o;return i=n?function(){var t,e,r;for(r=[],t=0,e=n.length;e>t;t++)o=n[t],r.push(o.name);return r}():null,r(t,i,e,n)})},t.prototype.metadata=function(t,e,r){return this.stat(t,e,r)},t.prototype.makeUrl=function(t,e,r){var n,i,o,s,a,u=this;return r||\"function\"!=typeof e||(r=e,e=null),i=e&&(e[\"long\"]||e.longUrl||e.downloadHack)?{short_url:\"false\"}:{},t=this.urlEncodePath(t),o=\"\"+this.urls.shares+\"/\"+t,n=!1,s=!1,e&&(e.downloadHack?(n=!0,s=!0):e.download&&(n=!0,o=\"\"+this.urls.media+\"/\"+t)),a=new x.Util.Xhr(\"POST\",o).setParams(i).signWithOauth(this.oauth),this.dispatchXhr(a,function(t,e){return s&&(null!=e?e.url:void 0)&&(e.url=e.url.replace(u.authServer,u.downloadServer)),r(t,x.File.ShareUrl.parse(e,n))})},t.prototype.history=function(t,e,r){var n,i,o;return r||\"function\"!=typeof e||(r=e,e=null),i={},n=!1,e&&(null!=e.limit&&(i.rev_limit=e.limit),e.httpCache&&(n=!0)),o=new x.Util.Xhr(\"GET\",\"\"+this.urls.revisions+\"/\"+this.urlEncodePath(t)),o.setParams(i).signWithOauth(this.oauth,n),this.dispatchXhr(o,function(t,e){var n,i;return i=e?function(){var t,r,i;for(i=[],t=0,r=e.length;r>t;t++)n=e[t],i.push(x.File.Stat.parse(n));return i}():void 0,r(t,i)})},t.prototype.revisions=function(t,e,r){return this.history(t,e,r)},t.prototype.thumbnailUrl=function(t,e){var r;return r=this.thumbnailXhr(t,e),r.paramsToUrl().url},t.prototype.readThumbnail=function(t,e,r){var n,i;return r||\"function\"!=typeof e||(r=e,e=null),n=\"b\",e&&(e.blob&&(n=\"blob\"),e.arrayBuffer&&(n=\"arraybuffer\"),e.buffer&&(n=\"buffer\")),i=this.thumbnailXhr(t,e),i.setResponseType(n),this.dispatchXhr(i,function(t,e,n){return r(t,e,x.File.Stat.parse(n))})},t.prototype.thumbnailXhr=function(t,e){var r,n;return r={},e&&(e.format?r.format=e.format:e.png&&(r.format=\"png\"),e.size&&(r.size=e.size)),n=new x.Util.Xhr(\"GET\",\"\"+this.urls.thumbnails+\"/\"+this.urlEncodePath(t)),n.setParams(r).signWithOauth(this.oauth)},t.prototype.revertFile=function(t,e,r){var n;return n=new x.Util.Xhr(\"POST\",\"\"+this.urls.restore+\"/\"+this.urlEncodePath(t)),n.setParams({rev:e}).signWithOauth(this.oauth),this.dispatchXhr(n,function(t,e){return r?r(t,x.File.Stat.parse(e)):void 0})},t.prototype.restore=function(t,e,r){return this.revertFile(t,e,r)},t.prototype.findByName=function(t,e,r,n){var i,o,s;return n||\"function\"!=typeof r||(n=r,r=null),o={query:e},i=!1,r&&(null!=r.limit&&(o.file_limit=r.limit),(r.removed||r.deleted)&&(o.include_deleted=!0),r.httpCache&&(i=!0)),s=new x.Util.Xhr(\"GET\",\"\"+this.urls.search+\"/\"+this.urlEncodePath(t)),s.setParams(o).signWithOauth(this.oauth,i),this.dispatchXhr(s,function(t,e){var r,i;return i=e?function(){var t,n,i;for(i=[],t=0,n=e.length;n>t;t++)r=e[t],i.push(x.File.Stat.parse(r));return i}():void 0,n(t,i)})},t.prototype.search=function(t,e,r,n){return this.findByName(t,e,r,n)},t.prototype.makeCopyReference=function(t,e){var r;return r=new x.Util.Xhr(\"GET\",\"\"+this.urls.copyRef+\"/\"+this.urlEncodePath(t)),r.signWithOauth(this.oauth),this.dispatchXhr(r,function(t,r){return e(t,x.File.CopyReference.parse(r))})},t.prototype.copyRef=function(t,e){return this.makeCopyReference(t,e)},t.prototype.pullChanges=function(t,e){var r,n;return e||\"function\"!=typeof t||(e=t,t=null),r=t?t.cursorTag?{cursor:t.cursorTag}:{cursor:t}:{},n=new x.Util.Xhr(\"POST\",this.urls.delta),n.setParams(r).signWithOauth(this.oauth),this.dispatchXhr(n,function(t,r){return e(t,x.Http.PulledChanges.parse(r))})},t.prototype.delta=function(t,e){return this.pullChanges(t,e)},t.prototype.mkdir=function(t,e){var r;return r=new x.Util.Xhr(\"POST\",this.urls.fileopsCreateFolder),r.setParams({root:\"auto\",path:this.normalizePath(t)}).signWithOauth(this.oauth),this.dispatchXhr(r,function(t,r){return e?e(t,x.File.Stat.parse(r)):void 0})},t.prototype.remove=function(t,e){var r;return r=new x.Util.Xhr(\"POST\",this.urls.fileopsDelete),r.setParams({root:\"auto\",path:this.normalizePath(t)}).signWithOauth(this.oauth),this.dispatchXhr(r,function(t,r){return e?e(t,x.File.Stat.parse(r)):void 0})},t.prototype.unlink=function(t,e){return this.remove(t,e)},t.prototype[\"delete\"]=function(t,e){return this.remove(t,e)},t.prototype.copy=function(t,e,r){var n,i,o;return r||\"function\"!=typeof n||(r=n,n=null),i={root:\"auto\",to_path:this.normalizePath(e)},t instanceof x.File.CopyReference?i.from_copy_ref=t.tag:i.from_path=this.normalizePath(t),o=new x.Util.Xhr(\"POST\",this.urls.fileopsCopy),o.setParams(i).signWithOauth(this.oauth),this.dispatchXhr(o,function(t,e){return r?r(t,x.File.Stat.parse(e)):void 0})},t.prototype.move=function(t,e,r){var n,i;return r||\"function\"!=typeof n||(r=n,n=null),i=new x.Util.Xhr(\"POST\",this.urls.fileopsMove),i.setParams({root:\"auto\",from_path:this.normalizePath(t),to_path:this.normalizePath(e)}).signWithOauth(this.oauth),this.dispatchXhr(i,function(t,e){return r?r(t,x.File.Stat.parse(e)):void 0})},t.prototype.appInfo=function(t,e){var r;return e||\"function\"!=typeof t||(e=t,t=this.oauth.credentials().key),r=new x.Util.Xhr(\"GET\",this.urls.appsInfo),r.setParams({app_key:t}),this.dispatchXhr(r,function(r,n){return e(r,x.Http.AppInfo.parse(n,t))})},t.prototype.isAppDeveloper=function(t,e,r){var n;return\"object\"==typeof t&&\"uid\"in t&&(t=t.uid),r||\"function\"!=typeof e?\"object\"==typeof e&&\"key\"in e&&(e=e.key):(r=e,e=this.oauth.credentials().key),n=new x.Util.Xhr(\"GET\",this.urls.appsCheckDeveloper),n.setParams({app_key:e,uid:t}),this.dispatchXhr(n,function(t,e){return e?r(t,e.is_developer):r(t)})},t.prototype.hasOauthRedirectUri=function(t,e,r){var n;return r||\"function\"!=typeof e?\"object\"==typeof e&&\"key\"in e&&(e=e.key):(r=e,e=this.oauth.credentials().key),n=new x.Util.Xhr(\"GET\",this.urls.appsCheckRedirectUri),n.setParams({app_key:e,redirect_uri:t}),this.dispatchXhr(n,function(t,e){return e?r(t,e.has_redirect_uri):r(t)})},t.prototype.reset=function(){var t;return this.uid=null,this.oauth.reset(),t=this.authStep,this.authStep=this.oauth.step(),t!==this.authStep&&this.onAuthStepChange.dispatch(this),this.authError=null,this._credentials=null,this},t.prototype.setCredentials=function(t){var e;return e=this.authStep,this.oauth.setCredentials(t),this.authStep=this.oauth.step(),this.uid=t.uid||null,this.authError=null,this._credentials=null,e!==this.authStep&&this.onAuthStepChange.dispatch(this),this},t.prototype.appHash=function(){return this.oauth.appHash()},t.prototype.setupUrls=function(){return this.apiServer=this.chooseApiServer(),this.urls={authorize:\"\"+this.authServer+\"/1/oauth2/authorize\",token:\"\"+this.apiServer+\"/1/oauth2/token\",signOut:\"\"+this.apiServer+\"/1/unlink_access_token\",accountInfo:\"\"+this.apiServer+\"/1/account/info\",getFile:\"\"+this.fileServer+\"/1/files/auto\",postFile:\"\"+this.fileServer+\"/1/files/auto\",putFile:\"\"+this.fileServer+\"/1/files_put/auto\",metadata:\"\"+this.apiServer+\"/1/metadata/auto\",delta:\"\"+this.apiServer+\"/1/delta\",revisions:\"\"+this.apiServer+\"/1/revisions/auto\",restore:\"\"+this.apiServer+\"/1/restore/auto\",search:\"\"+this.apiServer+\"/1/search/auto\",shares:\"\"+this.apiServer+\"/1/shares/auto\",media:\"\"+this.apiServer+\"/1/media/auto\",copyRef:\"\"+this.apiServer+\"/1/copy_ref/auto\",thumbnails:\"\"+this.fileServer+\"/1/thumbnails/auto\",chunkedUpload:\"\"+this.fileServer+\"/1/chunked_upload\",commitChunkedUpload:\"\"+this.fileServer+\"/1/commit_chunked_upload/auto\",fileopsCopy:\"\"+this.apiServer+\"/1/fileops/copy\",fileopsCreateFolder:\"\"+this.apiServer+\"/1/fileops/create_folder\",fileopsDelete:\"\"+this.apiServer+\"/1/fileops/delete\",fileopsMove:\"\"+this.apiServer+\"/1/fileops/move\",appsInfo:\"\"+this.apiServer+\"/1/apps/info\",appsCheckDeveloper:\"\"+this.apiServer+\"/1/apps/check_developer\",appsCheckRedirectUri:\"\"+this.apiServer+\"/1/apps/check_redirect_uri\",getDb:\"\"+this.apiServer+\"/r5/datastores/get_datastore\",getOrCreateDb:\"\"+this.apiServer+\"/r5/datastores/get_or_create_datastore\",createDb:\"\"+this.apiServer+\"/r5/datastores/create_datastore\",listDbs:\"\"+this.apiServer+\"/r5/datastores/list_datastores\",deleteDb:\"\"+this.apiServer+\"/r5/datastores/delete_datastore\",getSnapshot:\"\"+this.apiServer+\"/r5/datastores/get_snapshot\",getDeltas:\"\"+this.apiServer+\"/r5/datastores/get_deltas\",putDelta:\"\"+this.apiServer+\"/r5/datastores/put_delta\",datastoreAwait:\"\"+this.apiServer+\"/r5/datastores/await\"},this\n},t.prototype.chooseApiServer=function(){var t,e;return e=Math.floor(Math.random()*(this.maxApiServer+1)),t=0===e?\"\":e.toString(),this.serverRoot.replace(\"$\",t)},t.prototype.authStep=null,t.ERROR=0,t.RESET=1,t.PARAM_SET=2,t.PARAM_LOADED=3,t.AUTHORIZED=4,t.DONE=5,t.SIGNED_OUT=6,t.prototype.urlEncodePath=function(t){return x.Util.Xhr.urlEncodeValue(this.normalizePath(t)).replace(/%2F/gi,\"/\")},t.prototype.normalizePath=function(t){var e;if(\"/\"===t.substring(0,1)){for(e=1;\"/\"===t.substring(e,e+1);)e+=1;return t.substring(e)}return t},t.prototype.authorizeUrl=function(){var t;return t=this.oauth.authorizeUrlParams(this.driver.authType(),this.driver.url()),this.urls.authorize+\"?\"+x.Util.Xhr.urlEncode(t)},t.prototype.getAccessToken=function(t){var e,r;return e=this.oauth.accessTokenParams(this.driver.url()),r=new x.Util.Xhr(\"POST\",this.urls.token).setParams(e).addOauthParams(this.oauth),this.dispatchXhr(r,function(e,r){return e&&e.status===x.ApiError.INVALID_PARAM&&e.response&&e.response.error&&(e=new x.AuthError(e.response)),t(e,r)})},t.prototype.dispatchLongPollXhr=function(t,e,r){return null==r&&(r=6e4),this.dispatchXhr(t,e,r)},t.prototype.dispatchXhr=function(t,e,r){var n,i,o=this;return null==r&&(r=1e4),n=setTimeout(function(){return o.handleLongRequest(t)},2*r),t.setCallback(function(t,r,i,o){return clearTimeout(n),e(t,r,i,o)}),t.onError=this.xhrOnErrorHandler,t.prepare(),i=t.xhr,this.onXhr.dispatch(t)&&t.send(),i},t.prototype.handleXhrError=function(t,e){var r=this;return t.status===x.ApiError.INVALID_TOKEN&&this.authStep===d.DONE&&(this.authError=t,this.authStep=d.ERROR,this.onAuthStepChange.dispatch(this),this.driver&&this.driver.onAuthStepChange)?(this.driver.onAuthStepChange(this,function(){return r.onError.dispatch(t),e(t)}),null):(this.onError.dispatch(t),e(t),void 0)},t.prototype.handleLongRequest=function(){return this.setupUrls()},t.prototype.defaultServerRoot=function(){return\"https://api$.dropbox.com\"},t.prototype.defaultAuthServer=function(){return this.serverRoot.replace(\"api$\",\"www\")},t.prototype.defaultFileServer=function(){return this.serverRoot.replace(\"api$\",\"api-content\")},t.prototype.defaultDownloadServer=function(){return\"https://dl.dropboxusercontent.com\"},t.prototype.defaultWsServer=function(){return this.serverRoot.replace(/^https?:/,\"wss:\")},t.prototype.defaultMaxApiServer=function(){return 30},t.prototype.computeCredentials=function(){var t;t=this.oauth.credentials(),this.uid&&(t.uid=this.uid),this.serverRoot!==this.defaultServerRoot()&&(t.server=this.serverRoot),this.maxApiServer!==this.defaultMaxApiServer()&&(t.maxApiServer=this.maxApiServer),this.authServer!==this.defaultAuthServer()&&(t.authServer=this.authServer),this.fileServer!==this.defaultFileServer()&&(t.fileServer=this.fileServer),this.downloadServer!==this.defaultDownloadServer()&&(t.downloadServer=this.downloadServer),this._credentials=t},t}(),d=x.Client,x.Datastore=function(){function t(t,e){var r=this;this._datastore_manager=t,this._managed_datastore=e,this._dsid=this._managed_datastore.get_dsid(),this._handle=this._managed_datastore.get_handle(),this._record_cache=new G(this),this._last_used_timestamp=0,this.recordsChanged=new x.Util.EventSource,this.syncStatusChanged=new x.Util.EventSource,this._timeoutWrapper=function(t){return t},this._evt_mgr=new O,this._evt_mgr.register(this._managed_datastore.syncStateChanged,function(){return r._syncSoon(),r.syncStatusChanged.dispatch(null)}),this._syncPending=!1,this._closed=!1,this._metadata_table=new x.Datastore.Table(this,\":info\"),this._metadata_table.setResolutionRule(\"mtime\",\"max\")}return t.prototype.recordsChanged=null,t.prototype.syncStatusChanged=null,t.int64=function(t){var e,r;if(te.is_number(t)&&null!=t[ie.INT64_TAG])return ie.validateInt64(t);if(te.is_string(t)){if(!ie.is_valid_int64_string(t))throw new Error(\"Not a valid int64 in string form: \"+t);return r=new Number(parseInt(t,10)),r[ie.INT64_TAG]=t,ie.validateInt64(r)}if(!te.is_number(t)||!isFinite(t))throw new Error(\"Not a finite number: \"+t);if(Number(t)!==Math.round(t))throw new Error(\"Number is not an integer: \"+t);if(e=t.toFixed(),!ie.is_valid_int64_string(e))throw new Error(\"Number not in int64 range: \"+t);return r=new Number(t),r[ie.INT64_TAG]=e,ie.validateInt64(r)},t.isInt64=function(t){return ie.isInt64(t)},t.prototype.getModifiedTime=function(){var t;return t=this._metadata_table.getOrInsert(\"info\",{}),t.get(\"mtime\")},t.prototype.getTitle=function(){var t;return t=this._metadata_table.getOrInsert(\"info\",{}),t.get(\"title\")},t.prototype.setTitle=function(t){var e;if(null!=t&&!te.string(t))throw new Error(\"Title must be a string or null!\");return e=this._metadata_table.getOrInsert(\"info\",{}),e.set(\"title\",t)},t.prototype.getTable=function(t){if(this._checkNotClosed(),!x.Datastore.Table.isValidId(t))throw new Error(\"Invalid table ID: \"+t);return new x.Datastore.Table(this,t)},t.prototype.listTableIds=function(){return this._checkNotClosed(),this._managed_datastore.list_tables()},t.prototype.toString=function(){var t;return t=this._closed?\"[closed] \":\"\",\"Datastore(\"+t+this._dsid+\" [\"+this._handle+\"])\"},t.prototype.close=function(){return this._closed=!0,this._evt_mgr.unregister_all(),this._listeners=[],this._datastore_manager._datasync.obj_manager.close(this._dsid),void 0},t.prototype.getId=function(){return this._dsid},t.prototype.getSyncStatus=function(){return{uploading:this._managed_datastore.get_outgoing_delta_count()>0}},t.isValidId=function(t){var e;return e=new RegExp(te.DS_ID_REGEX),te.is_string(t)&&e.test(t)},t.prototype._generateRid=function(){var t,e,r,n;for(n=\"_\",e=\"_js_\",r=Math.round(1e3*Date.now()),r<=this._last_used_timestamp&&(r=this._last_used_timestamp+1),this._last_used_timestamp=r,t=r.toString(32);t.length<11;)t=\"0\"+t;return n+t+e+ie.randomWeb64String(5)},t.prototype._syncSoon=function(){var t=this;if(this._managed_datastore.is_deleted())throw new Error(\"Cannot sync deleted datastore \"+this._dsid);return this._checkNotClosed(),this._syncPending||(this._syncPending=!0,setTimeout(this._timeoutWrapper(function(){return t._syncPending=!1,t._sync()}),0)),void 0},t.prototype._sync=function(){var t,e,r,n,i,o,s,a,u;this._checkNotClosed(),i=this._managed_datastore.sync(),n=this._resolveAffectedRecordMap(i),t=!1;for(s in n)for(r=n[s],a=0,u=r.length;u>a;a++)e=r[a],ne(s===e._tid,\"tid mismatch\"),t=!0,o=e._rid,this._managed_datastore.query(s,o)||(e._deleted=!0,this._record_cache.remove(s,o));return t&&this.recordsChanged.dispatch(new K(n,!1)),void 0},t.prototype._resolveAffectedRecordMap=function(t){var e,r,n,i,o;r={};for(o in t){i=t[o];for(n in i)e=this._record_cache.getOrCreate(o,n),null==r[o]&&(r[o]=[]),r[o].push(e)}return r},t.prototype._recordsChangedLocally=function(t){return t.length>0&&(this.recordsChanged.dispatch(K._fromRecordList(t,!0)),this._syncSoon()),void 0},t.prototype._checkNotClosed=function(){if(this._closed||!this._managed_datastore._open)throw new Error(\"Datastore is already closed: \"+this);return void 0},t}(),ie=x.Datastore.impl={},te=x.Datastore.impl.T={},te.identity=function(t){return t},te.get_coerce_fn=function(t){return null!=t.coerce?t.coerce:null!=t.load_json?function(e){return e instanceof t?e:t.load_json(e)}:te.identity},te.get_T_fn=function(t){return null!=t.Type?t.Type:t},te.str=function(t){return te.is_string(t)?t:te.is_function(t)?t():JSON.stringify(t)},te.assert=function(t,e){if(!t)throw new Error(te.str(e))},ne=te.assert,te.check=function(t,e,r,n,i,o){if(t)return r;throw te.fail(e,r,n,i,o),new Error(\"unreachable\")},te.safe_to_string=function(t){var e,r;try{if(r=t.toString(),\"[object Object]\"!==r)return r}catch(n){e=n}try{return JSON.stringify(t)}catch(n){e=n}try{if(r=t.constructor.name,null!=r?r.match(/^[A-Za-z0-9_]+$/):void 0)return r}catch(n){e=n}return\"[T.safe_to_string failed]\"},te.fail=function(t,e,r,n,i){var o,s;throw s=null!=r?null!=n?null!=i?\"Wanted \"+te.str(n)+\", but \"+te.str(r)+\" in \"+te.str(i)+\" \"+te.str(t):\"Wanted \"+te.str(n)+\", but \"+te.str(r)+\" \"+te.str(t):\"\"+te.str(r)+\" \"+te.str(t):null!=n?null!=i?\"Wanted \"+te.str(n)+\", but in \"+te.str(i)+\" \"+te.str(t):\"Wanted \"+te.str(n)+\", but \"+te.str(t):\"\"+te.str(t),o=new Error(\"\"+s+\": \"+te.safe_to_string(e)),console.error(o),o},te.any=function(t){return t},te.defined=function(t,e,r,n){return null==r&&(r=\"defined\"),te.check(\"undefined\"!=typeof t,\"is undefined\",t,e,r,n),t},te.nonnull=function(t,e,r,n){return null==r&&(r=\"nonnull\"),te.defined(t,e,r,n),te.check(null!=t,\"is null\",t,e,r,n),t},te.member=function(t){var e,r;return r=\"value in \"+JSON.stringify(t),e=\"not in \"+JSON.stringify(t),function(n,i,o,s){return null==o&&(o=r),te.check(ae.call(t,n)>=0,e,n,i,o,s)}},te.object=function(t,e,r,n){return null==r&&(r=\"object\"),te.nonnull(t,e,r,n),te.check(\"object\"==typeof t,\"not an object\",t,e,r,n),t},te.bool=function(t,e,r,n){return null==r&&(r=\"bool\"),te.nonnull(t,e,r,n),te.check(t===!0||t===!1,\"is not bool\",t,e,r,n),t},te.string=function(t,e,r,n){return null==r&&(r=\"string\"),te.nonnull(t,e,r,n),te.check(te.is_string(t),\"is not a string\",t,e,r,n),t},te.num=function(t,e,r,n){return null==r&&(r=\"num\"),te.nonnull(t,e,r,n),te.check(\"number\"==typeof t,\"is not numeric\",t,e,r,n),t},te.int=function(t,e,r,n){return null==r&&(r=\"int\"),te.num(t,e,r,n),te.check(0===t%1,\"is not an integer\",t,e,r,n),t},te.uint=function(t,e,r,n){return null==r&&(r=\"uint\"),te.int(t,e,r,n),te.check(t>=0,\"is negative\",t,e,r,n),t},te.nullable=function(t){var e,r;return r=\"nullable(\"+t+\")\",e=function(e,n,i,o){return null==i&&(i=function(){return r}),te.defined(e,n,i,o),null!=e&&te.get_T_fn(t)(e,n,i,o),e},e.toString=function(){return r},e.coerce=function(e){return null!=e?te.get_coerce_fn(t)(e):null},e.fromJSON=function(r){return null!=r?null!=t.fromJSON?t.fromJSON(r):e.coerce(r):null},e},te.array=function(t,e,r,n){return null==r&&(r=\"array\"),te.nonnull(t,e,r,n),te.check(te.is_array(t),\"is not an array\",t,e,r,n),t},te.arrayOf=function(t){var e,r;return r=\"arrayOf(\"+t+\")\",e=function(e,n,i,o){var s,a,u,l,h;for(null==i&&(i=r),te.array(e,n,i,o),u=l=0,h=e.length;h>l;u=++l)s=e[u],a=function(){return null!=n?\"element \"+u+\" of \"+te.str(n):\"element \"+u},te.get_T_fn(t)(s,a,i,o);return e},e.toString=function(){return r},e.coerce=function(e){var n,i,o,s;for(te.array(e,null,r),s=[],i=0,o=e.length;o>i;i++)n=e[i],s.push(te.get_coerce_fn(t)(n));return s},e.fromJSON=function(n){var i,o,s,a;if(te.array(n,\"fromJSON input\",r),null!=t.fromJSON){for(a=[],o=0,s=n.length;s>o;o++)i=n[o],a.push(t.fromJSON(i));return a}return e.coerce(n)},e},te.instance=function(t,e,r,n,i){var o;if(!(e instanceof Function))throw new Error(\"Invalid type given: \"+e);return t instanceof e||(null==n&&(n=e.name),te.check(!1,\"got instance of \"+(null!=t?null!=(o=t.constructor)?o.name:void 0:void 0),t,r,n,i)),t},te.unimplemented=function(t){return function(){throw new Error(\"unimplemented \"+t)}},te.startsWith=function(t,e){return 0===t.lastIndexOf(e,0)},te.string_matching=function(t){var e;return te.string(t),te.check(/^[^].*[$]$/.test(t),\"does not start with ^ and end with $\",t),e=\"does not match regex \"+t,function(r,n,i,o){return te.string(r,n,i,o),te.check(new RegExp(t).test(r),e,r,n,i,o),r}},te.is_defined=function(t){return\"undefined\"!=typeof t},te.is_bool=function(t){return t===!0||t===!1||t&&\"object\"==typeof t&&t.constructor===Boolean},te.is_number=function(t){return\"number\"==typeof t||t&&\"object\"==typeof t&&t.constructor===Number},te.is_json_number=function(t){return te.is_number(t)&&!isNaN(t)&&isFinite(t)},te.is_string=function(t){return\"string\"==typeof t||t&&\"object\"==typeof t&&t.constructor===String},te.is_function=function(t){return\"function\"==typeof t},te.is_object=function(t){return null!=t&&\"object\"==typeof t},te.is_array=function(t){return\"[object Array]\"===Object.prototype.toString.call(t)},te.is_empty=function(t){return 0===Object.keys(t).length},te.is_date=function(t){return\"[object Date]\"===Object.prototype.toString.call(t)},te.isUint8Array=function(t){return\"[object Uint8Array]\"===Object.prototype.toString.call(t)},te.is_simple_map=function(t){var e,r;if(null==t||\"object\"!=typeof t)return!1;for(e in t)if(r=t[e],!Object.prototype.hasOwnProperty.call(t,e))return!1;return!0},te.simple_map=function(t,e,r,n){var i,o;null==r&&(r=\"simple map\"),te.object(t,e,r,n);for(i in t)o=t[i],te.check(Object.prototype.hasOwnProperty.call(t,i),function(){return\"property \"+i+\" is inherited\"},t,e,r,t);return t},te.simple_typed_map=function(t,e,r){var n,i,o;return n=te.get_coerce_fn(e),i=te.get_coerce_fn(r),o=function(n,i,o,s){var a,u;null==o&&(o=t),te.simple_map(n,i,o,s);for(a in n)u=n[a],te.get_T_fn(e)(a,\"property\",null,n),te.get_T_fn(r)(u,function(){return\"value of property \"+a},null,n);return n},o.coerce=function(e){var r,o,s;te.simple_map(e,null,t),o={};for(r in e)s=e[r],o[n(r)]=i(s);return o},o.fromJSON=function(e){var i,o,s;te.simple_map(e,null,t),o={};for(i in e)s=e[i],o[n(i)]=null!=r.fromJSON?r.fromJSON(s):s;return o},o},te.DS_ID_REGEX=\"^[-_a-z0-9]([-_a-z0-9.]{0,30}[-_a-z0-9])?$|^[.][-_a-zA-Z0-9]{1,100}$\",te.dsid=function(t,e,r,n){return null==r&&(r=\"dsid\"),te.string_matching(te.DS_ID_REGEX)(t,e,r,n),t},te.SS_ID_REGEX=\"^[-:._+/=a-zA-Z0-9][-._+/=a-zA-Z0-9]{0,31}$\",te.tid=function(t,e,r,n){return null==r&&(r=\"tid\"),te.string_matching(te.SS_ID_REGEX)(t,e,r,n),t},te.rowid=function(t,e,r,n){return null==r&&(r=\"rowid\"),te.string_matching(te.SS_ID_REGEX)(t,e,r,n),t},te.field_name=function(t,e,r,n){return null==r&&(r=\"field name\"),te.string_matching(te.SS_ID_REGEX)(t,e,r,n),t},function(){var t,e,r;r=[];for(t in te)e=te[t],te.hasOwnProperty(t)?r.push(function(t){return e.toString=function(){return\"T.\"+t}}(t)):r.push(void 0);return r}(),ie.struct=oe={},oe.define=function(t,e){var r,n,i,o,s,a,u,l,h,c,p,d,f,_,y,g;for(te.string(t,\"struct name\"),te.array(e,\"fields\"),_=[],f={},s=y=0,g=e.length;g>y;s=++y){i=e[s],te.array(i,\"field\",\"field descriptor\",e),te.check(2<=i.length&&i.length<=3,\"does not have length 2 or 3\",i,\"field descriptor\"),c=te.string(i[0],\"field name\",\"field descriptor\",e),d=te.nonnull(i[1],\"field type\",\"field descriptor\",e),p=i.length<=2?{}:te.nonnull(i[2],\"map of field options\",\"field descriptor\",e);for(l in p)\"init\"!==l&&\"initFn\"!==l&&te.fail(\"unknown option \"+l,p,\"field options\",\"field descrptor\",e);ae.call(p,\"init\")>=0&&ae.call(p,\"initFn\")>=0&&te.fail(\"both 'init' and 'initFn' specified\",p,\"field options\",\"field descriptor\",e),u=\"initFn\"in p?p.initFn:\"init\"in p?(a=p.init,function(t){return function(){return t}}(a)):null,r={name:c,type:d,initFn:u},o=\"undefined\"!=typeof Z&&null!==Z?new Z(r):r,_.push(o),f[c]=o}return h=\"initializer for \"+t+\" (fields \"+function(){var t,e,r;for(r=[],t=0,e=_.length;e>t;t++)i=_[t],r.push(i.name);return r}().join(\", \")+\")\",n=function(t){var e,r,i;te.defined(t,\"x\",\"initializer\");for(c in t)e=t[c],t.hasOwnProperty(c)&&te.check(null!=f[c],function(){return\"has an unexpected field \"+c},t,\"initializer\");for(r=0,i=_.length;i>r;r++)o=_[r],t[o.name]&&!t.hasOwnProperty(o.name)&&te.fail(\"Has an indirect property \"+o.name,t,\"initializer\"),t.hasOwnProperty(o.name)?(e=t[o.name],this[o.name]=te.get_coerce_fn(o.type)(e)):null!=o.initFn?this[o.name]=o.initFn():te.fail(\"lacks the field \"+o.name,t,\"initializer\");return n.Type(this,\"initializer\",h,this),this},n.Type=function(e,r,i,s){var a,u,l;for(te.defined(e,r,i,s),te.check(e instanceof n,function(){return\"is not an instance of \"+t},e,r,i,s),u=0,l=_.length;l>u;u++)o=_[u],te.check(e.hasOwnProperty(o.name),function(){return\"lacks the field \"+o.name},e,r,i,s),te.get_T_fn(o.type)(e[o.name],o.name,i,s);for(c in e)a=e[c],e.hasOwnProperty(c)&&te.check(null!=f[c],\"has an unexpected field\",c,r,i,s);return e},n.coerce=function(t){return t instanceof n?(n.Type(t),t):new n(t)},n.prototype.toString=function(){var t,e,r,n,i;for(e=this,t=[],n=0,i=_.length;i>n;n++)o=_[n],r=e[o.name],t.push(\"\"+o.name+\": \"+(te.is_object(r)&&te.is_function(r.toString)?r.toString():JSON.stringify(r)));return\"{\"+t.join(\", \")+\"}\"},n.prototype.toJSON=function(){var t,e,r,n;for(t=this,e=function(){return\"\"+t},r=0,n=_.length;n>r;r++)o=_[r],te.get_T_fn(o.type)(this[o.name],o.name,null,e);return this},n.fromJSON=function(e){var r,i,o;te.simple_map(e,\"input\"),i=[];for(l in e)o=e[l],null==f[l]&&(i.push(\"\"+l+\": \"+JSON.stringify(o)),delete e[l]);i.length>0&&console.info(\"Ignoring unknown fields while deserializing \"+t+\": \"+i.join(\", \")),r={};for(l in e)o=e[l],d=f[l].type,r[l]=null!=d.fromJSON?d.fromJSON(o):o;return new n(r)},n.toString=function(){return\"struct \"+t},n},Z=oe.define(\"StructField\",[[\"name\",te.string],[\"type\",te.defined],[\"initFn\",te.defined]]),oe.toJSO=function(t){var e,r,n,i;if(\"object\"!=typeof t)return t;if(te.is_array(t))return function(){var r,n,i;for(i=[],r=0,n=t.length;n>r;r++)e=t[r],i.push(oe.toJSO(e));return i}();n={};for(r in t)i=t[r],t.hasOwnProperty(r)&&(n[r]=oe.toJSO(i));return n},oe.union_as_list=function(t,e){var r,n,i,o,s,a,u,l,h,c,p;for(te.string(t,\"union name\"),te.array(e,\"variants\"),n=function(){throw new Error(\"Use \"+t+\".from_array instead\")},l={},u=[],h=function(e,r,i){var o;return o=oe.define(\"\"+t+\".\"+e,i),o.prototype.tag=function(){return e},o.prototype.toString=function(){return\"\"+t+\".\"+e+\"(\"+JSON.stringify(this)+\")\"},o.prototype.toJSON=function(){var t,n,i,o,s,a;for(t=[e],s=0,a=r.length;a>s;s++)n=r[s],i=n[0],o=n[1],te.get_T_fn(o)(this[i],i),t.push(this[i]);return t},o.from_array=function(n){var i,s,a,u,l,h,c;for(l=\"initializer for \"+t,te.array(n,\"initializer\",l),te.check(n.length===r.length+1,\"does not have length \"+(r.length+1),n,\"initializer\",l),te.check(n[0]===e,\"does not have tag \"+e,n,\"initializer\",l),i={_tag:e},a=h=0,c=r.length;c>h;a=++h)s=r[a],u=s[0],i[u]=n[a+1];return new o(i)},o.fromJSON=function(t){return t.length>r.length+1&&(t=t.slice(0,r.length+1)),o.from_array(t)},o.coerce=function(t){return t instanceof o?(o.Type(t),t):o.from_array(t)},l[e]=o,n[e]=o},c=0,p=e.length;p>c;c++)i=e[c],te.array(i,\"variant\",\"variant descriptor\",e),te.check(2===i.length,\"does not have length 2\",i,\"variant descriptor\",e),a=te.string(i[0],\"tag\",\"tag\",e),o=te.array(i[1],\"fields\",\"variant descriptor\",e),s=o.slice(0),s.unshift([\"_tag\",te.member([a])]),h(a,o,s),u.push(a);return r=\"initializer for \"+t+\" (variants \"+u.join(\", \")+\")\",n.from_array=function(e){var r,n;return n=\"initializer for \"+t,te.array(e,\"initializer\",n),te.check(e.length>=1,\"lacks a tag\",e,\"initializer\",n),r=e[0],te.string(r,\"tag\",n,e),te.member(u)(r),l[r].from_array(e)},n.fromJSON=function(e){var r,n;return n=\"initializer for \"+t,te.array(e,\"initializer\",n),te.check(e.length>=1,\"lacks a tag\",e,\"initializer\",n),r=e[0],te.string(r,\"tag\",n,e),te.member(u)(r),l[r].fromJSON(e)},n.Type=function(e,r,n,i){var o;return null==n&&(n=\"\"+t+\".Type\"),te.defined(e,r,n,i),te.defined(e.tag,\"tag\",n,i),o=e.tag(),te.string(o,\"tag\",\"initializer\",e),te.member(u)(o),l[o].Type(e,null,\"object of type \"+t),e},n.coerce=function(t){var e,r;for(r in l)if(e=l[r],t instanceof e)return e.Type(t),t;return n.from_array(t)},n.toString=function(){return\"union \"+t},n},ie.nonzero_int64_approximate_regex=new RegExp(\"^-?[1-9][0-9]{0,18}$\"),ie.int64_max_str=\"9223372036854775807\",ie.int64_min_str=\"-9223372036854775808\",ie.int64_string_less_than=function(t,e){var r,n,i;return t===e?!1:(n=\"0\"===t.charAt(0),i=\"0\"===e.charAt(0),n&&!i?!0:i&&!n?!1:(r=t.length===e.length?t>e:t.length>e.length,n&&i?r:!r))},ie.is_valid_int64_string=function(t){return te.is_string(t)?\"0\"===t?!0:ie.nonzero_int64_approximate_regex.test(t)?\"-\"===t.charAt(0)?t.length<ie.int64_min_str.length||t<=ie.int64_min_str:t.length<ie.int64_max_str.length||t<=ie.int64_max_str:!1:!1},ie.is_wrapped_atomic_field_value=function(t){var e,r,n,i;if(!te.is_simple_map(t))return!1;if(e=Object.keys(t),1!==e.length)return!1;switch(e[0]){case\"B\":return te.is_string(t.B);case\"N\":return\"nan\"===(n=t.N)||\"+inf\"===n||\"-inf\"===n;case\"I\":case\"T\":return r=null!=(i=t.I)?i:t.T,ie.is_valid_int64_string(r);default:return!1}},ie.is_atomic_field_value=function(t){return te.is_bool(t)||te.is_json_number(t)||te.is_string(t)||ie.is_wrapped_atomic_field_value(t)},ie.is_list_value=function(t){var e,r,n;if(te.is_array(t)){for(r=0,n=t.length;n>r;r++)if(e=t[r],!ie.is_atomic_field_value(e))return!1;return!0}return!1},ie.is_compound_field_value=function(t){return ie.is_atomic_field_value(t)||ie.is_list_value(t)},ie.atomic_field_value=function(t,e,r,n){return null==r&&(r=\"atomic field value\"),te.check(ie.is_atomic_field_value(t),\"is not an atomic field value\",t,e,r,n),t},ie.list_value=function(t,e,r,n){return null==r&&(r=\"list value\"),te.arrayOf(ie.atomic_field_value)(t,e,r,n),t},ie.compound_field_value=function(t,e,r,n){return null==r&&(r=\"field value\"),te.is_array(t)?ie.list_value(t,e,r,n):ie.atomic_field_value(t,e,r,n)},ie.FieldOp=T=oe.union_as_list(\"FieldOp\",[[\"P\",[[\"value\",ie.compound_field_value]]],[\"D\",[]],[\"LC\",[]],[\"LP\",[[\"at\",te.uint],[\"value\",ie.atomic_field_value]]],[\"LI\",[[\"before\",te.uint],[\"value\",ie.atomic_field_value]]],[\"LD\",[[\"at\",te.uint]]],[\"LM\",[[\"from\",te.uint],[\"to\",te.uint]]]]),ie.datadict=te.simple_typed_map(\"datadict\",te.field_name,ie.compound_field_value),ie.update_datadict=te.simple_typed_map(\"update_datadict\",te.field_name,T),ie.Change=n=oe.union_as_list(\"Change\",[[\"I\",[[\"tid\",te.tid],[\"rowid\",te.rowid],[\"fields\",ie.datadict]]],[\"U\",[[\"tid\",te.tid],[\"rowid\",te.rowid],[\"updates\",ie.update_datadict]]],[\"D\",[[\"tid\",te.tid],[\"rowid\",te.rowid]]]]),ie.Delta=A=oe.define(\"Delta\",[[\"rev\",te.uint],[\"changes\",te.arrayOf(n)],[\"nonce\",te.string]]),F=oe.define(\"ListDatastoresResponseItem\",[[\"dsid\",te.string],[\"handle\",te.string],[\"rev\",te.uint],[\"info\",te.nullable(ie.datadict),{init:null}]]),N=oe.define(\"ListDatastoresResponse\",[[\"token\",te.string],[\"datastores\",te.arrayOf(F)]]),L=oe.define(\"GetSnapshotResponseRow\",[[\"tid\",te.string],[\"rowid\",te.string],[\"data\",ie.datadict]]),P=oe.define(\"GetSnapshotResponse\",[[\"rev\",te.uint],[\"rows\",te.arrayOf(L)]]),s=oe.define(\"CreateDatastoreResponse\",[[\"handle\",te.string],[\"rev\",te.uint],[\"created\",te.bool]]),I=oe.define(\"GetDatastoreResponse\",[[\"handle\",te.string],[\"rev\",te.uint]]),E=oe.define(\"DeleteDatastoresResponse\",[]),q=oe.define(\"PutDeltasResponse\",[[\"rev\",te.nullable(te.uint),{init:null}],[\"conflict\",te.nullable(te.string),{init:null}]]),R=oe.define(\"GetDeltasResponse\",[[\"deltas\",te.nullable(te.arrayOf(A)),{init:null}],[\"notfound\",te.nullable(te.string),{init:null}]]),e=oe.define(\"AwaitResponseDeltas\",[[\"deltas\",te.simple_typed_map(\"deltas map\",te.string,R)]]),ie.AwaitResponse=t=oe.define(\"AwaitResponse\",[[\"get_deltas\",te.nullable(e),{init:null}],[\"list_datastores\",te.nullable(N),{init:null}]]),h=function(){function t(t){this.obj_manager=e(t)}var e;return e=function(t){var e,r;return r=new U(t),e=new H(r,t)},t.changeFromArray=function(t){return n.from_array(t)},t.prototype.close=function(){return this.obj_manager.destroy()},t.prototype.get_or_create=function(t,e){var r=this;return this.obj_manager.flob_client.get_or_create_db(t,function(n,i){return n?e(n):r.obj_manager.open(t,i.handle,function(t,r){return null!=t?e(t):e(null,r,i.created)})})},t.prototype.create=function(t,e,r){var n=this;return this.obj_manager.flob_client.create_db(t,e,function(e,i){return e?r(e):n.obj_manager.open(t,i.handle,function(t,e){return null!=t?r(t):r(null,e,i.created)})})},t.prototype.get_by_dsid=function(t,e){var r=this;return this.obj_manager.flob_client.get_db(t,function(n,i){return n?e(n):r.obj_manager.open(t,i.handle,function(t,r){return null!=t?e(t):e(null,r)})})},t.prototype.get=function(t,e){return this.obj_manager.open(t,function(t,r){return null!=t?e(t):e(null,r)})},t}(),r=function(){function t(){this.min_delay_millis=500,this.max_delay_millis=9e4,this.base=1.5,this._failures=0,this.log=!1}return t.prototype.set_log=function(t){this.log=t},t.prototype.set_max_delay_millis=function(t){this.max_delay_millis=t},t.prototype.get_backoff_millis=function(){var t,e;return this._failures+=1,e=Math.min(this.max_delay_millis,this.min_delay_millis*Math.pow(this.base,this._failures-1)),t=(.5+Math.random())*e,this.log&&console.log(\"get_backoff_millis: failures=\"+this._failures+\", target_delay_millis=\"+e+\", delay_millis=\"+t),t},t.prototype.reset=function(){return this._failures=0},t}(),$=function(){function t(){this.backoff=new r}var e,n;return n=6e4,e=0,t.prototype.run=function(t,e,r){var i,o,s,a,u,l,h,c=this;return s=null!=(l=e.do_retry)?l:function(){return!0},a=null!=(h=e.giveup_after_ms)?h:n,u=Date.now()+a,o=!1,i=function(){return o?void 0:t(function(){var t,e,n;return t=arguments[0],e=2<=arguments.length?le.call(arguments,1):[],o?void 0:t&&s(t)?Date.now()>u?(console.error(\"Giving up due to error\",t),r(t)):(n=c.backoff.get_backoff_millis(),console.warn(\"Retrying in \"+n+\" ms due to error\",t),setTimeout(i,n)):r.apply(null,[t].concat(le.call(e)))})},i(),function(){return o=!0}},t}(),k=function(){function t(t){this.client=t,this._retry=new $}var e,r;return r=10,e=2419200,t.prototype._run_with_retries=function(t,e,r){var n;return n={giveup_after_ms:1e3*t,do_retry:function(t){var e;return 0===t.status||500<=(e=t.status)&&600>e}},this._retry.run(r,n,e)},t.prototype.delete_db=function(t,e){var n=this;return this._run_with_retries(r,e,function(e){return n.client._deleteDatastore(t,function(t){return null!=t?e(t):e(null)})})},t.prototype.list_dbs=function(t){var r=this;return this._run_with_retries(e,t,function(t){return r.client._listDatastores(function(e,r){return null!=e?t(e):t(null,r)})})},t.prototype.get_or_create_db=function(t,e){var n=this;return this._run_with_retries(r,e,function(e){return n.client._getOrCreateDatastore(t,function(t,r){return null!=t?e(t):e(null,r)})})},t.prototype.create_db=function(t,e,n){var i=this;return this._run_with_retries(r,n,function(r){return i.client._createDatastore(t,e,function(t,e){return null!=t?r(t):r(null,e)})})},t.prototype.get_db=function(t,e){var n=this;return this._run_with_retries(r,e,function(e){return n.client._getDatastore(t,function(t,r){return null!=t?e(t):e(null,r)})})},t.prototype.await=function(t,r,n){var i,o=this;return i=this._run_with_retries(e,n,function(e){return o.client._datastoreAwait(t,r,function(t,r){return null!=t?e(t):e(null,r)})})},t.prototype.put_delta=function(t,r,n){var i,o=this;return i=function(t,e){return n(e)},this._run_with_retries(e,n,function(e){return o.client._putDelta(t,r,function(t){return null!=t?e(t):e(null)})})},t.prototype.get_snapshot=function(t,e){var n=this;return this._run_with_retries(r,e,function(e){return n.client._getSnapshot(t,function(t,r){return null!=t?e(t):e(null,r)})})},t}(),z=function(){function t(t,e,r){this.changes=t,this.undo_extras=e,this.finalized=null!=r?r:!1}var e;return e=function(t,e){var r,i,o,s,a;switch(s=null,i=null,t.tag()){case\"I\":s=\"D\";break;case\"U\":s=\"U\",i={};for(o in e)a=e[o],i[o]=null==a?[\"D\"]:[\"P\",a];break;case\"D\":s=\"I\",i=ie.clone(e);break;default:throw new Error(\"Unknown change tag: \"+t.tag())}return r=[s,t.tid,t.rowid],null!=i&&r.push(i),n.from_array(r)},t.prototype.add_change=function(t,e){return ne(!this.finalized,\"add_change: already finalized\"),this.changes.push(t),this.undo_extras.push(e)},t.prototype[\"package\"]=function(t,e){return ne(this.finalized,\"package: not finalized\"),new A({changes:this.changes.slice(),nonce:t,rev:e})},t.prototype.inverse_changes=function(){var t,r,n,i,o,s;for(n=[],s=this.changes,r=i=0,o=s.length;o>i;r=++i)t=s[r],n.push(e(t,this.undo_extras[r]));return n.reverse(),n},t}(),ie.value_size=function(t){var e,r,n,i;if(te.is_string(t))return x.Util.countUtf8Bytes(t);if(te.is_bool(t))return 0;if(te.is_number(t))return 0;if(te.is_array(t)){for(e=20*t.length,n=0,i=t.length;i>n;n++)r=t[n],e+=ie.value_size(r);return e}if(\"object\"!=typeof t)throw new Error(\"Unexpected value: \"+t);if(null!=t.I)return 0;if(null!=t.N)return 0;if(null!=t.B)return Math.ceil(3*t.B.length/4);if(null!=t.T)return 0;throw new Error(\"Unexpected object: \"+JSON.stringify(t))},M=102400,j=10485760,B=2097152,ie.size_difference_for_field_op=function(t,e,r){var n,i,o,s;switch(n=t.get(e),r.tag()){case\"P\":return i=r.value,n?ie.value_size(i)-ie.value_size(n):100+ie.value_size(i);case\"D\":return null!=n?-(100+ie.value_size(n)):0;case\"LC\":return ne(null==n,\"can't create list for field that already exists\"),100;case\"LP\":return ne(te.is_array(n),\"LP on non-list\"),ne(0<=(o=r.at)&&o<n.length,\"bad index for LP\"),ie.value_size(r.value)-ie.value_size(n[r.at]);case\"LI\":return null!=n?20+ie.value_size(r.value):120+ie.value_size(r.value);case\"LD\":return ne(te.is_array(n),\"LD on non-list\"),ne(0<=(s=r.at)&&s<n.length,\"bad index for LD\"),-(20+ie.value_size(n[r.at]));case\"LM\":return 0;default:throw new Error(\"unexpected field op type \"+r.tag())}},ie.size_difference_for_change=function(t,e){var r,n,i,o,s,a,u;return s=function(){var s,l;switch(e.tag()){case\"I\":o=100,s=e.fields;for(r in s)u=s[r],o+=100+ie.value_size(u);return o;case\"U\":i=t.get_record(e.tid,e.rowid),te.assert(null!=i,function(){return\"record not found: \"+JSON.stringify(e)}),a=0,l=e.updates;for(r in l)n=l[r],a+=ie.size_difference_for_field_op(i,r,n);return a;case\"D\":return-t.get_record(e.tid,e.rowid)._size;default:throw new Error(\"unrecognized tag \"+e.tag())}}()},W=function(){function t(t,e,r){var n,i;this._tid=t,this._rid=e,null==r&&(r={}),this._fields={},this._size=100;for(n in r)i=r[n],this._fields[n]=ie.clone(i),this._size+=100+ie.value_size(i)}return t.prototype.get=function(t){return this._fields[t]},t.prototype.get_all=function(){return this._fields},t.prototype.put=function(t,e){return null!=e?this._fields[t]=ie.clone(e):delete this._fields[t],void 0},t.prototype.apply_field_op=function(t,e){var r,n,i,o,s,a,u;switch(r=this._fields[t],e.tag()){case\"P\":this._fields[t]=ie.clone(e.value);break;case\"D\":delete this._fields[t];break;case\"LC\":ne(null==r,\"can't create list for field that already exists\"),this._fields[t]=[];break;case\"LP\":ne(te.is_array(r),\"LP on non-list\"),ne(0<=(i=e.at)&&i<r.length,\"bad index for LP\"),r[e.at]=ie.clone(e.value);break;case\"LI\":null!=r?(ne(te.is_array(r),\"LI on non-list\"),ne(0<=(o=e.before)&&o<=r.length,\"bad index for LI\"),r.splice(e.before,0,ie.clone(e.value))):(ne(0===e.before,\"bad index for LI on nonexistent field\"),this._fields[t]=[ie.clone(e.value)]);break;case\"LD\":ne(te.is_array(r),\"LD on non-list\"),ne(0<=(s=e.at)&&s<r.length,\"bad index for LD\"),r.splice(e.at,1);break;case\"LM\":ne(te.is_array(r),\"LM on non-list\"),ne(0<=(a=e.from)&&a<r.length,\"bad from index for LM\"),ne(0<=(u=e.to)&&u<r.length,\"bad to index for LM\"),n=r[e.from],r.splice(e.from,1),r.splice(e.to,0,n);break;default:throw new Error(\"unexpected field op type \"+e.tag())}return void 0},t}(),ee=function(){function t(){this._records={}}return t.prototype.get=function(t){return this._records[t]},t.prototype.put=function(t,e){return null!=e?this._records[t]=e:delete this._records[t],void 0},t.prototype.has=function(t){return null!=this._records[t]},t.prototype.is_empty=function(){var t;for(t in this._records)return!1;return!0},t.prototype.list_record_ids=function(){var t,e;e=[];for(t in this._records)e.push(t);return e},t}(),l=function(){function t(t,e){var r,n,i,o,s,a;this._tables={},this._size=1e3;for(a in e){i=e[a],s=this._get_table(a);for(o in i)r=i[o],n=new W(a,o,r),this._check_record_size(t,a,o,n._size),s.put(o,n),this._size+=n._size}this._check_datastore_size(t,this._size)}return t.from_get_snapshot_resp=function(e){var r,n,i,o,s,a;for(r={},a=e.rows,i=0,o=a.length;o>i;i++)n=a[i],r[s=n.tid]||(r[s]={}),r[n.tid][n.rowid]=n.data;return new t(!1,r)},t.prototype._size_limit_exceeded=function(t,e){var r;if(t)throw r=new Error(e),r.code=\"SIZE_LIMIT_EXCEEDED\",r;return console.warn(e),void 0},t.prototype._check_record_size=function(t,e,r,n){return n>M&&this._size_limit_exceeded(t,\"Record (\"+e+\", \"+r+\") too large: \"+n+\" bytes\"),void 0},t.prototype._check_datastore_size=function(t,e){return e>j&&this._size_limit_exceeded(t,\"Datastore too large: \"+e+\" bytes\"),void 0},t.prototype._TEST_calculate_size_from_scratch=function(){var t,e,r,n,i,o,s,a,u,l,h,c;n=0,l=this._tables;for(o in l)for(i=l[o],h=i.list_record_ids(),a=0,u=h.length;u>a;a++){r=h[a],e=i.get(r),n+=100,c=e.get_all();for(t in c)s=c[t],n+=100+ie.value_size(s)}return n},t.prototype.raw_data=function(){var t,e,r,n,i,o,s,a;\nt={},s=this._tables;for(n in s)for(r=s[n],t[n]={},a=r.list_record_ids(),i=0,o=a.length;o>i;i++)e=a[i],t[n][e]=ie.clone(r.get(e).get_all());return t},t.prototype.get_record=function(t,e){var r;return null!=(r=this._tables[t])?r.get(e):void 0},t.prototype.apply_change=function(t,e){var r,n,i;switch(r=ie.size_difference_for_change(this,e),r>=0&&this._check_datastore_size(t,this._size+r),e.tag()){case\"I\":this._check_record_size(t,e.tid,e.rowid,r),i=this._apply_insert(e);break;case\"U\":n=this.get_record(e.tid,e.rowid),te.assert(null!=n,function(){return\"apply_change: record does not exist: \"+JSON.stringify(e)}),r>=0&&this._check_record_size(t,e.tid,e.rowid,n._size+r),i=this._apply_update(n,e),n._size+=r;break;case\"D\":i=this._apply_delete(e);break;default:throw new Error(\"unrecognized tag \"+e.tag())}return this._size+=r,i},t.prototype._get_table=function(t){return null==this._tables[t]&&(this._tables[t]=new ee),this._tables[t]},t.prototype._apply_insert=function(t){var e,r;return r=this._get_table(t.tid),te.assert(!r.has(t.rowid),function(){return\"_apply_insert: record already exists: \"+JSON.stringify(t)}),e=new W(t.tid,t.rowid,t.fields),r.put(t.rowid,e),null},t.prototype._apply_update=function(t,e){var r,n,i,o,s,a,u;o={};try{a=e.updates;for(n in a)i=a[n],s=ie.clone(null!=(u=t.get(n))?u:null),t.apply_field_op(n,i),o[n]=s}catch(l){r=l;for(n in o)s=o[n],t.put(!1,n,s);throw r}return o},t.prototype._apply_delete=function(t){var e,r,n;return n=this._get_table(t.tid),te.assert(n.has(t.rowid),function(){return\"_apply_delete: record does not exist: \"+JSON.stringify(t)}),r=n.get(t.rowid),e=ie.clone(r.get_all()),n.put(t.rowid,null),n.is_empty()&&delete this._tables[t.tid],e},t.prototype.query=function(t,e){var r,n;return n=this._tables[t],null==n?null:(r=n.get(e),null==r?null:ie.clone(r.get_all()))},t.prototype.list_tables=function(){var t,e;return t=function(){var t;t=[];for(e in this._tables)t.push(e);return t}.call(this),t.sort(),t},t.prototype.list_rows_for_table=function(t){var e,r;return r=this._tables[t],null==r?[]:(e=r.list_record_ids(),e.sort(),e)},t.prototype.size=function(){return this._size},t}(),X=function(){function t(t,e,r,n,i,o){this.dbid=t,this.handle=e,this.datastore_model=r,this.resolver=n,this.sync_state=i,this.flob_client=o,this.syncStateChanged=new x.Util.EventSource,this._deleted=!1,this._open=!0,this._commit_queue=new Q}return t.fresh_managed_datastore=function(e,r,n,i,o,s){var a,u;return a=ie.randomWeb64String(10),u=new Y(a,null,i,[],[]),new t(e,r,n,o,u,s)},t.prototype.get_dsid=function(){return this.dbid},t.prototype.get_handle=function(){return this.handle},t.prototype.is_deleted=function(){return this._deleted},t.prototype.mark_deleted=function(){return this._deleted=!0},t.prototype.open=function(){if(this._open)throw new Error(\"Attempt to open datastore multiple times\");return this._open=!0},t.prototype.close=function(){if(!this._open)throw new Error(\"Attempt to close datastore multiple times\");return this._open=!1},t.prototype._do_sync=function(){var t,e,r,n,i,o,s,a,u,l,h,c,p,d,f,_,y,g,m,v,w,b,S;if(0===this.sync_state.server_deltas.length)return{};for(i=this.resolver.resolve(this.sync_state.unsynced_deltas,this.sync_state.server_deltas),n=i.rebased_deltas,t=i.affected_records,o=this.sync_state.unsynced_deltas.slice().reverse(),a=0,c=o.length;c>a;a++)for(r=o[a],v=r.inverse_changes(),u=0,p=v.length;p>u;u++)e=v[u],this.datastore_model.apply_change(!1,e);for(w=this.sync_state.server_deltas,l=0,d=w.length;d>l;l++)for(r=w[l],b=r.changes,h=0,f=b.length;f>h;h++)e=b[h],this.datastore_model.apply_change(!1,e);for(g=0,_=n.length;_>g;g++)for(r=n[g],r.undo_extras=[],S=r.changes,m=0,y=S.length;y>m;m++)e=S[m],s=this.datastore_model.apply_change(!1,e),r.undo_extras.push(s);return this.sync_state.update_unsynced_deltas(n),t},t.prototype._do_commit=function(){var t,e=this;if(!this.sync_state.delta_pending()&&(t=this.sync_state.get_next_commit(),null!=t))return this._commit_queue.request(function(){return e.flob_client.put_delta(e.handle,t,function(){return e._commit_queue.finish()})})},t.prototype._apply_and_queue_local_change=function(t,e){var r;return r=this.datastore_model.apply_change(t,e),this.sync_state.add_unsynced_change(e,r),void 0},t.prototype._update_mtime=function(){return null},t.prototype.perform_local_change=function(t){return this._apply_and_queue_local_change(!0,t),this._update_mtime(),this.syncStateChanged.dispatch(null)},t.prototype.sync=function(){var t;return this.has_unfinalized_changes&&this.sync_state.finalize(),t=this._do_sync(),this._do_commit(),t},t.prototype.get_outgoing_delta_count=function(){return this.sync_state.unsynced_deltas.length},t.prototype.get_incoming_delta_count=function(){return this.sync_state.server_deltas.length},t.prototype.has_unfinalized_changes=function(){return this.sync_state.has_unfinalized_changes()},t.prototype.receive_server_delta=function(t){return this.sync_state.receive_server_delta(t)?this.syncStateChanged.dispatch(null):this.syncStateChanged.dispatch(null)},t.prototype.query=function(t,e){return this.datastore_model.query(t,e)},t.prototype.list_tables=function(){var t;return function(){var e,r,n,i;for(n=this.datastore_model.list_tables(),i=[],e=0,r=n.length;r>e;e++)t=n[e],\":info\"!==t&&i.push(t);return i}.call(this)},t.prototype.list_rows_for_table=function(t){return this.datastore_model.list_rows_for_table(t)},t}(),Y=function(){function t(t,e,r,n,i){this.last_nonce=t,this.pending_delta=e,this.last_rev=r,this.unsynced_deltas=n,this.server_deltas=i,te.uint(this.last_rev,\"last_rev\")}return t.prototype.is_current=function(){return 0===this.unsynced_deltas.length&&0===this.server_deltas.length},t.prototype.add_unsynced_change=function(t,e){var r;return r=this.unsynced_deltas.length,0===r||this.unsynced_deltas[r-1].finalized?this.unsynced_deltas.push(new z([t],[e])):this.unsynced_deltas[r-1].add_change(t,e)},t.prototype._compact_deltas=function(){var t,e,r,n,i,o,s,a,u,l,h,c,p,d;if(n=this.unsynced_deltas.length,!(1>=n)){for(e=[],o=[],r=s=0,c=n-1;c>=0?c>s:s>c;r=c>=0?++s:--s){for(p=this.unsynced_deltas[r].changes,a=0,l=p.length;l>a;a++)t=p[a],e.push(t);for(d=this.unsynced_deltas[r].undo_extras,u=0,h=d.length;h>u;u++)i=d[u],o.push(i)}return this.unsynced_deltas=[new z(e,o,!0),this.unsynced_deltas[n-1]]}},t.prototype.get_next_commit=function(){var t,e,r;return ne(null==this.pending_delta,\"delta pending\"),t=this.unsynced_deltas.length,0===t?null:(this._compact_deltas(),e=this.unsynced_deltas[0],e.finalized?(r=this.last_nonce,this.pending_delta=e[\"package\"](r,this.last_rev),this.pending_delta):null)},t.prototype.clear_pending=function(){return this.pending_delta=null},t.prototype.delta_pending=function(){return null!=this.pending_delta},t.prototype.has_unfinalized_changes=function(){var t,e;return e=this.unsynced_deltas.length,0===e?!1:(t=this.unsynced_deltas[e-1],!t.finalized)},t.prototype.finalize=function(){var t;if(this.has_unfinalized_changes())return t=this.unsynced_deltas[this.unsynced_deltas.length-1],ne(!t.finalized,\"last delta already finalized\"),t.finalized=!0},t.prototype.update_unsynced_deltas=function(t){return this.unsynced_deltas=t,this.last_rev+=this.server_deltas.length,this.server_deltas=[]},t.prototype.is_ours=function(t){return this.last_nonce===t.nonce},t.prototype.ack=function(t){return ne(this.is_ours(t),\"not ours\"),ne(null!=this.pending_delta,\"no pending delta\"),ne(0===this.server_deltas.length,\"server deltas exist\"),this.pending_delta=null,this.unsynced_deltas.shift(),this.last_rev++},t.prototype.receive_server_delta=function(t){var e,r;return r=this.server_deltas.length,e=r>0?this.server_deltas[r-1].rev+1:this.last_rev,ne(t.rev<=e,\"was expecting rev \"+e+\", but got \"+t.rev+\" instead!\"),t.rev<e?(console.warn(\"received old delta!\"),!1):this.is_ours(t)?(this.ack(t),!1):(this.server_deltas.push(t),this.pending_delta=null,!0)},t}(),ie.DatastoreModel=l,V=function(){function t(t){this.update_manager=t,this.cancelled=!1,this.cancel_fn=null}return t.prototype.cancel=function(){return null!=this.cancel_fn&&this.cancel_fn(),this.cancelled=!0},t.prototype.poll=function(){var t,e=this;return t=function(){var r;if(!e.cancelled)return r=ie.clone(e.update_manager._handle_version_map),e.cancel_fn=e.update_manager.flob_client.await(r,e.update_manager._last_dslist_token,function(n,i){var o,s,a,u,l,h,c,p,d,f;if(e.cancel_fn=null,n)return 0===n.status?(console.log(\"await deltas failed (offline):\",n),setTimeout(t,1e4)):n.status&&500<=(p=n.status)&&599>=p?(console.log(\"server error:\",n),setTimeout(t,2e3)):(console.error(\"Got error in longpoll:\",n),setTimeout(t,1e4));if(null!=i.get_deltas){d=i.get_deltas.deltas;for(u in d)if(s=d[u],null!=s.notfound)e.update_manager._data_queue.push({handle:u,notfound:s.notfound}),delete e.update_manager._handle_version_map[u];else if(null!=s.deltas){for(f=s.deltas,h=0,c=f.length;c>h;h++)a=f[h],e.update_manager._data_queue.push({handle:u,delta:a});l=r[u]+s.deltas.length,o=e.update_manager._handle_version_map[u],null!=o&&(e.update_manager._handle_version_map[u]=Math.max(o,l))}}return null!=i.list_datastores&&(e.update_manager._last_dslist_token=i.list_datastores.token,e.update_manager._data_queue.push({dslist:i.list_datastores})),setTimeout(t,0)})},t()},t}(),U=function(){function t(t){this.flob_client=t,this._data_queue=null,this._handle_version_map={},this._last_dslist_token=\".\",this._pending_poll=null,this._running=!1}return t.prototype.run=function(t){return this._data_queue=new o(t),this._running=!0,this._do_longpoll()},t.prototype.stop=function(){return this._pending_poll?this._pending_poll.cancel():void 0},t.prototype.add_poll=function(t,e){var r,n;return ne(this._running,\"update manager is not running\"),r=this._handle_version_map[t],n=e,null!=r&&(n=Math.max(e,r)),this._handle_version_map[t]=n,this._do_longpoll()},t.prototype.remove_poll=function(t){return ne(this._running,\"update manager is not running\"),t in this._handle_version_map?(delete this._handle_version_map[t],this._do_longpoll()):void 0},t.prototype._do_longpoll=function(){return ne(this._running,\"update manager is not running\"),this._pending_poll&&(this._pending_poll.cancel(),this._pending_poll=null),this._pending_poll=new V(this),this._pending_poll.poll()},t}(),H=function(){function t(t,e){this.update_manager=t,this.flob_client=e,this.update_manager.run(this._handle_server_update.bind(this)),this._cached_objects={},this._dslist_listener=null,this._handle_to_dsid_map={}}return t.prototype.destroy=function(){var t;for(t in this._cached_objects)this._cached_objects[t].close();return this.update_manager.stop()},t.prototype.set_dslist_listener=function(t){return this._dslist_listener=t},t.prototype._evict=function(t){var e;return e=this._handle_to_dsid_map[t],null!=e?(delete this._handle_to_dsid_map[t],e in this._cached_objects&&this._cached_objects[e].mark_deleted(),this.update_manager.remove_poll(t)):void 0},t.prototype.close=function(t){var e;if(t in this._cached_objects)return e=this._cached_objects[t].get_handle(),this._cached_objects[t].close();throw new Error(\"Attempt to close unknown datastore: \"+t)},t.prototype._handle_server_update=function(t,e){var r,n,i;return t.dslist?(this._dslist_listener&&this._dslist_listener(t.dslist),e(null)):(i=t.handle,r=this._handle_to_dsid_map[i],null==r?(console.log(\"unknown handle \"+i+\" (maybe datastore was evicted)\",t,this._handle_to_dsid_map,this._cached_objects),e(null)):(n=t.delta,null!=t.notfound?(this._evict(i),e(null)):this._retrieve(r,i,function(t,r){return t?e(t):(r.receive_server_delta(n),e(null))})))},t.prototype.open=function(t,e,r){return this._cached_objects[t]&&this._cached_objects[t].open(),this._retrieve(t,e,r)},t.prototype._retrieve=function(t,e,r){var n,i=this;return n=this._cached_objects[t],null!=n?r(null,n):(this._handle_to_dsid_map[e]=t,this.flob_client.get_snapshot(e,function(n,o){var s,a,u;return null!=n?r(n):null!=i._cached_objects[t]?r(null,i._cached_objects[t]):(s=l.from_get_snapshot_resp(o),u=new D,a=X.fresh_managed_datastore(t,e,s,o.rev,u,i.flob_client),i.update_manager.add_poll(e,a.sync_state.last_rev),i._cached_objects[t]=a,r(null,a))}))},t}(),ie.FieldOpTransformer=C=function(){function t(t){var i,o,s,a,l,h,c,p,d,g,m,v=this;for(this.rule_name=null!=t?t:\"default\",this.precedence=n[this.rule_name],this._transforms={},s=0,h=r.length;h>s;s++)o=r[s],this._transforms[o]={};for(m=[\"P\",\"D\"],a=0,c=m.length;c>a;a++)for(o=m[a],l=0,p=e.length;p>l;l++)i=e[l],this._transforms[o][i]=f,this._transforms[i][o]=_;for(g=0,d=e.length;d>g;g++)i=e[g],\"LC\"===i?this._transforms.LC.LC=function(){return[null,null]}:(this._transforms.LC[i]=_,this._transforms[i].LC=f);this._transforms.P.P=function(t,e){var r;return r=v.precedence(t.value,e.value),\"left\"===r?[t,null]:[null,e]},this._transforms.P.D=function(t,e){var r;return r=v.precedence(t.value,null),\"left\"===r?[t,null]:[null,e]},this._transforms.D.P=function(t,e){var r;return r=v.precedence(null,e.value),\"left\"===r?[t,null]:[null,e]},this._transforms.D.D=function(t,e){var r;return r=v.precedence(null,null),\"left\"===r?[t,null]:[null,e]},this._transforms.LP.LP=function(t,e){var r;return t.at!==e.at?[t,e]:(r=v.precedence(t.value,e.value),\"left\"===r?[t,null]:[null,e])},this._transforms.LP.LI=function(t,e){var r;return r=u(t),r.at+=e.before<=t.at?1:0,[r,e]},this._transforms.LP.LD=function(t,e){var r;return t.at===e.at?[null,e]:(r=u(t),r.at-=e.at<t.at?1:0,[r,e])},this._transforms.LP.LM=function(t,e){var r;return r=u(t),t.at===e.from?r.at=e.to:(r.at-=e.from<r.at?1:0,r.at+=e.to<=r.at?1:0),[r,e]},this._transforms.LI.LP=y(this._transforms.LP.LI),this._transforms.LI.LI=function(t,e){var r,n,i;return i=[u(t),u(e)],r=i[0],n=i[1],t.before<e.before?n.before+=1:r.before+=1,[r,n]},this._transforms.LI.LD=function(t,e){var r,n,i;return i=[u(t),u(e)],r=i[0],n=i[1],r.before-=e.at<t.before?1:0,n.at+=t.before<=e.at?1:0,[r,n]},this._transforms.LI.LM=function(t,e){var r,n,i,o;return o=[u(t),u(e)],n=o[0],i=o[1],t.before===e.to+1&&e.from<=e.to?[t,e]:t.before===e.to&&e.from>e.to?(n.before++,i.from++,[n,i]):(r=e.from<t.before?t.before-1:t.before,i.from+=t.before<=e.from?1:0,n.before=e.to<r?r+1:r,i.to+=r<=e.to?1:0,[n,i])},this._transforms.LD.LP=y(this._transforms.LP.LD),this._transforms.LD.LI=y(this._transforms.LI.LD),this._transforms.LD.LD=function(t,e){var r,n,i;return t.at===e.at?[null,null]:(i=[u(t),u(e)],r=i[0],n=i[1],t.at<e.at?n.at-=1:r.at-=1,[r,n])},this._transforms.LD.LM=function(t,e){var r,n,i;return t.at===e.from?(r=u(t),r.at=e.to,[r,null]):(i=[u(t),u(e)],r=i[0],n=i[1],r.at-=e.from<r.at?1:0,r.at+=e.to<=r.at?1:0,n.to+=n.from<n.to?1:0,n.from-=t.at<n.from?1:0,n.to-=t.at<n.to?1:0,n.to-=n.from<n.to?1:0,[r,n])},this._transforms.LM.LP=y(this._transforms.LP.LM),this._transforms.LM.LI=function(t,e){var r,n,i,o;return o=[u(t),u(e)],n=o[0],i=o[1],e.before===t.to+1&&t.from<=t.to?[t,e]:e.before===t.to&&t.from>t.to?(n.from++,n.to++,[n,i]):(r=t.from<e.before?e.before-1:e.before,n.from+=e.before<=t.from?1:0,i.before=t.to<r?r+1:r,n.to+=r<=t.to?1:0,[n,i])},this._transforms.LM.LD=y(this._transforms.LD.LM),this._transforms.LM.LM=function(t,e){var r,n,i,o,s,a,l,h,c,p,d;return t.from===e.from?t.to===e.to?[null,null]:e.from===e.to?[t,e]:(o=u(e),o.from=t.to,[null,o]):t.to===t.from?(i=u(t),i.from+=(e.to<=t.from)-(e.from<t.from),t.from===e.to&&e.from<e.to&&i.from--,i.to=i.from,[i,e]):e.to===e.from?(o=u(e),o.from+=(t.to<=e.from)-(t.from<e.from),o.to=o.from,[t,o]):(l=[u(t),u(e)],i=l[0],o=l[1],t.to===e.to&&t.from>t.to&&e.from>e.to?(i.to++,e.from>t.from?i.from++:o.from++,[i,o]):t.from===e.to&&e.from===t.to&&t.from<t.to?(o.from--,i.from++,[i,o]):t.from>t.to&&e.from<e.to&&e.to+1===t.to?[t,e]:(h=[t.to,t.from],s=h[0],r=h[1],s+=t.from<s?1:0,s-=e.from<s?1:0,s+=e.to<s?1:0,r-=e.from<r?1:0,r+=e.to<=r?1:0,s-=s>r?1:0,c=[e.to,e.from],a=c[0],n=c[1],a+=e.from<a?1:0,a-=t.from<a?1:0,a+=t.to<=a?1:0,n-=t.from<n?1:0,n+=t.to<=n?1:0,a-=a>n?1:0,p=[s,r],i.to=p[0],i.from=p[1],d=[a,n],o.to=d[0],o.from=d[1],[i,o]))}}var e,r,n,i,o,s,a,u,l,h,c,p,d,f,_,y,g,m,v;for(y=function(t){return ne(null!=t),function(e,r){var n,i,o;return o=t(r,e),n=o[0],i=o[1],[i,n]}},i=[\"null\",\"bool\",\"num\",\"str\",\"blob\",\"ts\",\"list\"],o={},h=m=0,v=i.length;v>m;h=++m)g=i[h],o[g]=h;return l=function(t){if(null==t)return\"null\";if(te.is_bool(t))return\"bool\";if(null!=t.I||te.is_number(t))return\"num\";if(te.is_string(t))return\"str\";if(null!=t.B)return\"blob\";if(null!=t.T)return\"ts\";if(te.is_array(t))return\"list\";throw new Error(\"Unrecognized value \"+t)},d=function(t){return te.is_number(t)||null!=t.I},s=function(t){return null!=t.I?parseInt(t.I):t},p=function(t,e){var r,n,i;for(r=n=0,i=t.length;i>=0?i>n:n>i;r=i>=0?++n:--n){if(r>=e.length)return!1;if(c(t[r],e[r]))return!0;if(c(e[r],t[r]))return!1}return e.length>t.length},t._is_less_than=c=function(t,e){var r,n;if(r=l(t),n=l(e),r!==n)return o[r]<o[n];if(\"null\"===r)return!1;if(\"bool\"===r)return e&&!t;if(\"num\"===r)return null!=t.I&&null!=e.I?ie.int64_string_less_than(t.I,e.I):s(t)<s(e);if(\"str\"===r)return e>t;if(\"blob\"===r)return t.B<e.B;if(\"ts\"===r)return parseInt(t.T,10)<parseInt(e.T,10);if(\"list\"===r)return p(t,e);throw new Error(\"unknown type \"+r)},t._compute_sum=a=function(t,e,r){var n,i,o,s,a,u;return n=null!=t.I&&null!=e.I&&null!=r.I,null!=t.I&&(t=parseInt(t.I)),null!=e.I&&(e=parseInt(e.I)),null!=r.I&&(r=parseInt(r.I)),s=0x8000000000000000,a=0x10000000000000000,u=0xfffffffffffff800,i=e-t,o=r+i,n&&(o>=s&&(o-=u),-s>o&&(o+=u),o={I:\"\"+o}),o},_=function(t,e){return[null,e]},f=function(t){return[t,null]},r=[\"P\",\"D\",\"LC\",\"LP\",\"LI\",\"LD\",\"LM\"],e=[\"LC\",\"LP\",\"LI\",\"LD\",\"LM\"],t.copy=u=function(t){return T.from_array(JSON.parse(JSON.stringify(t)))},n={\"default\":function(){return\"right\"},remote:function(){return\"right\"},local:function(){return\"left\"},min:function(t,e){return c(t,e)?\"left\":\"right\"},max:function(t,e){return c(t,e)?\"right\":\"left\"},sum:function(){return\"right\"}},t.prototype.transform=function(t,e,r){var n,i,o,s,u;return null==r&&(r=null),\"sum\"===this.rule_name&&\"P\"===t.tag()&&\"P\"===e.tag()&&(null==r&&(r={I:\"0\"}),d(r)&&d(t.value)&&d(e.value))?(o=a(r,t.value,e.value),n=i=T.from_array([\"P\",o]),[n,i,e.value]):(s=this._transforms[t.tag()][e.tag()](t,e),u=function(){switch(e.tag()){case\"P\":return e.value;case\"D\":return null;default:return{L:!0}}}(),s.push(u),s)},t}(),ie.ChangeTransformer=i=function(){function t(){this._transform_rules={},this._default_transformer=new C}var e,r,i,o,s,a,u,l;for(e={},l=[\"default\",\"local\",\"remote\",\"min\",\"max\",\"sum\"],a=0,u=l.length;u>a;a++)i=l[a],e[i]=new C(i);return s=function(t){return ne(null!=t),function(e,r){var n,i,o;return o=t(r,e),n=o[0],i=o[1],[i,n]}},r=function(t){return t instanceof Array?t.slice():t},o=function(t,e){return t.tid===e.tid&&t.rowid===e.rowid},t.is_no_op=function(t){var e,r,n;if(\"U\"!==t.tag())return!1;n=t.updates;for(r in n)return e=n[r],!1;return!0},t.compact=function(t){var e,r,n,i;for(e=[],n=0,i=t.length;i>n;n++)r=t[n],this.is_no_op(r)||e.push(r);return e},t.prototype.set_field_transformer=function(t,r,n){var i;return null==(i=this._transform_rules)[t]&&(i[t]={}),this._transform_rules[t][r]=e[n]},t.prototype.get_field_transformer=function(t,r){var n;return t in this._transform_rules?null!=(n=this._transform_rules[t][r])?n:this._default_transformer:e[\"default\"]},t.prototype.transform_ii=function(t,e){var i,s,a;return o(t,e)?(i=function(t){var e,i,o,s,a;o={},a=t.fields;for(i in a)s=a[i],o[i]=T.from_array([\"P\",r(s)]);return e=n.from_array([\"U\",t.tid,t.rowid,o]),e.undo_extra={},e},s=i(t),a=i(e),this.transform_uu(s,a)):[[t],[e]]},t.prototype.transform_iu=function(t,e){return o(t,e)?ne(!1,\"Couldn't have updated a row that hasn't been inserted yet!\"):[[t],[e]]},t.prototype.transform_id=function(t,e){return o(t,e)?ne(!1,\"Couldn't have deleted a row that hasn't been inserted yet!\"):[[t],[e]]},t.prototype.transform_ui=s(t.prototype.transform_iu),t.prototype.transform_uu=function(t,e){var r,i,s,a,u,l,h,c,p,d,f,_,y,g,m,v,w,b,S;if(!o(t,e))return[[t],[e]];g=[{},{}],p=g[0],d=g[1],c={},m=t.updates;for(s in m)r=m[s],s in e.updates?(i=e.updates[s],f=null!=(w=t.undo_extra[s])?w:null,_=this.get_field_transformer(t.tid,s),b=_.transform(r,i,f),a=b[0],u=b[1],y=b[2],null!=a&&(p[s]=a,c[s]=null!=y?y:null),null!=u&&(d[s]=u)):(p[s]=r,c[s]=null!=(v=t.undo_extra[s])?v:null);S=e.updates;for(s in S)i=S[s],s in t.updates||(d[s]=i);return l=n.from_array([\"U\",t.tid,t.rowid,p]),l.undo_extra=c,h=n.from_array([\"U\",e.tid,e.rowid,d]),[[l],[h]]},t.prototype.transform_ud=function(t,e){return o(t,e)?[[],[e]]:[[t],[e]]},t.prototype.transform_di=s(t.prototype.transform_id),t.prototype.transform_du=s(t.prototype.transform_ud),t.prototype.transform_dd=function(t,e){return o(t,e)?[[],[]]:[[t],[e]]},t}(),ie.DefaultResolver=D=function(){function t(){this._change_transformer=new i}return t.prototype.add_resolution_rule=function(t,e,r){return this._change_transformer.set_field_transformer(t,e,r)},t.prototype._transform_one=function(t,e){var r,n,o,s,a;return r=function(t){switch(t.tag()){case\"I\":return\"i\";case\"U\":return\"u\";case\"D\":return\"d\";default:throw new Error(\"unrecognized op type \"+t.tag())}},s=\"transform_\"+r(t)+r(e),a=this._change_transformer[s](t,e),n=a[0],o=a[1],n=i.compact(n),o=i.compact(o),[n,o]},t.prototype._transform_list=function(t,e){var r,n,i,o,s,a,u,l,h,c,p,d,f,_;if(0===t.length)return[[],e];if(0===e.length)return[t,[]];for(r=t[0],n=e[0],d=this._transform_one(r,n),o=d[0],s=d[1],f=this._transform_list(t.slice(1),s),i=f[0],s=f[1],l=0,c=i.length;c>l;l++)a=i[l],o.push(a);for(_=this._transform_list(o,e.slice(1)),o=_[0],u=_[1],h=0,p=u.length;p>h;h++)a=u[h],s.push(a);return[o,s]},t.prototype._resolve=function(t,e){var r,n,i,o,s,a,u;for(o=e.slice(),n=[],s=0,a=t.length;a>s;s++)i=t[s],u=this._transform_list(i,o),r=u[0],o=u[1],n.push(r);return[n,o]},t.prototype.resolve=function(t,e){var r,i,o,s,a,u,l,h,c,p,d,f,_,y,g,m,v,w,b,S,D,E,A,x,O,U,T,C,k,I,R,P;for(d=[],m=0,S=t.length;S>m;m++){for(h=t[m],i=[],I=h.changes,p=v=0,D=I.length;D>v;p=++v)s=I[p],u=n.from_array(JSON.parse(JSON.stringify(s))),u.undo_extra=ie.clone(h.undo_extras[p]),i.push(u);d.push(i)}for(y=[],w=0,E=e.length;E>w;w++)for(h=e[w],R=h.changes,b=0,A=R.length;A>b;b++)o=R[b],y.push(o);for(P=this._resolve(d,y),f=P[0],l=P[1],_=[],p=T=0,x=f.length;x>T;p=++T){for(a=f[p],g=null,c=t[p].finalized,C=0,O=a.length;O>C;C++)s=a[C],delete s.undo_extra;a.length>0&&_.push(new z(a,g,c))}for(r={},k=0,U=l.length;U>k;k++)o=l[k],o.tid in r||(r[o.tid]={}),r[o.tid][o.rowid]=!0;return{rebased_deltas:_,affected_records:r}},t}(),Q=function(){function t(){this._waiting=[],this._running=!1}return t.prototype._run_next=function(){var t;this._running||this._waiting.length>0&&(t=this._waiting[0],this._waiting.shift(),this._running=!0,t())},t.prototype.request=function(t){return this._waiting.push(t),this._run_next()},t.prototype.finish=function(){return this._running=!1,setTimeout(this._run_next.bind(this),0)},t}(),o=function(){function t(t){this.consumer=t,this.items=[],this.sync_queue=new Q}return t.prototype.consume=function(){var t=this;return this.sync_queue.request(function(){var e;return 0===t.items.length?t.sync_queue.finish():(e=t.items.shift(),t.consumer(e,function(e){if(e)throw e;return t.sync_queue.finish(),t.consume()}))})},t.prototype.push=function(t){return this.items.push(t),this.consume()},t.prototype.run=function(){return this.consume()},t}(),ie.clone=function(t){var e,r,n,i,o,s,a;if(t instanceof Array){for(a=[],o=0,s=t.length;s>o;o++)e=t[o],a.push(ie.clone(e));return a}if(null!=t&&\"object\"==typeof t){n={};for(r in t)i=t[r],n[r]=ie.clone(i);return n}return t},ie.WEB64_ALPHABET=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",ie.randomElement=function(t){return t[Math.floor(Math.random()*t.length)]},ie.randomWeb64String=function(t){var e;return function(){var r,n;for(n=[],e=r=0;t>=0?t>r:r>t;e=t>=0?++r:--r)n.push(ie.randomElement(ie.WEB64_ALPHABET));return n}().join(\"\")},ie.uint8ArrayFromBase64String=function(t){var e,r,n,i,o;for(t=t.replace(\"-\",\"+\").replace(\"_\",\"/\"),e=x.Util.atob(t),n=e.length,i=new Uint8Array(n),r=o=0;n>=0?n>o:o>n;r=n>=0?++o:--o)i[r]=e.charCodeAt(r);return i},ie.dbase64FromBase64=function(t){return t.replace(/[+]/g,\"-\").replace(/[/]/g,\"_\").replace(/[\\=]+$/g,\"\")},ie.base64StringFromUint8Array=function(t){var e,r,n,i,o;for(r=\"\",i=0,o=t.length;o>i;i++)e=t[i],r+=String.fromCharCode(e);return n=x.Util.btoa(r),ie.dbase64FromBase64(n)},ie.INT64_TAG=\"dbxInt64\",ie.isInt64=function(t){var e;return t&&\"object\"==typeof t&&t.constructor===Number&&isFinite(t)?(e=t[ie.INT64_TAG],!te.is_string(e)||\"0\"!==e&&!ie.nonzero_int64_approximate_regex.test(e)?!1:!0):!1},ie.validateInt64=function(t){var e,r;if(!t&&\"object\"==typeof t&&t.constructor===Number&&isFinite(t))throw new Error(\"Not a finite boxed number: \"+t);if(r=t[ie.INT64_TAG],!te.is_string(r)||\"0\"!==r&&!ie.nonzero_int64_approximate_regex.test(r))throw new Error(\"Missing or invalid tag in int64: \"+r);if(e=parseInt(r,10),e!==Number(t))throw new Error(\"Tag in int64 does not match value \"+Number(t)+\": \"+r);return t},ie.toDsValue=function(t,e){var r,n;if(null==e&&(e=!0),null===t||\"undefined\"==typeof t)throw new Error(\"Bad value: \"+t);if(te.is_string(t))return t;if(te.is_bool(t))return t;if(te.is_number(t)){if(null!=t[ie.INT64_TAG])return ie.validateInt64(t),{I:t[ie.INT64_TAG]};if(isFinite(t))return t;if(isNaN(t))return{N:\"nan\"};if(1/0===Number(t))return{N:\"+inf\"};if(Number(t)===-1/0)return{N:\"-inf\"};throw new Error(\"Unexpected number: \"+t)}if(te.is_array(t)){if(e)return function(){var e,r,i;for(i=[],e=0,r=t.length;r>e;e++)n=t[e],i.push(ie.toDsValue(n,!1));return i}();throw new Error(\"Nested array not allowed: \"+JSON.stringify(t))}if(te.is_date(t))return r=Math.round(t.getTime()),{T:\"\"+r};if(te.isUint8Array(t))return{B:ie.base64StringFromUint8Array(t)};throw new Error(\"Unexpected object: \"+JSON.stringify(t))},ie.fromDsValue=function(t,e,r,n){if(te.is_string(n))return n;if(te.is_bool(n))return n;if(te.is_number(n))return n;if(te.is_array(n))return new x.Datastore.List(t,e,r);if(\"object\"!=typeof n)throw new Error(\"Unexpected value: \"+n);if(null!=n.I)return x.Datastore.int64(n.I);if(null==n.N){if(null!=n.B)return ie.uint8ArrayFromBase64String(n.B);if(null!=n.T)return new Date(parseInt(n.T,10));throw new Error(\"Unexpected object: \"+JSON.stringify(n))}switch(n.N){case\"nan\":return 0/0;case\"+inf\":return 1/0;case\"-inf\":return-1/0;default:throw new Error(\"Unexpected object: \"+JSON.stringify(n))}},ie.matchDsValues=function(t,e){var r,n,i,o,s;n=function(t,e){if(null==t)throw new Error(\"Unexpected object: \"+t);return null==e?!1:r(t,e)},r=function(t,e){var r,i,o,s,a,u;if(ie.toDsValue(t),te.is_string(t)&&te.is_string(e))return String(t)===String(e);if(te.is_bool(t)&&te.is_bool(e))return\"object\"==typeof t&&(t=t.valueOf()),\"object\"==typeof e&&(e=e.valueOf()),Boolean(t)===Boolean(e);if(te.is_number(t)&&(te.is_number(e)||null!=e.N||null!=e.I))return e=ie.fromDsValue(void 0,void 0,void 0,e),t[ie.INT64_TAG]&&e[ie.INT64_TAG]?(s=[x.Datastore.int64(t),x.Datastore.int64(e)],t=s[0],e=s[1],String(t[ie.INT64_TAG])===String(e[ie.INT64_TAG])):isNaN(t)&&isNaN(e)?!0:Number(t)===Number(e);if(te.is_array(t)&&te.is_array(e)){if(t.length!==e.length)return!1;for(r=i=0,a=t.length-1;a>=0?a>=i:i>=a;r=a>=0?++i:--i)if(!n(t[r],e[r]))return!1;return!0}if(te.is_date(t)&&(te.is_date(e)||null!=e.T))return null!=e.T&&(e=ie.fromDsValue(void 0,void 0,void 0,e)),t-0===e-0;if(te.isUint8Array(t)&&(te.isUint8Array(e)||null!=e.B)){if(null!=e.B&&(e=ie.fromDsValue(void 0,void 0,void 0,e)),t.length!==e.length)return!1;for(r=o=0,u=t.length-1;u>=0?u>=o:o>=u;r=u>=0?++o:--o)if(t[r]!==e[r])return!1;return!0}return!1};for(i in t)if(s=t[i],o=n(s,e[i]),!o)return o;return!0},G=function(){function t(t){this._datastore=t,this._cache={}}return t.prototype.get=function(t,e){return null==this._cache[t]?null:this._cache[t][e]},t.prototype.getOrCreate=function(t,e){var r;return null==this._cache[t]&&(this._cache[t]={}),r=this._cache[t][e],null==r&&(r=this._cache[t][e]=new x.Datastore.Record(this._datastore,t,e)),r},t.prototype.remove=function(t,e){return delete this._cache[t][e],te.is_empty(this._cache[t])&&delete this._cache[t],void 0},t}(),O=function(){function t(){this._registered_handlers=[]}return t.prototype.register=function(t,e){return t.addListener(e),this._registered_handlers.push([t,e]),void 0},t.prototype.unregister_all=function(){var t,e,r,n,i,o;for(i=this._registered_handlers,r=0,n=i.length;n>r;r++)o=i[r],e=o[0],t=o[1],e.removeListener(t);return void 0},t}(),x.Datastore.DatastoreInfo=function(){function t(t,e,r){this._dsid=t,this._handle=e,this._info_record_data=r}return t.prototype.toString=function(){return\"Datastore.DatastoreInfo(\"+this._dsid+\")\"},t.prototype.getId=function(){return this._dsid},t.prototype.getHandle=function(){return this._handle},t.prototype.getTitle=function(){var t;return null!=(t=this._info_record_data)?t.title:void 0},t.prototype.getModifiedTime=function(){var t;return null!=(t=this._info_record_data)?t.mtime:void 0},t}(),x.Datastore.DatastoreListChanged=function(){function t(t){this._dsinfos=t}return t.prototype.toString=function(){return\"Datastore.DatastoreListChanged(\"+this._dsinfos.length+\" datastores)\"},t.prototype.getDatastoreInfos=function(){return this._dsinfos},t}(),x.Datastore.impl.EventSourceWithInitialData=function(t){function e(t){this.options=t,e.__super__.constructor.call(this,t),this._have_event=!1,this._last_event=null,this._listenersChanged=new x.Util.EventSource}return ue(e,t),e.prototype._clearLastEvent=function(){return this._have_event=!1,this._last_event=null},e.prototype.addListener=function(t){var r;return r=e.__super__.addListener.call(this,t),this._have_event&&t(event),this._listenersChanged.dispatch(this._listeners),r},e.prototype.removeListener=function(t){var r;return r=e.__super__.removeListener.call(this,t),this._listenersChanged.dispatch(this._listeners),r},e.prototype.dispatch=function(t){return this._last_event=t,this._have_event=!0,e.__super__.dispatch.call(this,t)},e}(x.Util.EventSource),a=\"default\",x.Datastore.DatastoreManager=function(){function t(t){var e=this;if(!t.isAuthenticated())throw new Error(\"DatastoreManager requires an authenticated Dropbox.Client!\");this._flob_client=new k(t),this._datasync=new h(this._flob_client),this._dslist_initialized=!1,this.datastoreListChanged=new x.Datastore.impl.EventSourceWithInitialData,this.datastoreListChanged._listenersChanged.addListener(function(t){return 0!==t.length?e._init_live_dslist():void 0})}return t.prototype.datastoreListChanged=null,t.prototype.close=function(){return this._datasync.close()},t.prototype.toString=function(){return\"Datastore.DatastoreManager()\"},t.prototype._datastoreInfoFromListDatastoresResponseItem=function(t){var e,r,n,i,o;if(null!=t.info){e={},o=t.info;for(r in o)i=o[r],e[r]=te.is_array(i)?function(){var t,e,r;for(r=[],t=0,e=i.length;e>t;t++)n=i[t],r.push(ie.fromDsValue(null,null,null,n));return r}():ie.fromDsValue(null,null,null,i)}else e=null;return new x.Datastore.DatastoreInfo(t.dsid,t.handle,e)},t.prototype._getDatastoreInfosFromListResponse=function(t){var e;return function(){var r,n,i,o;for(i=t.datastores,o=[],r=0,n=i.length;n>r;r++)e=i[r],o.push(this._datastoreInfoFromListDatastoresResponseItem(e));return o}.call(this)},t.prototype._init_live_dslist=function(){var t,e=this;if(!this._dslist_initialized)return this._dslist_initialized=!0,t=function(t){return e.datastoreListChanged.dispatch(new x.Datastore.DatastoreListChanged(e._getDatastoreInfosFromListResponse(t)))},this._datasync.obj_manager.set_dslist_listener(t),this._flob_client.list_dbs(function(e,r){return e?(console.warn(\"Failed to get datastore list\"),void 0):t(r)})},t.prototype._wrapDatastore=function(t,e){return e&&(t._update_mtime(),t.sync()),new x.Datastore(this,t)},t.prototype._getOrCreateDatastoreByDsid=function(t,e){var r=this;return this._datasync.get_or_create(t,function(t,n,i){return null!=t?e(t):e(null,r._wrapDatastore(n,i))}),void 0},t.prototype._createDatastore=function(t,e,r){var n=this;return this._datasync.create(t,e,function(t,e,i){return null!=t?r(t):r(null,n._wrapDatastore(e,i))}),void 0},t.prototype._getExistingDatastoreByDsid=function(t,e){var r=this;\nreturn this._datasync.get_by_dsid(t,function(t,n){return null!=t?e(t):e(null,new x.Datastore(r,n))}),void 0},t.prototype.openDefaultDatastore=function(t){return this._getOrCreateDatastoreByDsid(a,t)},t.prototype.openDatastore=function(t,e){return this._getExistingDatastoreByDsid(t,e),void 0},t.prototype.createDatastore=function(t){var e,r;return r=ie.randomWeb64String(Math.ceil(256/6)),e=\".\"+ie.dbase64FromBase64(x.Util.sha256(r)),this._createDatastore(e,r,t),void 0},t.prototype.deleteDatastore=function(t,e){var r=this;return this._flob_client.get_db(t,function(t,n){return null!=t?e(t):r._flob_client.delete_db(n.handle,function(t){return t?e(t):e(null)})}),void 0},t.prototype.listDatastores=function(t){var e=this;return this.datastoreListChanged._have_event?t(null,this.datastoreListChanged._last_event.getDatastoreInfos()):(this._flob_client.list_dbs(function(r,n){return r?t(r):t(null,e._getDatastoreInfosFromListResponse(n))}),void 0)},t}(),x.Datastore.List=function(){function t(t,e,r){this._datastore=t,this._record=e,this._field=r}return t.prototype.toString=function(){return\"Datastore.List((\"+this._record._tid+\", \"+this._record._rid+\", \"+this._field+\"): \"+JSON.stringify(this._array)+\")\"},t.prototype._array=function(){return this._record._rawFieldValues()[this._field]},t.prototype._checkValid=function(){if(this._record._checkNotDeleted(),!te.is_array(this._array()))throw new Error(\"Attempt to operate on deleted list (\"+this._record._tid+\", \"+this._record._rid+\", \"+this._field+\")\")},t.prototype._storeUpdate=function(t){var e;return e={},e[this._field]=t,this._record._storeUpdate(e),void 0},t.prototype._fixInsertionIndex=function(t){var e,r;if(!te.is_json_number(t))throw new RangeError(\"Index not a number: \"+t);if(e=this._array().length,r=t>=0?t:e+t,r>=0&&e>=r)return r;throw new RangeError(\"Bad index for list of length \"+e+\": \"+t)},t.prototype._fixIndex=function(t){var e,r;if(r=this._fixInsertionIndex(t),e=this._array().length,e>r)return r;throw new RangeError(\"Bad index for list of length \"+e+\": \"+t)},t.prototype.get=function(t){var e;return this._checkValid(),e=ie.clone(this._array()[this._fixIndex(t)]),ie.fromDsValue(void 0,void 0,void 0,e)},t.prototype.set=function(t,e){return this._checkValid(),t=this._fixIndex(t),this._storeUpdate([\"LP\",t,ie.toDsValue(e,!1)]),void 0},t.prototype.length=function(){return this._checkValid(),this._array().length},t.prototype.pop=function(){if(this._checkValid(),0===this._array().length)throw new Error(\"List is empty\");return this.remove(this._array.length-1)},t.prototype.push=function(t){return this._checkValid(),this.insert(this._array().length,t),void 0},t.prototype.shift=function(){if(this._checkValid(),0===this._array().length)throw new Error(\"List is empty\");return this.remove(0)},t.prototype.unshift=function(t){return this.insert(0,t),void 0},t.prototype.splice=function(){var t,e,r,n,i,o,s,a,u;if(n=arguments[0],e=arguments[1],t=3<=arguments.length?le.call(arguments,2):[],this._checkValid(),!te.is_json_number(e)||0>e)throw new RangeError(\"Bad second arg to splice: \"+n+\", \"+e);for(n=this._fixInsertionIndex(n),i=this.slice(n,n+e),r=s=0;e>=0?e>s:s>e;r=e>=0?++s:--s)this.remove(n);for(a=0,u=t.length;u>a;a++)o=t[a],this.insert(n,o),n++;return i},t.prototype.move=function(t,e){return this._checkValid(),t=this._fixIndex(t),e=this._fixIndex(e),t===e?void 0:(this._storeUpdate([\"LM\",t,e]),void 0)},t.prototype.remove=function(t){var e;return this._checkValid(),t=this._fixIndex(t),e=this.get(t),this._storeUpdate([\"LD\",t]),e},t.prototype.insert=function(t,e){return this._checkValid(),t=this._fixInsertionIndex(t),this._storeUpdate([\"LI\",t,ie.toDsValue(e,!1)]),void 0},t.prototype.slice=function(t,e){var r;return this._checkValid(),function(){var n,i,o,s;for(o=this._array().slice(t,e),s=[],n=0,i=o.length;i>n;n++)r=o[n],s.push(ie.fromDsValue(void 0,void 0,void 0,r));return s}.call(this)},t.prototype.toArray=function(){var t;return this._checkValid(),function(){var e,r,n,i;for(n=this._array().slice(),i=[],e=0,r=n.length;r>e;e++)t=n[e],i.push(ie.fromDsValue(void 0,void 0,void 0,t));return i}.call(this)},t}(),x.Datastore.Record=function(){function t(t,e,r){this._datastore=t,this._tid=e,this._rid=r,this._deleted=!1,this._record_cache=this._datastore._record_cache,this._managed_datastore=this._datastore._managed_datastore}return t.prototype.get=function(t){var e;return this._checkNotDeleted(),e=this._rawFieldValues(),t in e?ie.fromDsValue(this._datastore,this,t,e[t]):null},t.prototype.set=function(t,e){var r;return r={},r[t]=e,this.update(r)},t.prototype.getOrCreateList=function(t){var e,r;if(this._checkNotDeleted(),r=this._rawFieldValues(),null==r[t])e={},e[t]=[\"LC\"],this._storeUpdate(e),r=this._rawFieldValues();else if(!te.is_array(r[t]))throw new Error(\"Can't call getOrCreateList on field \"+t+\" for record (\"+this.tid+\", \"+this.rid+\"): existing value \"+r[t]+\" is not a list\");return ie.fromDsValue(this._datastore,this,t,r[t])},t.prototype.getFields=function(){var t,e,r,n;this._checkNotDeleted(),t={},n=this._rawFieldValues();for(e in n)r=n[e],t[e]=ie.fromDsValue(this._datastore,this,e,r);return t},t.prototype.update=function(t){var e,r,n;this._checkNotDeleted(),e={};for(r in t)n=t[r],null!=n?e[r]=[\"P\",ie.toDsValue(n)]:null!=this.get(r)&&(e[r]=[\"D\"]);return te.is_empty(e)||this._storeUpdate(e),this},t.prototype.deleteRecord=function(){var t;return this._checkNotDeleted(),this._deleted=!0,this._record_cache.remove(this._tid,this._rid),t=h.changeFromArray([\"D\",this._tid,this._rid]),this._managed_datastore.perform_local_change(t),this._datastore._recordsChangedLocally([this]),this},t.prototype.has=function(t){var e;return this._checkNotDeleted(),e=this._rawFieldValues(),t in e},t.prototype.getId=function(){return this._rid},t.prototype.getTable=function(){return this._datastore.getTable(this._tid)},t.prototype.isDeleted=function(){return this._deleted},t.prototype.toString=function(){var t;return t=this.isDeleted()?\"deleted\":JSON.stringify(this.getFields()),\"Datastore.Record((\"+this._tid+\", \"+this._rid+\"): \"+t+\")\"},t.prototype._rawFieldValues=function(){return this._managed_datastore.query(this._tid,this._rid)},t.prototype._storeUpdate=function(t){var e;e=h.changeFromArray([\"U\",this._tid,this._rid,t]),this._managed_datastore.perform_local_change(e),this._datastore._recordsChangedLocally([this])},t.isValidId=function(t){var e;return e=new RegExp(te.SS_ID_REGEX),te.is_string(t)&&e.test(t)},t.prototype._checkNotDeleted=function(){if(this._deleted)throw new Error(\"Attempt to operate on deleted record (\"+this._tid+\", \"+this._rid+\")\")},t}(),x.Datastore.RecordsChanged=function(){function t(t,e){this._recordsByTable=t,this._local=e}return t.prototype.toString=function(){var t,e,r,n,i,o,s;i=0,r=0,s=this._recordsByTable;for(o in s)t=s[o],i+=1,r+=t.length;return n=\"\"+i+\" \"+(1===i?\"table\":\"tables\"),e=\"\"+r+\" \"+(1===r?\"record\":\"records\"),\"Datastore.RecordsChanged(\"+e+\" in \"+n+\" changed \"+(this._local?\"locally\":\"remotely\")+\")\"},t._fromRecordList=function(e,r){var n,i,o,s,a;for(i={},s=0,a=e.length;a>s;s++)n=e[s],o=n._tid,null==i[o]&&(i[o]=[]),i[o].push(n);return new t(i,r)},t.prototype.affectedRecordsByTable=function(){return this._recordsByTable},t.prototype.affectedRecordsForTable=function(t){var e;return null!=(e=this._recordsByTable[t])?e:[]},t.prototype.isLocal=function(){return this._local},t}(),K=x.Datastore.RecordsChanged,x.Datastore.Table=function(){function t(t,e){this._datastore=t,this._tid=e,this._record_cache=this._datastore._record_cache,this._managed_datastore=this._datastore._managed_datastore}return t.prototype.getId=function(){return this._tid},t.prototype.get=function(t){var e,r;if(!x.Datastore.Record.isValidId(t))throw new Error(\"Invalid record ID: \"+t);return r=this._record_cache.get(this._tid,t),null!=r?(ne(!r._deleted),r):(e=this._managed_datastore.query(this._tid,t),null==e?null:this._record_cache.getOrCreate(this._tid,t))},t.prototype.getOrInsert=function(t,e){var r;return r=this.get(t),r?r:this._insertWithId(t,e)},t.prototype.insert=function(t){var e;return e=this._datastore._generateRid(),ne(null==this.get(e)),this._insertWithId(e,t)},t.prototype.query=function(t){var e,r,n,i,o,s,a;for(o=this._managed_datastore.list_rows_for_table(this._tid),n=[],s=0,a=o.length;a>s;s++)i=o[s],e=this._managed_datastore.query(this._tid,i),(null==t||ie.matchDsValues(t,e))&&(r=this.get(i),ne(null!=r),n.push(r));return n},t.prototype.setResolutionRule=function(t,e){if(\"remote\"!==e&&\"local\"!==e&&\"min\"!==e&&\"max\"!==e&&\"sum\"!==e)throw new Error(\"\"+e+\" is not a valid resolution rule. Valid rules are 'remote', 'local', 'min', 'max', and 'sum'.\");return this._managed_datastore.resolver.add_resolution_rule(this._tid,t,e),this},t.isValidId=function(t){var e;return e=new RegExp(te.SS_ID_REGEX),te.is_string(t)&&e.test(t)},t.prototype.toString=function(){return\"Datastore.Table(\"+this._tid+\")\"},t.prototype._insertWithId=function(t,e){var r,n,i,o,s;n={};for(i in e)s=e[i],n[i]=ie.toDsValue(s);return r=h.changeFromArray([\"I\",this._tid,t,n]),this._managed_datastore.perform_local_change(r),o=this._record_cache.getOrCreate(this._tid,t),this._datastore._recordsChangedLocally([o]),o},t}(),x.File.ShareUrl=function(){function t(t,e){this.url=t.url,this.expiresAt=x.Util.parseDate(t.expires),this.isDirect=e===!0?!0:e===!1?!1:\"direct\"in t?t.direct:Date.now()-this.expiresAt<=864e5,this.isPreview=!this.isDirect,this._json=null}return t.parse=function(t,e){return t&&\"object\"==typeof t?new x.File.ShareUrl(t,e):t},t.prototype.url=null,t.prototype.expiresAt=null,t.prototype.isDirect=null,t.prototype.isPreview=null,t.prototype.json=function(){return this._json||(this._json={url:this.url,expires:this.expiresAt.toUTCString(),direct:this.isDirect})},t}(),x.File.CopyReference=function(){function t(t){\"object\"==typeof t?(this.tag=t.copy_ref,this.expiresAt=x.Util.parseDate(t.expires),this._json=t):(this.tag=t,this.expiresAt=new Date(1e3*Math.ceil(Date.now()/1e3)),this._json=null)}return t.parse=function(t){return!t||\"object\"!=typeof t&&\"string\"!=typeof t?t:new x.File.CopyReference(t)},t.prototype.tag=null,t.prototype.expiresAt=null,t.prototype.json=function(){return this._json||(this._json={copy_ref:this.tag,expires:this.expiresAt.toUTCString()})},t}(),x.File.Stat=function(){function t(t){var e,r,n,i;switch(this._json=t,this.path=t.path,\"/\"!==this.path.substring(0,1)&&(this.path=\"/\"+this.path),e=this.path.length-1,e>=0&&\"/\"===this.path.substring(e)&&(this.path=this.path.substring(0,e)),r=this.path.lastIndexOf(\"/\"),this.name=this.path.substring(r+1),this.isFolder=t.is_dir||!1,this.isFile=!this.isFolder,this.isRemoved=t.is_deleted||!1,this.typeIcon=t.icon,this.modifiedAt=(null!=(n=t.modified)?n.length:void 0)?x.Util.parseDate(t.modified):null,this.clientModifiedAt=(null!=(i=t.client_mtime)?i.length:void 0)?x.Util.parseDate(t.client_mtime):null,t.root){case\"dropbox\":this.inAppFolder=!1;break;case\"app_folder\":this.inAppFolder=!0;break;default:this.inAppFolder=null}this.size=t.bytes||0,this.humanSize=t.size||\"\",this.hasThumbnail=t.thumb_exists||!1,this.versionTag=t.rev,this.contentHash=t.hash||null,this.mimeType=this.isFolder?t.mime_type||\"inode/directory\":t.mime_type||\"application/octet-stream\"}return t.parse=function(t){return t&&\"object\"==typeof t?new x.File.Stat(t):t},t.prototype.path=null,t.prototype.name=null,t.prototype.inAppFolder=null,t.prototype.isFolder=null,t.prototype.isFile=null,t.prototype.isRemoved=null,t.prototype.typeIcon=null,t.prototype.versionTag=null,t.prototype.contentHash=null,t.prototype.mimeType=null,t.prototype.size=null,t.prototype.humanSize=null,t.prototype.hasThumbnail=null,t.prototype.modifiedAt=null,t.prototype.clientModifiedAt=null,t.prototype.json=function(){return this._json},t}(),x.Http.AppInfo=function(){function t(t,e){var r;this.name=t.name,this._icons=t.icons,r=t.permissions||{},this.canUseDatastores=!!r.datastores,this.canUseFiles=!!r.files,this.canUseFullDropbox=\"full_dropbox\"===r.files,this.hasAppFolder=\"app_folder\"===r.files,this.key=e?e:t.key||null}return t.parse=function(t,e){return t?new x.Http.AppInfo(t,e):t},t.prototype.name=void 0,t.prototype.key=void 0,t.prototype.canUseDatastores=void 0,t.prototype.canUseFiles=void 0,t.prototype.hasAppFolder=void 0,t.prototype.canUseFullDropbox=void 0,t.prototype.icon=function(t,e){return e||(e=t),this._icons[\"\"+t+\"x\"+e]||null},t.ICON_SMALL=64,t.ICON_LARGE=256,t}(),x.Http.PulledChanges=function(){function t(t){var e;this.blankSlate=t.reset||!1,this.cursorTag=t.cursor,this.shouldPullAgain=t.has_more,this.shouldBackOff=!this.shouldPullAgain,this.changes=t.cursor&&t.cursor.length?function(){var r,n,i,o;for(i=t.entries,o=[],r=0,n=i.length;n>r;r++)e=i[r],o.push(x.Http.PulledChange.parse(e));return o}():[]}return t.parse=function(t){return t&&\"object\"==typeof t?new x.Http.PulledChanges(t):t},t.prototype.blankSlate=void 0,t.prototype.cursorTag=void 0,t.prototype.changes=void 0,t.prototype.shouldPullAgain=void 0,t.prototype.shouldBackOff=void 0,t.prototype.cursor=function(){return this.cursorTag},t}(),x.Http.PulledChange=function(){function t(t){this.path=t[0],this.stat=x.File.Stat.parse(t[1]),this.stat?this.wasRemoved=!1:(this.stat=null,this.wasRemoved=!0)}return t.parse=function(t){return t&&\"object\"==typeof t?new x.Http.PulledChange(t):t},t.prototype.path=void 0,t.prototype.wasRemoved=void 0,t.prototype.stat=void 0,t}(),x.Http.RangeInfo=function(){function t(t){var e;(e=/^bytes (\\d*)-(\\d*)\\/(.*)$/.exec(t))?(this.start=parseInt(e[1]),this.end=parseInt(e[2]),this.size=\"*\"===e[3]?null:parseInt(e[3])):(this.start=0,this.end=0,this.size=null)}return t.parse=function(t){return\"string\"==typeof t?new x.Http.RangeInfo(t):t},t.prototype.start=null,t.prototype.size=null,t.prototype.end=null,t}(),x.Http.UploadCursor=function(){function t(t){this.replace(t)}return t.parse=function(t){return!t||\"object\"!=typeof t&&\"string\"!=typeof t?t:new x.Http.UploadCursor(t)},t.prototype.tag=null,t.prototype.offset=null,t.prototype.expiresAt=null,t.prototype.json=function(){return this._json||(this._json={upload_id:this.tag,offset:this.offset,expires:this.expiresAt.toUTCString()})},t.prototype.replace=function(t){return\"object\"==typeof t?(this.tag=t.upload_id||null,this.offset=t.offset||0,this.expiresAt=x.Util.parseDate(t.expires)||Date.now(),this._json=t):(this.tag=t||null,this.offset=0,this.expiresAt=new Date(1e3*Math.floor(Date.now()/1e3)),this._json=null),this},t}(),\"function\"==typeof x.Env.global.atob&&\"function\"==typeof x.Env.global.btoa?(x.Util.atob=function(t){return x.Env.global.atob(t)},x.Util.btoa=function(t){return x.Env.global.btoa(t)}):x.Env.global.require&&x.Env.global.Buffer?(x.Util.atob=function(t){var e,r;return e=new Buffer(t,\"base64\"),function(){var t,n,i;for(i=[],r=t=0,n=e.length;n>=0?n>t:t>n;r=n>=0?++t:--t)i.push(String.fromCharCode(e[r]));return i}().join(\"\")},x.Util.btoa=function(t){var e,r;return e=new Buffer(function(){var e,n,i;for(i=[],r=e=0,n=t.length;n>=0?n>e:e>n;r=n>=0?++e:--e)i.push(t.charCodeAt(r));return i}()),e.toString(\"base64\")}):function(){var t,e,r;return e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",r=function(t,r,n){var i,o;for(o=3-r,t<<=8*o,i=3;i>=o;)n.push(e.charAt(63&t>>6*i)),i-=1;for(i=r;3>i;)n.push(\"=\"),i+=1;return null},t=function(t,e,r){var n,i;for(i=4-e,t<<=6*i,n=2;n>=i;)r.push(String.fromCharCode(255&t>>8*n)),n-=1;return null},x.Util.btoa=function(t){var e,n,i,o,s,a;for(o=[],e=0,n=0,i=s=0,a=t.length;a>=0?a>s:s>a;i=a>=0?++s:--s)e=e<<8|t.charCodeAt(i),n+=1,3===n&&(r(e,n,o),e=n=0);return n>0&&r(e,n,o),o.join(\"\")},x.Util.atob=function(r){var n,i,o,s,a,u,l;for(a=[],n=0,o=0,s=u=0,l=r.length;(l>=0?l>u:u>l)&&(i=r.charAt(s),\"=\"!==i);s=l>=0?++u:--u)n=n<<6|e.indexOf(i),o+=1,4===o&&(t(n,o,a),n=o=0);return o>0&&t(n,o,a),a.join(\"\")}}(),function(){var t,e,r,n,i,o,s,a,u,l,h;if(x.Util.hmac=function(e,n){return t(r(u(e),u(n),e.length,n.length))},x.Util.sha1=function(e){return t(i(u(e),e.length))},x.Util.sha256=function(e){return t(o(u(e),e.length))},x.Env.require)try{e=x.Env.require(\"crypto\"),e.createHmac&&e.createHash&&(x.Util.hmac=function(t,r){var n;return n=e.createHmac(\"sha1\",r),n.update(t),n.digest(\"base64\")},x.Util.sha1=function(t){var r;return r=e.createHash(\"sha1\"),r.update(t),r.digest(\"base64\")},x.Util.sha256=function(t){var r;return r=e.createHash(\"sha256\"),r.update(t),r.digest(\"base64\")})}catch(c){n=c}return r=function(t,e,r,n){var o,s,a,u;return e.length>16&&(e=i(e,n)),a=function(){var t,r;for(r=[],s=t=0;16>t;s=++t)r.push(909522486^e[s]);return r}(),u=function(){var t,r;for(r=[],s=t=0;16>t;s=++t)r.push(1549556828^e[s]);return r}(),o=i(a.concat(t),64+r),i(u.concat(o),84)},i=function(t,e){var r,n,i,o,s,a,u,l,h,c,p,d,f,_,y,g,m;for(t[e>>2]|=1<<31-((3&e)<<3),t[(e+8>>6<<4)+15]=e<<3,y=Array(80),r=1732584193,i=4023233417,s=2562383102,u=271733878,h=3285377520,p=0,f=t.length;f>p;){for(n=r,o=i,a=s,l=u,c=h,d=m=0;80>m;d=++m)16>d?y[d]=0|t[p+d<<2>>2]:(_=(0|y[d-3<<2>>2])^(0|y[d-8<<2>>2])^(0|y[d-14<<2>>2])^(0|y[d-16<<2>>2]),y[d]=_<<1|_>>>31),g=0|(0|(r<<5|r>>>27)+h)+y[d<<2>>2],g=20>d?0|g+(0|(i&s|~i&u)+1518500249):40>d?0|g+(0|(i^s^u)+1859775393):60>d?0|(0|g+((i&s|i&u|s&u)-1894007588)):0|g+(0|(i^s^u)-899497514),h=u,u=s,s=i<<30|i>>>2,i=r,r=g;r=0|n+r,i=0|o+i,s=0|a+s,u=0|l+u,h=0|c+h,p=0|p+16}return[r,i,s,u,h]},o=function(t,e){var r,n,i,o,u,l,h,c,p,d,f,_,y,g,m,v,w,b,S,D,E,A,x,O,U,T,C,k,I,R,P,L;for(t[e>>2]|=1<<31-((3&e)<<3),t[(e+8>>6<<4)+15]=e<<3,I=Array(80),r=s[0],i=s[1],u=s[2],c=s[3],d=s[4],_=s[5],g=s[6],D=s[7],A=0,O=t.length;O>A;){for(n=r,o=i,l=u,p=c,f=d,y=_,m=g,E=D,x=L=0;64>L;x=++L)16>x?k=I[x]=0|t[A+x<<2>>2]:(w=0|I[x-15<<2>>2],v=(w<<25|w>>>7)^(w<<14|w>>>18)^w>>>3,S=0|I[x-2<<2>>2],b=(S<<15|S>>>17)^(S<<13|S>>>19)^S>>>10,k=I[x]=0|(0|v+(0|I[x-7<<2>>2]))+(0|b+(0|I[x-16<<2>>2]))),h=d&_^~d&g,U=r&i^r&u^i&u,T=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),C=(d<<26|d>>>6)^(d<<21|d>>>11)^(d<<7|d>>>25),R=0|(0|(0|D+C)+(0|h+k))+(0|a[x<<2>>2]),P=0|T+U,D=g,g=_,_=d,d=0|c+R,c=u,u=i,i=r,r=0|R+P;r=0|n+r,i=0|o+i,u=0|l+u,c=0|p+c,d=0|f+d,_=0|y+_,g=0|m+g,D=0|E+D,A+=16}return[r,i,u,c,d,_,g,D]},l=function(t){return 0>t&&(t=4*(1<<30)+t),t.toString(16)},s=[],a=[],function(){var t,e,r,n,i,o,u;for(e=function(t){return 0|4294967296*(t-Math.floor(t))},i=2,u=[],r=o=0;64>o;r=++o){for(;;){for(n=!0,t=2;i>=t*t;){if(0===i%t){n=!1;break}t+=1}if(n)break;i+=1}8>r&&(s[r]=e(Math.pow(i,.5))),a[r]=e(Math.pow(i,1/3)),u.push(i+=1)}return u}(),t=function(t){var e,r,n,i,o;for(i=\"\",e=0,n=4*t.length;n>e;)r=e,o=(255&t[r>>2]>>(3-(3&r)<<3))<<16,r+=1,o|=(255&t[r>>2]>>(3-(3&r)<<3))<<8,r+=1,o|=255&t[r>>2]>>(3-(3&r)<<3),i+=h[63&o>>18],i+=h[63&o>>12],e+=1,i+=e>=n?\"=\":h[63&o>>6],e+=1,i+=e>=n?\"=\":h[63&o],e+=1;return i},h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",u=function(t){var e,r,n,i,o;for(e=[],n=255,r=i=0,o=t.length;o>=0?o>i:i>o;r=o>=0?++i:--i)e[r>>2]|=(t.charCodeAt(r)&n)<<(3-(3&r)<<3);return e}}(),x.Util.Oauth=function(){function t(t){this._id=null,this._secret=null,this._stateParam=null,this._authCode=null,this._token=null,this._tokenKey=null,this._tokenKid=null,this._error=null,this._appHash=null,this._loaded=null,this.setCredentials(t)}return t.prototype.setCredentials=function(t){if(t.key)this._id=t.key;else{if(!t.token)throw new Error(\"No API key supplied\");this._id=null}return this._secret=t.secret||null,this._appHash=null,this._error=null,this._loaded=!0,this.reset(),t.token?(this._token=t.token,t.tokenKey&&(this._tokenKey=t.tokenKey,this._tokenKid=t.tokenKid)):t.oauthCode?this._authCode=t.oauthCode:t.oauthStateParam&&(this._stateParam=t.oauthStateParam),this},t.prototype.credentials=function(){var t;return t={},this._id&&(t.key=this._id),this._secret&&(t.secret=this._secret),null!==this._token?(t.token=this._token,this._tokenKey&&(t.tokenKey=this._tokenKey,t.tokenKid=this._tokenKid)):null!==this._authCode?t.oauthCode=this._authCode:null!==this._stateParam&&(t.oauthStateParam=this._stateParam),t},t.prototype.step=function(){return null!==this._token?x.Client.DONE:null!==this._authCode?x.Client.AUTHORIZED:null!==this._stateParam?this._loaded?x.Client.PARAM_LOADED:x.Client.PARAM_SET:null!==this._error?x.Client.ERROR:x.Client.RESET},t.prototype.setAuthStateParam=function(t){if(null===this._id)throw new Error(\"No API key supplied, cannot do authorization\");return this.reset(),this._loaded=!1,this._stateParam=t,this},t.prototype.checkAuthStateParam=function(t){return this._stateParam===t&&null!==this._stateParam},t.prototype.authStateParam=function(){return this._stateParam},t.prototype.error=function(){return this._error},t.prototype.processRedirectParams=function(t){var e;if(t.error){if(null===this._id)throw new Error(\"No API key supplied, cannot process errors\");return this.reset(),this._error=new x.AuthError(t),!0}if(t.code){if(null===this._id)throw new Error(\"No API key supplied, cannot do Authorization Codes\");return this.reset(),this._loaded=!1,this._authCode=t.code,!0}if(e=t.token_type){if(e=e.toLowerCase(),\"bearer\"!==e&&\"mac\"!==e)throw new Error(\"Unimplemented token type \"+e);if(this.reset(),this._loaded=!1,\"mac\"===e){if(\"hmac-sha-1\"!==t.mac_algorithm)throw new Error(\"Unimplemented MAC algorithms \"+t.mac_algorithm);this._tokenKey=t.mac_key,this._tokenKid=t.kid}return this._token=t.access_token,!0}return!1},t.prototype.authHeader=function(t,e,r){var n,i;return null===this._token?(i=null===this._secret?x.Util.btoa(\"\"+this._id+\":\"):x.Util.btoa(\"\"+this._id+\":\"+this._secret),\"Basic \"+i):null===this._tokenKey?\"Bearer \"+this._token:(n=this.macParams(t,e,r),\"MAC kid=\"+n.kid+\" ts=\"+n.ts+\" \"+(\"access_token=\"+this._token+\" mac=\"+n.mac))},t.prototype.addAuthParams=function(t,e,r){var n;return null===this._token?(r.client_id=this._id,null!==this._secret&&(r.client_secret=this._secret)):(null!==this._tokenKey&&(n=this.macParams(t,e,r),r.kid=n.kid,r.ts=n.ts,r.mac=n.mac),r.access_token=this._token),r},t.prototype.authorizeUrlParams=function(t,e){var r;if(\"token\"!==t&&\"code\"!==t)throw new Error(\"Unimplemented /authorize response type \"+t);return r={client_id:this._id,state:this._stateParam,response_type:t},e&&(r.redirect_uri=e),r},t.prototype.accessTokenParams=function(t){var e;return e={grant_type:\"authorization_code\",code:this._authCode},t&&(e.redirect_uri=t),e},t.queryParamsFromUrl=function(t){var e,r,n,i,o,s,a,u,l,h;if(i=/^[^?#]+(\\?([^\\#]*))?(\\#(.*))?$/.exec(t),!i)return{};for(a=i[2]||\"\",\"/\"===a.substring(0,1)&&(a=a.substring(1)),e=i[4]||\"\",r=e.indexOf(\"?\"),-1!==r&&(e=e.substring(r+1)),\"/\"===e.substring(0,1)&&(e=e.substring(1)),s={},h=a.split(\"&\").concat(e.split(\"&\")),u=0,l=h.length;l>u;u++)n=h[u],o=n.indexOf(\"=\"),-1!==o&&(s[decodeURIComponent(n.substring(0,o))]=decodeURIComponent(n.substring(o+1)));return s},t.prototype.macParams=function(t,e,r){var n,i;return n={kid:this._tokenKid,ts:x.Util.Oauth.timestamp()},i=t.toUpperCase()+\"&\"+x.Util.Xhr.urlEncodeValue(e)+\"&\"+x.Util.Xhr.urlEncodeValue(x.Util.Xhr.urlEncode(r)),n.mac=x.Util.hmac(i,this._tokenKey),n},t.prototype.appHash=function(){return this._appHash?this._appHash:this._appHash=x.Util.sha1(\"oauth2-\"+this._id).replace(/[\\/+=]/g,\"\")},t.prototype.reset=function(){return this._stateParam=null,this._authCode=null,this._token=null,this._tokenKey=null,this._tokenKid=null,this._error=null,this},t.timestamp=function(){return Math.floor(Date.now()/1e3)},t.randomAuthStateParam=function(){return[\"oas\",Date.now().toString(36),Math.random().toString(36)].join(\"_\")},t}(),null==Date.now&&(x.Util.Oauth.timestamp=function(){return Math.floor((new Date).getTime()/1e3)}),2274814865e3===new Date(\"Fri, 31 Jan 2042 21:01:05 +0000\").valueOf()?x.Util.parseDate=function(t){return new Date(t)}:2274814865e3===Date.parse(\"Fri, 31 Jan 2042 21:01:05 +0000\")?x.Util.parseDate=function(t){return new Date(Date.parse(t))}:function(){var t,e;return e=/^\\w+\\, (\\d+) (\\w+) (\\d+) (\\d+)\\:(\\d+)\\:(\\d+) (\\+\\d+|UTC|GMT)$/,t={Jan:0,Feb:1,Mar:2,Apr:3,May:4,Jun:5,Jul:6,Aug:7,Sep:8,Oct:9,Nov:10,Dec:11},x.Util.parseDate=function(r){var n;return(n=e.exec(r))?new Date(Date.UTC(parseInt(n[3]),t[n[2]],parseInt(n[1]),parseInt(n[4]),parseInt(n[5]),parseInt(n[6]),0)):0/0}}(),x.Util.countUtf8Bytes=function(t){var e,r,n,i,o;for(e=0,n=i=0,o=t.length;o>=0?o>i:i>o;n=o>=0?++i:--i)r=t.charCodeAt(n),127>=r?e+=1:2047>=r?e+=2:r>=55296&&57343>=r?e+=2:65535>=r?e+=3:ne(!1);return e},x.Env.global.XMLHttpRequest?(!x.Env.global.XDomainRequest||\"withCredentials\"in new XMLHttpRequest?(w=XMLHttpRequest,v=!1,g=\"undefined\"!=typeof FormData&&-1===navigator.userAgent.indexOf(\"Firefox\")):(w=XDomainRequest,v=!0,g=!1),m=!0):(w=x.Env.require(\"xhr2\"),v=!1,g=!1,m=!1),x.Env.global.Uint8Array)if(Object.getPrototypeOf?y=Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array(0))).constructor:Object.__proto__&&(y=new Uint8Array(0).__proto__.__proto__.constructor),x.Env.global.Blob){try{!function(){return 2===new Blob([new Uint8Array(2)]).size?(S=!0,b=!0):(b=!1,S=2===new Blob([new ArrayBuffer(2)]).size)}()}catch(he){b=!1,S=!1,x.Env.global.WebKitBlobBuilder&&-1!==navigator.userAgent.indexOf(\"Android\")&&(g=!1)}y===Object&&(b=!1)}else S=!1,b=!0;else y=null,S=!1,b=!1;x.Util.Xhr=function(){function t(t,e){this.method=t,this.isGet=\"GET\"===this.method,this.url=e,this.wantHeaders=!1,this.headers={},this.params=null,this.body=null,this.preflight=!(this.isGet||\"POST\"===this.method),this.signed=!1,this.completed=!1,this.responseType=null,this.callback=null,this.xhr=null,this.onError=null}return t.Request=w,t.ieXdr=v,t.canSendForms=g,t.doesPreflight=m,t.ArrayBufferView=y,t.sendArrayBufferView=b,t.wrapBlob=S,t.prototype.xhr=null,t.prototype.onError=null,t.prototype.setParams=function(t){if(this.signed)throw new Error(\"setParams called after addOauthParams or addOauthHeader\");if(this.params)throw new Error(\"setParams cannot be called twice\");return this.params=t,this},t.prototype.setCallback=function(t){return this.callback=t,this},t.prototype.signWithOauth=function(t,e){return x.Util.Xhr.ieXdr?this.addOauthParams(t):this.preflight||!x.Util.Xhr.doesPreflight?this.addOauthHeader(t):this.isGet&&e?this.addOauthHeader(t):this.addOauthParams(t)},t.prototype.addOauthParams=function(t){if(this.signed)throw new Error(\"Request already has an OAuth signature\");return this.params||(this.params={}),t.addAuthParams(this.method,this.url,this.params),this.signed=!0,this},t.prototype.addOauthHeader=function(t){if(this.signed)throw new Error(\"Request already has an OAuth signature\");return this.params||(this.params={}),this.signed=!0,this.setHeader(\"Authorization\",t.authHeader(this.method,this.url,this.params))},t.prototype.setBody=function(t){if(this.isGet)throw new Error(\"setBody cannot be called on GET requests\");if(null!==this.body)throw new Error(\"Request already has a body\");return\"string\"==typeof t||\"undefined\"!=typeof FormData&&t instanceof FormData||(this.headers[\"Content-Type\"]=\"application/octet-stream\",this.preflight=!0),this.body=t,this},t.prototype.setResponseType=function(t){return this.responseType=t,this},t.prototype.setHeader=function(t,e){var r;if(this.headers[t])throw r=this.headers[t],new Error(\"HTTP header \"+t+\" already set to \"+r);if(\"Content-Type\"===t)throw new Error(\"Content-Type is automatically computed based on setBody\");return this.preflight=!0,this.headers[t]=e,this},t.prototype.reportResponseHeaders=function(){return this.wantHeaders=!0},t.prototype.setFileField=function(t,e,r,n){var i,o,s,a,u;if(null!==this.body)throw new Error(\"Request already has a body\");if(this.isGet)throw new Error(\"setFileField cannot be called on GET requests\");if(\"object\"==typeof r){\"undefined\"!=typeof ArrayBuffer&&(r instanceof ArrayBuffer?x.Util.Xhr.sendArrayBufferView&&(r=new Uint8Array(r)):!x.Util.Xhr.sendArrayBufferView&&0===r.byteOffset&&r.buffer instanceof ArrayBuffer&&(r=r.buffer)),n||(n=\"application/octet-stream\");try{r=new Blob([r],{type:n})}catch(l){o=l,window.WebKitBlobBuilder&&(a=new WebKitBlobBuilder,a.append(r),(i=a.getBlob(n))&&(r=i))}\"undefined\"!=typeof File&&r instanceof File&&(r=new Blob([r],{type:r.type})),u=r instanceof Blob}else u=!1;return u?(this.body=new FormData,this.body.append(t,r,e)):(n||(n=\"application/octet-stream\"),s=this.multipartBoundary(),this.headers[\"Content-Type\"]=\"multipart/form-data; boundary=\"+s,this.body=[\"--\",s,\"\\r\\n\",'Content-Disposition: form-data; name=\"',t,'\"; filename=\"',e,'\"\\r\\n',\"Content-Type: \",n,\"\\r\\n\",\"Content-Transfer-Encoding: binary\\r\\n\\r\\n\",r,\"\\r\\n\",\"--\",s,\"--\",\"\\r\\n\"].join(\"\"))},t.prototype.multipartBoundary=function(){return[Date.now().toString(36),Math.random().toString(36)].join(\"----\")},t.prototype.paramsToUrl=function(){var t;return this.params&&(t=x.Util.Xhr.urlEncode(this.params),0!==t.length&&(this.url=[this.url,\"?\",t].join(\"\")),this.params=null),this},t.prototype.paramsToBody=function(){if(this.params){if(null!==this.body)throw new Error(\"Request already has a body\");if(this.isGet)throw new Error(\"paramsToBody cannot be called on GET requests\");this.headers[\"Content-Type\"]=\"application/x-www-form-urlencoded\",this.body=x.Util.Xhr.urlEncode(this.params),this.params=null}return this},t.prototype.prepare=function(){var t,e,r,n,i=this;if(e=x.Util.Xhr.ieXdr,this.isGet||null!==this.body||e?(this.paramsToUrl(),null!==this.body&&\"string\"==typeof this.body&&(this.headers[\"Content-Type\"]=\"text/plain; charset=utf8\")):this.paramsToBody(),this.xhr=new x.Util.Xhr.Request,e?(this.xhr.onload=function(){return i.onXdrLoad()},this.xhr.onerror=function(){return i.onXdrError()},this.xhr.ontimeout=function(){return i.onXdrError()},this.xhr.onprogress=function(){}):this.xhr.onreadystatechange=function(){return i.onReadyStateChange()},this.xhr.open(this.method,this.url,!0),!e){n=this.headers;for(t in n)se.call(n,t)&&(r=n[t],this.xhr.setRequestHeader(t,r))}return this.responseType&&(\"b\"===this.responseType?this.xhr.overrideMimeType&&this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\"):this.xhr.responseType=this.responseType),this},t.prototype.send=function(t){var e,r;if(this.callback=t||this.callback,null!==this.body){e=this.body,x.Util.Xhr.sendArrayBufferView?e instanceof ArrayBuffer&&(e=new Uint8Array(e)):0===e.byteOffset&&e.buffer instanceof ArrayBuffer&&(e=e.buffer);try{this.xhr.send(e)}catch(n){if(r=n,x.Util.Xhr.sendArrayBufferView||!x.Util.Xhr.wrapBlob)throw r;e=new Blob([e],{type:\"application/octet-stream\"}),this.xhr.send(e)}}else this.xhr.send();return this},t.urlEncode=function(t){var e,r,n;e=[];for(r in t)n=t[r],e.push(this.urlEncodeValue(r)+\"=\"+this.urlEncodeValue(n));return e.sort().join(\"&\")},t.urlEncodeValue=function(t){return encodeURIComponent(t.toString()).replace(/\\!/g,\"%21\").replace(/'/g,\"%27\").replace(/\\(/g,\"%28\").replace(/\\)/g,\"%29\").replace(/\\*/g,\"%2A\")},t.urlDecode=function(t){var e,r,n,i,o,s;for(r={},s=t.split(\"&\"),i=0,o=s.length;o>i;i++)n=s[i],e=n.split(\"=\"),r[decodeURIComponent(e[0])]=decodeURIComponent(e[1]);return r},t.prototype.onReadyStateChange=function(){var t,e,r,n,i,o,s,a,u,l,h,c,p,d,f;if(4!==this.xhr.readyState)return!0;if(this.completed)return!0;if(this.completed=!0,this.xhr.status<200||this.xhr.status>=300)return e=new x.ApiError(this.xhr,this.method,this.url),this.onError?this.onError(e,this.callback):this.callback(e),!0;if(this.wantHeaders?(t=this.xhr.getAllResponseHeaders(),s=t?x.Util.Xhr.parseResponseHeaders(t):this.guessResponseHeaders(),h=s[\"x-dropbox-metadata\"]):(s=void 0,h=this.xhr.getResponseHeader(\"x-dropbox-metadata\")),null!=h?h.length:void 0)try{l=JSON.parse(h)}catch(_){if(u=_,o=h.search(/\\}\\,\\s*\\{/),-1!==o)try{h=h.substring(0,o+1),l=JSON.parse(h)}catch(_){u=_,l=void 0}else l=void 0}else l=void 0;if(this.responseType){if(\"b\"===this.responseType){for(i=null!=this.xhr.responseText?this.xhr.responseText:this.xhr.response,r=[],a=d=0,f=i.length;f>=0?f>d:d>f;a=f>=0?++d:--d)r.push(String.fromCharCode(255&i.charCodeAt(a)));p=r.join(\"\"),this.callback(null,p,l,s)}else this.callback(null,this.xhr.response,l,s);return!0}switch(p=null!=this.xhr.responseText?this.xhr.responseText:this.xhr.response,n=this.xhr.getResponseHeader(\"Content-Type\"),n&&(c=n.indexOf(\";\"),-1!==c&&(n=n.substring(0,c))),n){case\"application/x-www-form-urlencoded\":this.callback(null,x.Util.Xhr.urlDecode(p),l,s);break;case\"application/json\":case\"text/javascript\":this.callback(null,JSON.parse(p),l,s);\nbreak;default:this.callback(null,p,l,s)}return!0},t.parseResponseHeaders=function(t){var e,r,n,i,o,s,a,u;for(n={},r=t.split(\"\\n\"),a=0,u=r.length;u>a;a++)i=r[a],e=i.indexOf(\":\"),o=i.substring(0,e).trim().toLowerCase(),s=i.substring(e+1).trim(),n[o]=s;return n},t.prototype.guessResponseHeaders=function(){var t,e,r,n,i,o;for(t={},o=[\"cache-control\",\"content-language\",\"content-range\",\"content-type\",\"expires\",\"last-modified\",\"pragma\",\"x-dropbox-metadata\"],n=0,i=o.length;i>n;n++)e=o[n],r=this.xhr.getResponseHeader(e),r&&(t[e]=r);return t},t.prototype.onXdrLoad=function(){var t,e,r;if(this.completed)return!0;if(this.completed=!0,r=this.xhr.responseText,t=this.wantHeaders?{\"content-type\":this.xhr.contentType}:void 0,e=void 0,this.responseType)return this.callback(null,r,e,t),!0;switch(this.xhr.contentType){case\"application/x-www-form-urlencoded\":this.callback(null,x.Util.Xhr.urlDecode(r),e,t);break;case\"application/json\":case\"text/javascript\":this.callback(null,JSON.parse(r),e,t);break;default:this.callback(null,r,e,t)}return!0},t.prototype.onXdrError=function(){var t;return this.completed?!0:(this.completed=!0,t=new x.ApiError(this.xhr,this.method,this.url),this.onError?this.onError(t,this.callback):this.callback(t),!0)},t}(),re=\"X-Dropbox-User-Agent\",J=\"X-Dropbox-Request-Id\",x.DatastoresClient={_dispatchDatastoreXhr:function(t,e,r,n,i,o){var s,a,l;return l=new x.Util.Xhr(t,e),i.setRequestId&&(a=\"xxxxxxxxxxxxxxxx\".replace(/x/g,function(){return Math.floor(16*Math.random()).toString(16)}),l.setHeader(J,a)),ne(null==r[re]),r=ie.clone(r),r[re]=\"dropbox-js-datastore-sdk/\"+u,l.setParams(r),l.signWithOauth(this.oauth,!1),s=function(t,e){var r;if(null!=t)return o(t);if(te.is_string(e)){console.log(\"Treating server response string as JSON:\",e);try{e=JSON.parse(e)}catch(i){r=i,console.log(\"Error parsing response as JSON\",r.stack)}}return o(null,n.fromJSON(e))},i.isLongPoll?this.dispatchLongPollXhr(l,s):this.dispatchXhr(l,s),l},_listDatastores:function(t){return this._dispatchDatastoreXhr(\"GET\",this.urls.listDbs,{},N,{},t)},_getOrCreateDatastore:function(t,e){return this._dispatchDatastoreXhr(\"POST\",this.urls.getOrCreateDb,{dsid:t},s,{},e)},_createDatastore:function(t,e,r){return this._dispatchDatastoreXhr(\"POST\",this.urls.createDb,{dsid:t,key:e},s,{},r)},_getDatastore:function(t,e){return this._dispatchDatastoreXhr(\"GET\",this.urls.getDb,{dsid:t},I,{},e)},_deleteDatastore:function(t,e){return this._dispatchDatastoreXhr(\"POST\",this.urls.deleteDb,{handle:t},E,{setRequestId:!0},e)},_putDelta:function(t,e,r){return this._dispatchDatastoreXhr(\"POST\",this.urls.putDelta,{handle:t,rev:e.rev,nonce:e.nonce,changes:JSON.stringify(e.changes)},q,{setRequestId:!0},r)},_getSnapshot:function(t,e){return this._dispatchDatastoreXhr(\"GET\",this.urls.getSnapshot,{handle:t},P,{},e)},_datastoreAwait:function(e,r,n){return this._dispatchDatastoreXhr(\"GET\",this.urls.datastoreAwait,{get_deltas:JSON.stringify({cursors:e}),list_datastores:JSON.stringify({token:r})},t,{isLongPoll:!0},n)},getDatastoreManager:function(){var t,e=this;return null==this._datastoreManager&&(this._datastoreManager=new x.Datastore.DatastoreManager(this),t=function(){return e.authStep===x.Client.SIGNED_OUT?(e._datastoreManager.close(),e._datastoreManager=null,e.onAuthStepChange.removeListener(t)):void 0},this.onAuthStepChange.addListener(t)),this._datastoreManager}},function(){var t,e,r,n;r=x.DatastoresClient,n=[];for(e in r)t=r[e],n.push(x.Client.prototype[e]=t);return n}(),x.File.PublicUrl=x.File.ShareUrl,x.UserInfo=x.AccountInfo}.call(this);\n\ndefine(\"datastore\", [\"jquery\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.datastore;\n    };\n}(this)));\n","\n/*\n * serializeForm\n * https://github.com/danheberden/serializeForm\n *\n * Copyright (c) 2012 Dan Heberden\n * Licensed under the MIT, GPL licenses.\n */\n(function( $ ){\n  $.fn.serializeForm = function() {\n\n    // don't do anything if we didn't get any elements\n    if ( this.length < 1) { \n      return false; \n    }\n\n    var data = {};\n    var lookup = data; //current reference of data\n    var selector = ':input[type!=\"checkbox\"][type!=\"radio\"], input:checked';\n    var parse = function() {\n\n      // data[a][b] becomes [ data, a, b ]\n      var named = this.name.replace(/\\[([^\\]]+)?\\]/g, ',$1').split(',');\n      var cap = named.length - 1;\n      var $el = $( this );\n\n      // Ensure that only elements with valid `name` properties will be serialized\n      if ( named[ 0 ] ) {\n        for ( var i = 0; i < cap; i++ ) {\n          // move down the tree - create objects or array if necessary\n          lookup = lookup[ named[i] ] = lookup[ named[i] ] ||\n            ( named[ i + 1 ] === \"\" ? [] : {} );\n        }\n\n        // at the end, push or assign the value\n        if ( lookup.length !==  undefined ) {\n          lookup.push( $el.val() );\n        }else {\n          lookup[ named[ cap ] ]  = $el.val();\n        }\n\n        // assign the reference back to root\n        lookup = data;\n      }\n    };\n\n    // first, check for elements passed into this function\n    this.filter( selector ).each( parse );\n\n    // then parse possible child elements\n    this.find( selector ).each( parse );\n\n    // return data\n    return data;\n  };\n}( jQuery ));\n\ndefine(\"serializeForm\", [\"jquery\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.serializeForm;\n    };\n}(this)));\n","\ndefine('config',[], function() {\r\n\tvar config = {};\r\n\tconfig.apiKey = 'lfksu2l4dhmimfm';\r\n  \r\n\t_.templateSettings = {\r\n\t\tinterpolate: /\\{\\{(.+?)\\}\\}/g\r\n\t};\r\n  \r\n\treturn config;\r\n});","\ndefine('gapi',['config'], function(config) {\r\n\tvar app\r\n\t, client = new Dropbox.Client({key: config.apiKey});\r\n\r\n\tfunction ApiManager(_app) {\r\n\t\tvar app = _app;\r\n\t\tthis.dropboxAuth(app);\r\n\t}\r\n\r\n\tApiManager.prototype.dropboxAuth = function(app) {\r\n\t\tclient.authenticate();\r\n\t\t\r\n\t\tif ( client.isAuthenticated() ) {\r\n\t\t\tthis.dataStoreManager = client.getDatastoreManager();\r\n\t\t\tthis.client = client;\r\n\t\t}\r\n\t};\r\n\t\r\n\tBackbone.sync = function(method, model, options) {\r\n\t\t\r\n\t\tvar request\r\n\t\t, response\r\n\t\t, table\r\n\t\t, record\r\n\t\t, result\r\n\t\t;\r\n\r\n\t\toptions = options || {};\r\n\t\t\r\n\t\tswitch(method) {\t\r\n\t\t\tcase 'read':\r\n\t\t\t\trequest = dStore.dataStore.getTable(model.url);\t\r\n\t\t\t\tresponse = request.query();\r\n\t\t\t\tBackbone.gapiRequest(response, method, model, options);\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase 'create':\r\n\t\t\t\ttable = dStore.dataStore.getTable(model.url);\t\r\n\t\t\t\tresponse = table.insert(model.toDropbox());\r\n\t\t\t\trecord = response.getFields();\r\n\t\t\t\trecord.id = response.getId();\r\n\t\t\t\toptions.success(record);\r\n\t\t\t\tdStore.collections[model.url].add(record);  // instead of bFiles -- app???\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase 'update':\r\n\t\t\t\ttable = dStore.dataStore.getTable(model.url);\r\n\t\t\t\trecord = table.get(model.id);\r\n\t\t\t\t//delete model.id // ???\r\n\t\t\t\t//console.dir(model.toDropbox());\r\n\t\t\t\trecord.update(model.toDropbox());\r\n\t\t\t\toptions.success(model.toJSON());\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tcase 'delete':\r\n\t\t\t\ttable = dStore.dataStore.getTable(model.url);\r\n\t\t\t\trecord = table.get(model.id);\r\n\t\t\t\trecord.deleteRecord();\r\n\t\t\t\toptions.success(model);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t};\r\n\t\r\n\tBackbone.gapiRequest = function(response, method, model, options) {\r\n\t\tvar record, rec\r\n\t\t//, data = new Array()\r\n\t\t, data = []\r\n\t\t;\r\n\t\t\r\n\t\tfor (var i = 0; i < response.length; i++) {\r\n\t\t\trecord = response[i];\r\n\t\t\trec = record.getFields();\r\n\t\t\trec.id = record.getId();\r\n\t\t\tdata.push(rec);\r\n\t\t}\r\n\t\toptions.success(data);\r\n\t};\r\n\t\r\n\treturn ApiManager;\r\n});\r\n","\ndefine('models/task',[],function() {\r\n\tvar Task = Backbone.Model.extend({\r\n\t\turl: 'tasks',\r\n\t\t//defaults: { title: '', notes: '' }\r\n\t\tparse: function\t (resp) {\r\n\t\t\treturn resp;\r\n\t\t}\r\n\t\t, toDropbox: function() {\r\n\t\t\tvar attrs = _.clone(this.attributes);\r\n\t\t\tdelete attrs.id;\r\n\t\t\treturn attrs;\r\n\t\t}\r\n\t\t, toggle: function() {\r\n\t\t\tthis.save({completed: !this.get(\"completed\")});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Task;\r\n});","\ndefine('collections/tasklists',['models/task'], function(Task) {\r\n\t\r\n\tvar TaskLists = Backbone.Collection.extend({\r\n\t\tmodel: Task\r\n\t\t, url: 'tasks'\r\n\t});\r\n\r\n\treturn TaskLists;\r\n});","\n/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n","\ndefine('text!templates/scaffold.html',[],function () { return '<nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\"></nav>\\r\\n\\r\\n<div id=\"container\">\\r\\n\\t<h1 class=\"intro\">To Do List</h1>\\r\\n\\t<h4>&nbsp;\\r\\n\\t\\t<span class=\"label label-danger\">\\r\\n\\t\\t\\t<span><span class=\"countTasks\">count</span>\\r\\n\\t\\t\\t\\t<span>&nbsp;\\r\\n\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-star\"></span>\\r\\n\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t</span>\\r\\n\\t\\t</span>\\r\\n\\t\\t&nbsp;\\r\\n\\t\\t<span class=\"label label-primary\" style=\"cursor:pointer;\" id=\"showFormButton\">\\r\\n\\t\\t\\tAdd Task\\r\\n\\t\\t</span>\\r\\n\\t</h4>\\r\\n\\t\\r\\n\\t<div class=\"formView\"></div>\\r\\n\\t<div class=\"tableView\"></div>\\r\\n\\t\\t\\r\\n</div>';});\n","\ndefine('text!templates/tasksTable.html',[],function () { return '\\r\\n<table class=\"table table-striped taskTable\">\\r\\n\\t<thead>\\r\\n\\t  <tr>\\r\\n\\t\\t<th>#</th>\\r\\n\\t\\t<th><span class=\"glyphicon glyphicon-ok\"></span></th>\\r\\n\\t\\t<th>Date</th>\\r\\n\\t\\t<th><span class=\"glyphicon glyphicon-list-alt\"></span></th>\\r\\n\\t\\t<th>actions</th>\\r\\n\\t  </tr>\\r\\n\\t</thead>\\r\\n\\t<tbody></tbody>\\r\\n</table>\\r\\n';});\n","\ndefine('text!templates/tasksTr.html',[],function () { return '\\r\\n\\t<td class=\"task_no\">task id</td>\\r\\n\\t<td class=\"task_completed\">\\r\\n\\t\\t<input type=\"checkbox\" name=\"completed\" class=\"isCompleted\"></input>\\r\\n\\t</td>\\r\\n\\t<td class=\"task_date\">task date</td>\\r\\n\\t<td class=\"task_name\">task name</td>\\r\\n\\t<td class=\"task_edit noStrikethrough\">\\r\\n\\t\\t<a href=\"#\" class=\"btn-edit-task\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\\r\\n\\t\\t<a href=\"#\" class=\"btn-del-task\"><span class=\"glyphicon glyphicon-trash\"></span></a>\\r\\n\\t</td>';});\n","\ndefine('views/tasksView',[\r\n  'text!templates/tasksTr.html'\r\n],\r\n\r\nfunction(template) {\r\n  var TasksView = Backbone.View.extend({\r\n    tagName: 'tr',\r\n    //className: 'list-menu-item',\r\n\r\n    template: _.template(template),\r\n\r\n\tinitialize: function(options) {\r\n\t\tthis.dispatcher = options.dispatcher;\r\n\t\tthis.listenTo(this.model, 'destroy removeView', this.remove);\r\n\t\tthis.listenTo(this.model, 'change', this.render);\r\n\t\tthis.listenTo(this.model, 'change:archive', this.archive);\r\n\t\t\r\n\t\t//console.dir(this.model);\r\n    },\r\n\t\t\r\n    events: {\r\n\t\t'click .btn-edit-task'\t\t: 'editTask',\r\n\t\t'click .btn-del-task'\t\t: 'delTask',\r\n\t\t'click .isCompleted'\t\t: 'toggleDone'\r\n    },\r\n\t\r\n\tbindings: {\r\n\t\t'.task_name': {\r\n\t\t\tobserve: 'taskname',\r\n\t\t\tupdateModel: false\r\n\t\t},\r\n\t\t'.task_date': {\r\n\t\t\tobserve: 'created'\r\n\t\t\t, onGet: 'format_created_date'\r\n\t\t},\r\n\t\t'.isCompleted': {\r\n\t\t\tobserve: 'completed'\r\n\t\t\t, updateModel: false\r\n\t\t},\r\n\t\t'.task_ref': {\r\n\t\t\tobserve: 'tasksFileRef'\r\n\t\t\t, onGet: function(value, options) {\r\n\t\t\t\treturn value;\r\n\t\t\t},\r\n\t\t\tupdateModel: false,\r\n\t\t\tafterUpdate: function($el, val, options) {\r\n\t\t\t\t$el.fadeOut(500, function() { $(this).fadeIn(500); });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/*'.task_no': {\r\n\t\t  observe: 'id'\r\n\t\t}*/\r\n\t\t'.task_no': {\r\n\t\t\tobserve: 'id',\r\n\t\t\tupdate: function($el, val, model, options) { $el.text(model.collection.indexOf(model)+1); }\r\n\t\t}\r\n\t},\r\n\t\t\r\n\ttoggleDone: function() {\r\n\t\tthis.model.toggle();\r\n    },\r\n\t\r\n\tarchive: function() {\r\n\t\tthis.remove();\r\n\t\tthis.model.collection.remove(this.model, {silent: true});\r\n\t},\r\n\t\t\r\n\tformat_created_date: function(value, options) {\r\n\t\tvar r;\r\n\t\tr = value ? dStore.moment(value).format(\"ddd, D MMMM @ h:mm a\") : \"\";\r\n\t\treturn r;\r\n\t},\r\n\t\r\n\teditTask: function(e) {\r\n\t\te.preventDefault();\r\n\t\t//console.dir(this);\r\n\t\tdocument.getElementById('inputTask').focus();\r\n\t\tthis.dispatcher.trigger('updateForm', this.model );\r\n\t\tthis.dispatcher.trigger('toggleFormButton');\r\n\t},\t\r\n\t\r\n\tdelTask: function(e) {\r\n\t\te.preventDefault();\r\n\t\tthis.model.destroy();\t\t\r\n\t},\t\r\n\t\r\n    render: function() {\r\n\t\tvar that = this\r\n\t\t;\r\n\t\tthis.$el.html( this.template( this.model.toJSON() ) );\r\n\t\tthis.$el.children().not('.noStrikethrough').toggleClass('completed', this.model.get('completed'));\r\n\t\tthat.stickit();\r\n\t\r\n\t\treturn this;\r\n    }\r\n\t\r\n  });\r\n\r\n  return TasksView;\r\n});\r\n","\ndefine('views/taskTableView',[\r\n  'text!templates/tasksTable.html'  \r\n  , 'views/tasksView'\r\n\r\n],\r\n\r\nfunction(template, TasksView) {\r\n  var TasksTableView = Backbone.View.extend({\r\n    //tagName: 'tr',\r\n    //className: 'list-menu-item',\r\n\r\n    template: _.template(template),\r\n\r\n\tinitialize: function(options) {\r\n\t\tthis.dispatcher = options.dispatcher;\r\n\t\t//this.listenTo(this.model, 'destroy removeView', this.remove);\r\n\t\t//this.listenTo(this.model, 'change', this.render);\r\n\t\tthis.listenTo(this.collection, 'add', this.newTask);\r\n\t\t//this.dispatcher.on('filterTable', this.filterTable, this);\r\n\t\t//this.dispatcher.on('clearFilter', this.render, this);\r\n    },\r\n\t\t\r\n    events: {\r\n\t\t'click .search' :  'searchTable'\r\n\t\t//, 'keyup .searchTerm' :  'searchTable'\r\n    },\r\n\t\r\n\tbindings: {\r\n\t},\r\n\t\r\n\tarchive: function(){\r\n\t\tvar completed = this.collection.where({completed: true});\r\n\t\t_.each(completed, function(model) {\r\n\t\t\tmodel.archive();\r\n\t\t});\r\n\t},\r\n\t\r\n\tfilterTable: function(term){\r\n\t\t//console.dir(term);\r\n\t\tvar pattern = new RegExp(term,\"gi\");\r\n\t\r\n\t\tif (term.length > 1) {\r\n\t\t\tthis.results = this.collection.filter(function(model){\r\n\t\t\t\treturn pattern.test(model.get(\"taskname\"));\r\n\t\t\t});\r\n\t\t\tthis.filteredCollection = new Backbone.Collection(this.results);\r\n\t\t\t//console.dir(this.results);\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t},\r\n\t\r\n\tnewTask: function(model, collection, options){\r\n\t\tvar that = this, view;\r\n\t\tview = new TasksView({model: model, dispatcher: that.dispatcher});\r\n\t\tthis.$el.find('tbody').append(view.render().el);\r\n\t},\r\n\t\t\r\n    render: function(options) {\r\n\t\tvar that = this\r\n\t\t\t, coll = this.collection\r\n\t\t;\r\n\t\t\r\n\t\tthis.$el.html( this.template() );\r\n\t\t\r\n\t\t// render the sub-views\r\n\t\tcoll.each(function(model) {\r\n\t\t\ttrRow = new TasksView({ model: model, dispatcher: that.dispatcher });\r\n\t\t\tcontainer.appendChild(trRow.render().el)\r\n\t\t});\r\n\t\tthis.$el.find('tbody').append(container);\r\n\r\n\t\treturn this;\r\n    }\r\n\t\r\n  });\r\n\r\n  return TasksTableView;\r\n});\r\n","\ndefine('text!templates/tasksForm.html',[],function () { return '\\t<!-- Form to collect new tasks -->\\r\\n\\t<form id=\"addTasksForm\" role=\"form\" class=\"form-horizontal\">\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t<div class=\"form-group\">\\r\\n\\t\\t\\t<label for=\"inputTask\" class=\"col-lg-2 col-xs-2 control-label\">Task</label>\\r\\n\\t\\t\\t<div class=\"col-lg-6 col-xs-6\">\\r\\n\\t\\t\\t\\t<input type=\"text\" name=\"taskname\" class=\"form-control taskname\" id=\"inputTask\" placeholder=\"Enter a new task...\" value=\"\" >\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t\\t\\r\\n\\t\\t<div class=\"form-group\">\\r\\n\\t\\t\\t<div class=\"col-lg-offset-2 col-lg-10\">\\r\\n\\t\\t\\t\\t<button type=\"submit\" class=\"btn btn-primary\">Add Task</button>\\r\\n\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger closeForm pull-right\">Close</button>\\r\\n\\t\\t\\t</div>\\r\\n\\t  </div>\\r\\n\\t\\t\\r\\n\\t</form>\\r\\n\\t';});\n","\ndefine('views/formViewTasks',[\r\n  'text!templates/tasksForm.html',\r\n  'models/task'\r\n],\r\n\r\nfunction(template, Task) {\r\n  var FormViewTasks = Backbone.View.extend({\r\n    //tagName: 'form',\r\n\t\r\n    template: _.template(template),\r\n\r\n\tinitialize: function(options) {\r\n\t\tthis.files = options.files;\r\n\t\tthis.dispatcher = options.dispatcher;\r\n\t\tthis.dispatcher.on('updateForm', this.updateForm, this);\r\n\t\t//this.dispatcher.on('toggleForm', this.slideToggle, this );\r\n    },\r\n\t\r\n    events: {\r\n\t\t'click button[type=submit]' : 'submit'\r\n\t\t, 'click .closeForm'\t\t: 'closeForm'\r\n    },\r\n\t\r\n\tbindings: {\r\n\t\t'.taskid': {\r\n\t\t\tobserve: 'id'\r\n\t\t},\r\n\t\t'.taskname': {\r\n\t\t\tobserve: 'taskname',\r\n\t\t\tupdateModel: false\r\n\t\t}\r\n\t},\r\n\t\t\r\n\tupdateForm: function(model) {\r\n\t\tthis.model = model;\r\n\t\tthis.stickit();\r\n\t\tif ( !this.$el.is(\":visible\") ) {\r\n\t\t\tthis.$el.slideDown();\r\n\t\t}\t\t\r\n\t},\r\n\t\r\n\tcloseForm: function(e) {\r\n\t\tvar that = this;\r\n\t\te.preventDefault();\r\n\t\tif ( that.$el.is(\":visible\") ) {\r\n\t\t\tthat.$el.slideToggle(function(){\r\n\t\t\t\tthat.dispatcher.trigger('toggleFormButton');\r\n\t\t\t});\r\n\t\t}\r\n\t\tthat.newTask();\t\t\r\n\t},\r\n\t\r\n\tslideToggle: function(e) {\r\n\t\t//console.dir(this);\r\n\t\tif ( !this.$el.is(\":visible\") )\r\n\t\t\tthis.$el.slideToggle();\r\n\t\tthis.newTask();\r\n\t},\r\n\t\r\n\t// submit the form\r\n\tsubmit: function(e){\r\n\t\te.preventDefault();\r\n\t\tvar that = this\r\n\t\t;\r\n\t\t\r\n\t\tm = that.model.set(this.$el.serializeForm(), {validate: true});\r\n\t\tif (m) {\r\n\t\t\tm.save({created: new Date(), completed: false});\r\n\t\t\tthis.newTask();\r\n\t\t}\r\n\r\n\t},\r\n\t\r\n\tnewTask: function() {\r\n\t\tthis.$el.find('#inputTask').focus();\r\n\t\t$('#addTasksForm').find('input:text, input:password, input:file, input:hidden, select, textarea').val('');\r\n\t\tthis.model = new Task();\r\n\t},\r\n\t\r\n    render: function() {\r\n\t\tvar that = this\r\n\t\t;\r\n\t\tthis.$el.html( this.template( ) );\r\n\t\tthat.stickit();\r\n\t\t\t\t\r\n\t\treturn this;\r\n    }\r\n});\r\n\r\n  return FormViewTasks;\r\n});\r\n","\ndefine('text!templates/navbar.html',[],function () { return '\\t<!-- Brand and toggle get grouped for better mobile display -->\\r\\n\\t<div class=\"navbar-header\">\\r\\n\\t\\t<a class=\"navbar-brand\" href=\"#\">Backbone-Dropbox Datastore Example</a>\\r\\n\\t</div>\\t\\r\\n\\t\\r\\n\\t<!-- Collect the nav links, forms, and other content for toggling -->\\r\\n\\t<div class=\"collapse navbar-collapse navbar-ex1-collapse\">\\r\\n\\t\\t<p class=\"navbar-text pull-right\">Signed in as <a href=\"#\" class=\"navbar-link login\">{{login}}</a></p>\\r\\n\\t</div>';});\n","\ndefine('views/navbarView',[\r\n  'text!templates/navbar.html'\r\n],\r\n\r\nfunction(navbar) {\r\n\tvar navbarView = Backbone.View.extend({  // change the name here\r\n\r\n\t\tnavBarTemplate: _.template(navbar),\r\n\r\n\t\tinitialize: function(options) {\r\n\t\t},\r\n\t\t\r\n\t\tevents: {\r\n\t\t},\r\n\t\t\r\n\t\trender: function() {\r\n\t\t\t// render the view\r\n\t\t\tthis.$el.html( this.navBarTemplate({login: dStore.userName}) );\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\r\n});\r\n\r\n\treturn navbarView;\r\n});\r\n","\ndefine('views/appView',[\r\n  'text!templates/scaffold.html'\r\n, 'views/taskTableView'\r\n, 'views/formViewTasks'\r\n, 'views/navbarView'\r\n, 'models/task'\r\n],\r\n\r\nfunction(template, TasksTableView, FormViewTasks, NavbarView, Task) {\r\n\tvar AppView = Backbone.View.extend({  // change the name here\r\n\t\ttagName: 'div',\r\n\t\tclassName: 'container',\r\n\r\n\t\ttemplate: _.template(template),\r\n\r\n\t\tinitialize: function(options) {\r\n\t\t\tthis.navbarView = new NavbarView();\r\n\t\t\tthis.dispatcher = options.dispatcher;\r\n\t\t\tthis.form = document.getElementById('addTasksForm');\r\n\t\t\tthis.dispatcher.on('toggleFormButton', this.toggleFormButton, this);\r\n\t\t\tthis.listenTo(this.collection, 'add remove', this.stats, this);\r\n\t\t},\r\n\t\t\r\n\t\tevents: {\r\n\t\t\t'click #showFormButton'\t: 'toggleForm'\r\n\t\t},\r\n\t\t\r\n\t\tstats: function() {\r\n\t\t\tvar el = document.getElementsByClassName('countTasks')[0];\r\n\t\t\tif (el) el.innerHTML = this.collection.length;\r\n\t\t},\r\n\t\t\r\n\t\ttoggleForm: function(e) {\r\n\t\t\t$(e.currentTarget).hide();\r\n\t\t\tthis.dispatcher.trigger('updateForm', new Task() );\r\n\t\t},\r\n\t\r\n\t\t\r\n\t\ttoggleFormButton: function() {\r\n\t\t\tvar form = document.getElementById('addTasksForm')\r\n\t\t\t\t, btn = document.getElementById('showFormButton');\r\n\t\t\t\r\n\t\t\tif ( $(form).is(\":visible\") )\r\n\t\t\t\t$(btn).hide(); \r\n\t\t\telse \r\n\t\t\t\t$(btn).show();\r\n\t\t},\r\n\t\t\r\n\t\trender: function() {\r\n\t\t\tvar that = this\r\n\t\t\t\tcontainer = document.createDocumentFragment()\r\n\t\t\t;\t\t\r\n\t\t\t\r\n\t\t\t// render the main view\r\n\t\t\tthis.$el.html( this.template() );\r\n\t\t\t\r\n\t\t\t// render the sub-views\r\n\t\t\tthis.navbarView.setElement(this.$('.navbar')).render();\r\n\t\t\tnew FormViewTasks({model: new Task(), dispatcher: that.dispatcher }).setElement(this.$('.formView')).render();\r\n\t\t\tnew TasksTableView({collection: that.collection, dispatcher: that.dispatcher }).setElement(this.$('.tableView')).render();\r\n\t\t\t\r\n\t\t\t_.defer(function() {\r\n\t\t\t\tthat.toggleFormButton();\r\n\t\t\t\tthat.stats();\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\t\r\n\t});\r\n\r\n\treturn AppView;\r\n});\r\n","\ndefine('app',[\r\n 'jquery'\r\n ,'backbone'\r\n ,'gapi'\r\n ,'moment'\r\n ,'collections/tasklists'\r\n ,'views/appView'\r\n], \r\n\r\nfunction($, Backbone, ApiManager, moment, Tasks, AppView) {\r\n\tvar App = function(ApiManager) {\r\n\t\t// global event dispatcher\r\n\t\tthis.dispatcher = _.extend({}, Backbone.Events);\r\n\t\tthis.collections.tasks = new Tasks();\r\n\t\tthis.connectDropbox();\t\r\n\t\tthis.moment = moment;\r\n\t};\r\n\r\n\tApp.prototype = {\r\n\t\tviews: {},\r\n\t\tcollections: {},\r\n\t\tvariables: {},\r\n\t\tconnectDropbox: function() {\r\n\t\t\tvar that = this\r\n\t\t\t;\r\n\t\t\t\r\n\t\t\tthis.apiManager = new ApiManager(this);\r\n\t\t\t\r\n\t\t\tthat.apiManager.client.getAccountInfo(function(response, options) {\r\n\t\t\t\tthat.userEmail = options.email;\r\n\t\t\t\tthat.userName = options.name;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (that.apiManager.dataStoreManager) {\t\t\t\t\r\n\t\t\t\tthat.apiManager.dataStoreManager.openDefaultDatastore(function (error, dataStore) {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\tconsole.dir('Error opening default datastore: ' + error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\t// Now you have datastores. \r\n\t\t\t\t\tthat.dataStore = dataStore;\r\n\t\t\t\t\t\r\n\t\t\t\t\tdataStore.recordsChanged.addListener(function (event) {\r\n\t\t\t\t\t\tif (!event.isLocal()) { \r\n\t\t\t\t\t\t\tvar data, records = event.affectedRecordsForTable('tasks');\r\n\t\t\t\t\t\t\tvar c = that.collections.tasks;\r\n\t\t\t\t\t\t\tvar m = c.get(records[0].getId());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (m) {\r\n\t\t\t\t\t\t\t\tif\t(records[0].isDeleted()) {\r\n\t\t\t\t\t\t\t\t\tm.trigger('removeView', m);\r\n\t\t\t\t\t\t\t\t\tm.clear({silent: true});\r\n\t\t\t\t\t\t\t\t} else\r\n\t\t\t\t\t\t\t\t\tm.set(records[0].getFields());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdata = records[0].getFields();\r\n\t\t\t\t\t\t\t\tdata.id = records[0].getId();\r\n\t\t\t\t\t\t\t\tc.add(data, {newTask: true});\r\n\t\t\t\t\t\t\t\t//console.dir(c)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tthat.views.appView = new AppView({collection: that.collections.tasks, dispatcher: that.dispatcher});\r\n\t\t\t\t\t\r\n\t\t\t\t\tthat.collections.tasks.fetch({\r\n\t\t\t\t\t\tsuccess: function(model, response) { \r\n\t\t\t\t\t\t\tvar container = that.views.appView.render().el;\r\n\t\t\t\t\t\t\t$('body')\r\n\t\t\t\t\t\t\t\t.hide()\r\n\t\t\t\t\t\t\t\t.html(container)\r\n\t\t\t\t\t\t\t\t.fadeIn(500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn App;\r\n});","\ndefine('ga',[], function() {\r\n\tvar registerGoogleAnalytics = function(accountId) {\r\n\t\tvar _gaq = _gaq || [];\r\n\t\tif (window) {\r\n\t\t\twindow._gaq = _gaq; // export as global\r\n\t\t}\r\n\t\t_gaq.push(['_setAccount', accountId]);\r\n\t\t_gaq.push(['_trackPageview']);\r\n\t \r\n\t\t(function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];\r\n\t\tg.src='//www.google-analytics.com/ga.js';\r\n\t\ts.parentNode.insertBefore(g,s)}(document,'script'));\r\n\t}\r\n\r\n\treturn registerGoogleAnalytics;\r\n});","\nrequirejs.config({\r\n  baseUrl: 'js',\r\n  \r\n  //urlArgs: \"bust=\" + (new Date()).getTime(),  // http://stackoverflow.com/a/8479953/578667\r\n  urlArgs: \"bust=\" + \"v1\",\r\n  \r\n  paths: { // requirejs-plugins\r\n    'text'\t\t\t\t\t:\t'lib/requirejs-text/text'\r\n\t, 'font'\t\t\t\t:\t'lib/requirejs-plugins/src/font'\r\n\t, 'propertyParser'\t\t:\t'lib/requirejs-plugins/src/propertyParser'\r\n\t, 'jquery'\t\t\t\t:\t'lib/jquery/jquery.min'\r\n\t, 'underscore'\t\t\t:\t'lib/lodash/dist/lodash.underscore.min'\r\n\t, 'backbone'\t\t\t:\t'lib/backbone/backbone-min'\r\n\t, 'stickit'\t\t\t\t:\t'lib/backbone.stickit/backbone.stickit'\r\n\t, 'datastore'\t\t\t:\t'lib/dropbox-datastore/dropbox-datastores-1.0-latest'\r\n\t, 'serializeForm'\t\t:\t'lib/jquery-serializeForm/src/serializeForm'\t\r\n\t, 'moment'\t\t\t\t:\t'lib/momentjs/moment'\r\n\t, 'app'\t\t\t\t\t:\t'app'\r\n  },\r\n\r\n  shim: {\r\n    'underscore': {\r\n\t\texports: '_'\r\n    },\r\n    'backbone': {\r\n\t\tdeps: ['jquery', 'underscore']\r\n\t\t, exports: 'Backbone'\r\n    },\r\n\t'stickit': {\r\n\t\tdeps: ['backbone'] // http://jsfiddle.net/tednaleid/zJYGv/\r\n\t\t, exports: 'Backbone.Stickit'\r\n\t},\r\n\t'datastore': {\r\n\t\tdeps: ['jquery']\r\n\t\t, exports: 'datastore'\r\n\t},\r\n\t'serializeForm': {\r\n\t\tdeps: ['jquery']\r\n\t\t, exports: 'serializeForm'\r\n\t},\r\n    'app': {\r\n\t\tdeps: [/*'jquery', 'underscore', 'backbone', */'stickit', 'moment', 'datastore', 'serializeForm']\r\n\t\t, exports: 'app'\r\n    }\r\n  }\r\n});\r\n\r\nrequirejs([\r\n\t'app', 'ga'\r\n],\r\n\r\nfunction(App, registerGoogleAnalytics) {\r\n\twindow.dStore = new App();\r\n\twindow.ga = new registerGoogleAnalytics('41587087');\r\n});\r\n\ndefine(\"main\", function(){});\n"]}